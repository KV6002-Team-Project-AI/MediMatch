/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-00f527af.js');
const themeableComponent = require('./themeable-component-83a2a0d4.js');
const createId = require('./create-id-1f8c438f.js');
const jsUtils = require('./js-utils-92e24ba1.js');
const keyboardUtils = require('./keyboard-utils-7248dd0a.js');
const languageUtils = require('./language-utils-e8a527e5.js');
const stringUtils = require('./string-utils-053749ff.js');
const tokenUtils = require('./token-utils-a5356b00.js');
require('./tokens.module-ce5f9579.js');

const shouldDisplayNavigation = (visibleItems, total, take) => {
    if (visibleItems * 2 > total / take) {
        return false;
    }
    return true;
};

const duetPaginationCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}.duet-pagination-nav{position:relative}.duet-pagination ::part(button){border:0}.duet-pagination,.duet-pagination li{display:flex;flex-wrap:wrap;gap:0.1rem;align-items:center}.duet-pagination-item-is-active .duet-pagination-page-number{border-bottom-color:inherit;border-bottom-style:solid;border-bottom-width:2px}.duet-pagination duet-button{width:30px;min-width:36px;font-weight:600;text-decoration:none;border-left-width:0}.duet-pagination-overlay{position:absolute;top:1rem;z-index:300;width:100%;text-align:center}.duet-pagination.duet-pagination-is-dimmed{opacity:0.5}.duet-pagination .duet-pagination-select{margin:0 4px 0 12px !important}.duet-pagination-total-pages{margin:0;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600 !important;line-height:1.25;color:rgb(0, 41, 77);text-align:left}:host(.duet-theme-turva) .duet-pagination-total-pages{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}";

const DuetPagination = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.duetPageChange = index.createEvent(this, "duetPageChange", 3);
        this.listId = createId.createID("duet-pagination-list");
        // not in state because we don't want to trigger a render
        this.firstRenderDone = false;
        this.handleMediaQueryChange = (mq) => {
            this.matchesCompactBreakpoint = tokenUtils.breakpointTokensUpTo.includes(this.compactBreakpoint) ? mq.matches : !mq.matches;
        };
        // called from the watcher and used to make sure any changed to current also updates the internal section index
        this.actionChain = async (after, before) => {
            if (after === 0) {
                this.current = 1;
            }
            else if (after > this.totalPages) {
                this.current = this.totalPages;
            }
            else if (before !== after) {
                const calculatedSectionIndex = Math.ceil(after / this.visibleItems) - 1;
                if (calculatedSectionIndex !== this.internalSectionIndex) {
                    this.internalSectionIndex = calculatedSectionIndex;
                    await this.setFocus();
                }
            }
            return true;
        };
        //helper to emit relevant page events
        this.emitPageEvent = (ev, passedPage) => {
            const page = Number(passedPage || this.current);
            this.duetPageChange.emit({
                component: "duet-pagination",
                from: page * this.take,
                to: page * this.take + this.take,
                current: page,
                take: this.take,
                type: "page",
                originalEvent: ev,
            });
        };
        // this will return the entered number, or the current page if the user presses enter
        this.getEnteredNumber = jsUtils.debounce(ev => {
            this.emitPageEvent(ev, this.numbersStore);
            this.current = Number(this.numbersStore);
            this.numbersStore = "";
            this.duetPageChange.emit({
                component: "duet-pagination",
                from: this.current * this.take,
                to: this.current * this.take + this.take,
                current: this.current,
                take: this.take,
                type: "jump",
                originalEvent: ev,
            });
        }, 500);
        this.processedPageLinks = null;
        this.numbersStore = "";
        this.matchesCompactBreakpoint = false;
        this.totalPages = 10;
        this.internalSectionIndex = 0;
        this.theme = "";
        this.variation = "default";
        this.accessibleDescribedBy = undefined;
        this.accessibleDetails = undefined;
        this.accessibleLabelledBy = undefined;
        this.accessibleDescription = undefined;
        this.accessibleLabelsDefaults = {
            en: {
                next_page: "Next page",
                previous_page: "Previous page",
                first_page: "First page",
                last_page: "Last page",
                jump_to: "Jump to page",
                go_to: "Go to page",
                description: "You may use arrow keys to select page number",
                pagination_label: "Pagination, choose a number to jump to a page",
                select_label: "Total pages {0}, choose a number to jump to a page",
                prev_section: "Show previous {0} page numbers, screen reader user should use arrowkeys to navigate",
                next_section: "Show next {0} page numbers, screen reader user should use arrowkeys to navigate",
            },
            fi: {
                next_page: "Seuraava sivu",
                previous_page: "Edellinen sivu",
                first_page: "Ensimmäinen sivu",
                last_page: "Viimeinen sivu",
                jump_to: "Siirry sivulle",
                go_to: "Siirry sivulle",
                description: "Voit käyttää nuolinäppäimiä sivunumeron valitsemiseen",
                pagination_label: "Sivutus, valitse sivunumero siirtyäksesi sivulle",
                select_label: "Sivuja yhteensä {0}, valitse sivunumero siirtyäksesi sivulle",
                prev_section: "Näytä edelliset {0} sivunumerot, käyttäjän pitää käyttää nuolinäppäimiä navigoidaksesi",
                next_section: "Näytä seuraavat {0} sivunumerot, käyttäjän pitää käyttää nuolinäppäimiä navigoidaksesi",
            },
            sv: {
                next_page: "Nästa sida",
                previous_page: "Föregående sida",
                first_page: "Första sidan",
                last_page: "Sista sidan",
                jump_to: "Hoppa till sida",
                go_to: "Hoppa till sida",
                description: "Du kan använda piltangenterna för att välja sida",
                pagination_label: "Paginering, välj en siffra för att hoppa till en sida",
                select_label: "Totalt antal sidor {0}, välj en siffra för att hoppa till en sida",
                prev_section: "Visa föregående {0} sidnummer, skrivbordsläsare ska använda piltangenterna för att navigera",
                next_section: "Visa nästa {0} sidnummer, skrivbordsläsare ska använda piltangenterna för att navigera",
            },
        };
        this.accessibleLabels = languageUtils.getLocaleString(this.accessibleLabelsDefaults);
        this.take = 5;
        this.visibleItems = 5;
        this.total = 1000;
        this.compactBreakpoint = "x-small";
        this.ariaControls = "";
        this.current = 1;
        this.pageLinks = undefined;
    }
    watchPropTotalHandler( /*newValue: boolean, oldValue: boolean*/) {
        this.calculatePageTake();
        return true;
    }
    watchStateHandler(newValue, oldValue) {
        return this.actionChain(newValue, oldValue);
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        // we want to keep the internal current index in sync with the current prop, but take advantage of the multiple with 0 for the first iteration
        this.internalSectionIndex = Math.ceil(this.current / this.visibleItems) - 1;
        this.calculatePageTake();
        themeableComponent.inheritGlobalTheme(this);
        this.refresh();
    }
    componentDidLoad() {
        this.firstRenderDone = true;
    }
    componentWillRender() {
        if (this.internalSectionIndex !== 0 && this.internalSectionIndex !== this.totalPages) {
            this.calculatePageTake();
        }
    }
    componentDidRender() {
        if (this.firstRenderDone && !this.processedPageLinks) {
            this.setFocus();
        }
    }
    connectedCallback() {
        const token = this.compactBreakpoint === "none" ? "all" : tokenUtils.breakpointToToken[this.compactBreakpoint];
        this.mq = matchMedia(token);
        this.mq.addEventListener("change", jsUtils.debounce(this.handleMediaQueryChange, 50));
        this.handleMediaQueryChange(this.mq);
        languageUtils.connectLanguageChangeObserver(this, { prop: "accessibleLabels", defaults: "accessibleLabelsDefaults" });
    }
    disconnectedCallback() {
        this.mq.removeEventListener("change", this.handleMediaQueryChange);
        this.mq = null;
        this.matchesCompactBreakpoint = false;
        languageUtils.disconnectLanguageChangeObserver(this);
    }
    /**
     * Private methods.
     */
    async refresh() {
        this.processedPageLinks = stringUtils.parsePossibleJSON(this.pageLinks);
    }
    //get totalpages from visible and total
    calculatePageTake() {
        this.totalPages = Math.ceil(this.total / this.take);
    }
    //set update current when mouse click on page number
    async onMouseHandler(e, dir) {
        if (!this.processedPageLinks) {
            e.preventDefault();
            e.stopPropagation();
            this.current = this.current + dir;
        }
        this.emitPageEvent(e);
    }
    //handle a11y keyboard navigation events
    async onKeyboardDown(e) {
        let next = this.current;
        // handle a11y based keyboard navigation for left/right/up/down
        if (keyboardUtils.isArrowLeftKey(e) || keyboardUtils.isArrowUpKey(e)) {
            next--;
        }
        if (keyboardUtils.isArrowRightKey(e) || keyboardUtils.isArrowDownKey(e)) {
            next++;
        }
        if (keyboardUtils.isArrowKey(e)) {
            if (next <= this.totalPages) {
                this.current = next;
                if (this.processedPageLinks) {
                    this.emitPageEvent(e, next - 1);
                    window.open(this.processedPageLinks[next - 1], "_self", "");
                }
                else {
                    this.emitPageEvent(e);
                }
            }
        }
        //handle the jump feature, where numbers can be entered
        // this isn't supported in NVDA where the number buttons are used by NVDA itself
        // and because of that the feature is not announced for screenreaders
        if (keyboardUtils.isNumber(e) && this.shouldDisplayNavigation()) {
            this.numbersStore = this.numbersStore + e.key;
            if (Number(this.numbersStore) > this.totalPages) {
                this.numbersStore = this.totalPages + "";
            }
            this.getEnteredNumber(e);
        }
    }
    // utility to set focus on active button
    async setFocus() {
        const currentDomElement = this.nativeNav.querySelector(`[data-id='${this.current}']`);
        currentDomElement && (await currentDomElement.setFocus());
    }
    //handles click on page numbers
    pageClickHandler(e) {
        const clickedId = Number(e.target.getAttribute("data-id"));
        if (!this.processedPageLinks) {
            e.preventDefault();
            this.current = clickedId;
        }
        this.emitPageEvent(e, clickedId);
    }
    selectClickHandler(e) {
        e.preventDefault();
        const clickedId = Number(e.target.value);
        this.current = clickedId;
        if (this.processedPageLinks) {
            this.emitPageEvent(e, clickedId - 1);
            window.open(this.processedPageLinks[clickedId - 1], "_self", "");
        }
        else {
            this.emitPageEvent(e, clickedId);
        }
    }
    //handles click on the next section buttons
    sectionClickHandler(e, direction) {
        e.preventDefault();
        let next = this.internalSectionIndex + direction;
        const takePerVisibleItems = this.take * this.visibleItems;
        if (next * takePerVisibleItems > this.total) {
            next = this.internalSectionIndex;
        }
        const newSection = next;
        this.internalSectionIndex = newSection >= 0 ? newSection : 0;
    }
    //handles click on the jump (1)button
    jumpToStart(e) {
        if (!this.processedPageLinks) {
            e.preventDefault();
            this.internalSectionIndex = 0;
            this.current = 1;
        }
        this.emitPageEvent(e);
    }
    //handles click on the jump (total) button
    jumpToEnd(e) {
        if (!this.processedPageLinks) {
            e.preventDefault();
            this.internalSectionIndex = Math.ceil(this.totalPages / this.take - 1);
            this.current = this.totalPages;
        }
        this.emitPageEvent(e);
    }
    renderPageButton(pageNumber) {
        return (index.h("duet-button", { class: {
                "duet-pagination-link": true,
            }, id: `page-${pageNumber}-button`, color: pageNumber !== this.current
                ? this.theme !== "turva"
                    ? "secondary"
                    : "secondary-turva"
                : this.theme !== "turva"
                    ? "primary"
                    : "primary-turva", "data-id": pageNumber, "center-text": true, variation: "plain", margin: "none", accessibleLabel: `${this.accessibleLabels.go_to} ${pageNumber}`, onClick: e => this.pageClickHandler(e), theme: this.theme, url: this.processedPageLinks ? this.processedPageLinks[pageNumber - 1] : undefined }, index.h("div", { class: "duet-pagination-page-number", "aria-hidden": true }, pageNumber)));
    }
    // render the individual page numbers
    renderPageNumbers() {
        const items = [];
        let i = this.internalSectionIndex * this.visibleItems;
        do {
            i++;
            if (i > this.totalPages) {
                break;
            }
            items.push(index.h("li", { class: {
                    "duet-pagination-item": true,
                    "duet-pagination-item-is-active": i === this.current,
                }, role: "menuitem" }, this.renderPageButton(i)));
        } while (i < this.visibleItems + this.internalSectionIndex * this.visibleItems);
        return items;
    }
    renderSelect() {
        const items = [];
        for (let i = 1; i <= this.totalPages; i++) {
            items.push({
                value: i.toString(),
                label: i.toString(),
            });
        }
        const select = (index.h("duet-select", { theme: this.theme, class: "duet-pagination-select", variation: "compact", items: JSON.stringify(items), value: this.current.toString(), label: this.accessibleLabels.select_label.replace("{0}", `${this.totalPages}`), labelHidden: true, onDuetChange: e => this.selectClickHandler(e) }));
        return (index.h("li", null, select, index.h("span", { class: "duet-pagination-total-pages", "aria-hidden": "true" }, "/ ", this.totalPages)));
    }
    shouldDisplayNavigation() {
        if (this.variation !== "compact" && !this.matchesCompactBreakpoint) {
            return shouldDisplayNavigation(this.visibleItems, this.total, this.take);
        }
        return false;
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        return (index.h(index.Host, { onKeyDown: e => this.onKeyboardDown(e), class: { "duet-theme-turva": this.theme === "turva" } }, index.h("nav", { role: "navigation", "aria-labelledby": this.accessibleLabelledBy ? `${this.accessibleLabelledBy} ${this.listId}` : this.listId, "aria-describedby": this.accessibleDescribedBy ? `${this.accessibleDescribedBy} ${this.listId}` : this.listId, "aria-descriptions": this.accessibleDescription, "aria-details": this.accessibleDetails, ref: el => (this.nativeNav = el), "aria-controls": this.ariaControls, class: {
                "duet-pagination-nav": true,
                [`duet-pagination-variation-${this.variation}`]: true,
            } }, this.numbersStore !== "" && (index.h("div", { "aria-live": "assertive", "aria-relevant": "text", class: "duet-pagination-overlay", "aria-label": `${this.accessibleLabels.jump_to} ${this.numbersStore}`, part: "navigation-overlay" }, index.h("duet-badge", { theme: this.theme }, "jump to page : ", this.numbersStore))), index.h("ol", { id: this.listId, class: {
                "duet-pagination": true,
                "duet-pagination-is-dimmed": this.numbersStore !== "",
            }, role: "menubar", "aria-label": this.accessibleLabels.pagination_label, "aria-description": this.accessibleLabels.description }, (this.variation === "compact" || this.matchesCompactBreakpoint) && (index.h("li", { class: {
                "duet-pagination-page-button": true,
                "duet-pagination-button-first": true,
            }, role: "menuitem", part: "navigation-arrow" }, index.h("duet-action-button", { disabled: this.internalSectionIndex === 0 && this.current <= 1, "data-direction": "back", accessibleLabel: this.accessibleLabels.first_page, title: this.accessibleLabels.first_page, onClick: e => this.jumpToStart(e), "icon-name": "action-move-to-first", theme: this.theme, url: this.processedPageLinks ? this.processedPageLinks[0] : undefined }))), index.h("li", { class: {
                "duet-pagination-page-button": true,
                "duet-pagination-button-first": true,
            }, role: "menuitem", part: "navigation-arrow" }, index.h("duet-action-button", { disabled: !!((this.internalSectionIndex === 0 && this.current <= 1) ||
                (this.current <= 1 && this.processedPageLinks)), "data-direction": "back", onClick: e => this.onMouseHandler(e, -1), "accessible-label": this.accessibleLabels.previous_page, title: this.accessibleLabels.previous_page, "icon-name": "action-arrow-left-small", theme: this.theme, url: this.processedPageLinks ? this.processedPageLinks[this.current - 2] : undefined })), this.internalSectionIndex !== 0 && this.shouldDisplayNavigation() && (index.h(index.Fragment, null, index.h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-jump" }, index.h("duet-button", { class: "duet-pagination-link duet-pagination-link-jump-back", "center-text": "true", variation: "plain", color: this.theme !== "turva" ? "secondary" : "secondary-turva", margin: "none", accessibleLabel: this.accessibleLabels.first_page, onClick: e => this.jumpToStart(e), theme: this.theme, url: this.processedPageLinks ? this.processedPageLinks[0] : undefined }, index.h("div", { class: "duet-pagination-page-number" }, "1"))), index.h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-section" }, index.h("duet-button", { class: "duet-pagination-link duet-pagination-link-dots-back", "center-text": "true", color: this.theme !== "turva" ? "secondary" : "secondary-turva", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.prev_section.replace("{0}", `${this.visibleItems}`), onClick: e => this.sectionClickHandler(e, -1), theme: this.theme }, index.h("div", { class: "duet-pagination-page-number", "aria-hidden": "true" }, "\u2026"))))), (this.shouldDisplayNavigation() && this.renderPageNumbers()) || this.renderSelect(), (this.internalSectionIndex + 1) * this.visibleItems < this.totalPages &&
            this.shouldDisplayNavigation() && (index.h(index.Fragment, null, (this.internalSectionIndex + 1) * this.visibleItems !== this.totalPages - 1 && (index.h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-section" }, index.h("duet-button", { class: "duet-pagination-link duet-pagination-link-dots-forward", "center-text": "true", color: this.theme !== "turva" ? "secondary" : "secondary-turva", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.next_section.replace("{0}", `${this.visibleItems}`), onClick: e => this.sectionClickHandler(e, 1), theme: this.theme }, index.h("div", { class: "duet-pagination-page-number", "aria-hidden": "true" }, "\u2026")))), index.h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-jump" }, index.h("duet-button", { class: "duet-pagination-link duet-pagination-link-jump-forward", "center-text": "true", color: this.theme !== "turva" ? "secondary" : "secondary-turva", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.last_page, onClick: e => this.jumpToEnd(e), theme: this.theme, url: this.processedPageLinks
                ? this.processedPageLinks[this.processedPageLinks.length - 1]
                : undefined }, index.h("div", { class: "duet-pagination-page-number" }, this.totalPages))))), index.h("li", { class: {
                "duet-pagination-page-button": true,
                "duet-pagination-button-last": true,
            }, role: "menuitem", part: "navigation-arrow" }, index.h("duet-action-button", { disabled: !!((this.current === this.totalPages &&
                this.internalSectionIndex === Math.ceil(this.totalPages / this.visibleItems) - 1) ||
                (this.current === this.totalPages && this.processedPageLinks)), class: "duet-date-dialog-next", "accessible-label": this.accessibleLabels.next_page, title: this.accessibleLabels.next_page, onClick: e => this.onMouseHandler(e, 1), "icon-name": "action-move-to-next", theme: this.theme, url: this.processedPageLinks ? this.processedPageLinks[this.current] : undefined })), (this.variation === "compact" || this.matchesCompactBreakpoint) && (index.h("li", { class: {
                "duet-pagination-page-button": true,
                "duet-pagination-button-last": true,
            }, role: "menuitem", part: "navigation-arrow" }, index.h("duet-action-button", { disabled: this.current === this.totalPages &&
                this.internalSectionIndex === Math.ceil(this.totalPages / this.visibleItems) - 1, accessibleLabel: this.accessibleLabels.last_page, title: this.accessibleLabels.last_page, onClick: e => this.jumpToEnd(e), "icon-name": "action-move-to-last", theme: this.theme, url: this.processedPageLinks ? this.processedPageLinks[this.totalPages - 1] : undefined })))))));
    }
    get element() { return index.getElement(this); }
    static get watchers() { return {
        "total": ["watchPropTotalHandler"],
        "current": ["watchStateHandler"],
        "pageLinks": ["refresh"]
    }; }
};
DuetPagination.style = duetPaginationCss;

const duetRangeStepperCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}.duet-range-stepper{display:flex;flex-wrap:wrap;gap:0;align-items:baseline;justify-content:center;min-width:30px;min-height:30px;font-weight:600;text-decoration:none;border-left-width:0}.duet-range-stepper{white-space:nowrap}.duet-range-stepper .duet-range-step-counter{font-weight:600;color:rgb(0, 41, 77)}.duet-range-stepper ::part(button){border:0}";

const DuetRangeStepper = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.duetRangeStepUpdate = index.createEvent(this, "duetRangeStepUpdate", 7);
        this.leftBn = createId.createID("duetRangeStepper-left");
        this.rightBn = createId.createID("duetRangeStepper-right");
        this.handleClick = (e, direction) => {
            e.preventDefault();
            this.stepIndex += direction;
            this.clampStepIndex();
            this.handleStepClick(e);
        };
        this.theme = "";
        this.stepIndex = 1;
        this.stepSize = 50;
        this.total = 1000;
        this.ariaLabelsDefaults = {
            en: {
                next_increment: "Next range increment",
                previous_increment: "Previous range increment",
                x_of_y: "{0}–{1} of {2}",
            },
            fi: {
                next_increment: "Seuraava välillä",
                previous_increment: "Edellinen välillä",
                x_of_y: "{0}–{1} / {2}",
            },
            sv: {
                next_increment: "Nästa intervall",
                previous_increment: "Föregående intervall",
                x_of_y: "{0}–{1} av {2}",
            },
        };
        this.ariaLabels = languageUtils.getLocaleString(this.ariaLabelsDefaults);
        this.ariaControls = "";
    }
    watchStepIndexStateHandler(newValue) {
        if (this.leftBnRef && this.rightBnRef) {
            if (newValue <= 1) {
                if (this.element === document.activeElement) {
                    this.rightBnRef.setFocus();
                }
                this.leftBnRef.setAttribute("disabled", "");
            }
            else {
                this.leftBnRef.removeAttribute("disabled");
            }
            if (newValue >= this.total / this.stepSize) {
                if (this.element === document.activeElement) {
                    this.leftBnRef.setFocus();
                }
                this.rightBnRef.setAttribute("disabled", "");
            }
            else {
                this.rightBnRef.removeAttribute("disabled");
            }
        }
    }
    watchStepSizeStateHandler(newValue, oldValue) {
        if (newValue !== oldValue) {
            if (this.stepIndex * newValue > this.total) {
                this.stepIndex = Math.ceil(this.total / newValue);
            }
            // trigger handler in case a button needs to be disabled or enabled but stepIndex did not change
            this.watchStepIndexStateHandler(this.stepIndex);
        }
    }
    handleStepClick(e) {
        this.duetRangeStepUpdate.emit({
            originalEvent: e,
            component: "duet-range-stepper",
            from: this.getFrom(),
            to: this.getTo(),
            index: this.stepIndex,
        });
    }
    componentWillLoad() {
        themeableComponent.inheritGlobalTheme(this);
        this.clampStepIndex();
    }
    componentDidLoad() {
        this.watchStepIndexStateHandler(this.stepIndex);
    }
    connectedCallback() {
        languageUtils.connectLanguageChangeObserver(this, { prop: "ariaLabels", defaults: "ariaLabelsDefaults" });
    }
    disconnectedCallback() {
        languageUtils.disconnectLanguageChangeObserver(this);
    }
    clampStepIndex() {
        if (this.stepIndex < 1) {
            this.stepIndex = 1;
        }
        else if (this.stepIndex * this.stepSize > this.total) {
            this.stepIndex = Math.ceil(this.total / this.stepSize);
        }
    }
    getFrom() {
        return Math.floor((this.stepIndex - 1) * this.stepSize) + 1;
    }
    getTo() {
        return Math.min(Math.floor(this.stepIndex * this.stepSize), this.total);
    }
    generateStepSize() {
        return this.ariaLabels.x_of_y
            .replace("{0}", String(this.getFrom()))
            .replace("{1}", String(this.getTo()))
            .replace("{2}", String(this.total));
    }
    generatePreviousIncrementLabel() {
        if (this.getFrom() === 1) {
            return "";
        }
        return this.ariaLabels.x_of_y
            .replace("{0}", String(Math.max(this.getFrom() - this.stepSize, 1)))
            .replace("{1}", String(Math.min(this.getFrom() - 1, this.total)))
            .replace("{2}", String(this.total));
    }
    generateNextIncrementLabel() {
        if (this.getTo() === this.total) {
            return "";
        }
        return this.ariaLabels.x_of_y
            .replace("{0}", String(this.getTo() + 1))
            .replace("{1}", String(Math.min(this.getTo() + this.stepSize, this.total)))
            .replace("{2}", String(this.total));
    }
    //handle a11y keyboard navigation events
    async onKeyboardDown(e) {
        // handle a11y based keyboard navigation for left/right/up/down
        let next = this.stepIndex;
        let dir = 1;
        if (keyboardUtils.isArrowLeftKey(e) || keyboardUtils.isArrowUpKey(e) || keyboardUtils.isMinusKey(e)) {
            next--;
            dir = -1;
            this.leftBnRef.setFocus();
        }
        if (keyboardUtils.isArrowRightKey(e) || keyboardUtils.isArrowDownKey(e) || keyboardUtils.isPlusKey(e)) {
            next++;
            dir = 1;
        }
        if (keyboardUtils.isArrowKey(e)) {
            if (next > 0 && next * this.stepSize <= this.total) {
                this.handleClick(e, dir);
            }
        }
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        return (index.h("div", { class: {
                "duet-range-stepper": true,
                "duet-theme-turva": this.theme === "turva",
            }, onKeyDown: e => this.onKeyboardDown(e), "aria-controls": this.ariaControls }, index.h("span", { class: "duet-range-step-counter", part: "range-numbers" }, this.generateStepSize()), index.h("duet-action-button", { class: "duet-range-step-button duet-range-step-minus", onClick: e => this.handleClick(e, -1), id: this.leftBn, "accessible-label": `${this.ariaLabels.previous_increment} ${this.generatePreviousIncrementLabel()}`, ref: el => (this.leftBnRef = el), part: "navigation-arrow", iconName: "action-arrow-left-small" }), index.h("duet-action-button", { class: "duet-range-step-button duet-range-step-plus", onClick: e => this.handleClick(e, 1), "accessible-label": `${this.ariaLabels.next_increment} ${this.generateNextIncrementLabel()}`, id: this.rightBn, ref: el => (this.rightBnRef = el), part: "navigation-arrow", iconName: "action-arrow-right-small" })));
    }
    get element() { return index.getElement(this); }
    static get watchers() { return {
        "stepIndex": ["watchStepIndexStateHandler"],
        "stepSize": ["watchStepSizeStateHandler"]
    }; }
};
DuetRangeStepper.style = duetRangeStepperCss;

exports.duet_pagination = DuetPagination;
exports.duet_range_stepper = DuetRangeStepper;
