/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-00f527af.js');
const floatingUi_dom_esm = require('./floating-ui.dom.esm-a7d59d53.js');
const themeableComponent = require('./themeable-component-83a2a0d4.js');
const keyboardUtils = require('./keyboard-utils-7248dd0a.js');
const teleport = require('./teleport-6a1f83a1.js');

const duetPopupMenuCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-popup-menu-list{position:absolute;top:0;left:0;z-index:950;width:max-content;min-width:175px;padding:8px;margin:0;color:rgb(0, 41, 77);list-style:none;visibility:hidden !important;background:rgb(255, 255, 255);border-radius:8px;box-shadow:0 0 0 1px rgba(0, 0, 0, 0.07), 0 4px 10px 0 rgba(0, 41, 77, 0.15);opacity:0;transition:transform 300ms ease, visibility 300ms ease, opacity 300ms ease;transform:scaleY(0);transform-origin:top center}.duet-popup-menu-list.open{visibility:visible !important;opacity:1;transform:scaleY(1)}.duet-popup-menu-list.fixed{position:fixed}.duet-popup-menu-list.duet-theme-turva{color:rgb(23, 28, 58) !important;background:rgb(255, 255, 255)}";

const DuetPopupMenu = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.duetToggle = index.createEvent(this, "duetToggle", 7);
        this.updatePlacement = async () => {
            if (!this.controller) {
                return;
            }
            const coordinates = await floatingUi_dom_esm.computePosition(this.controller, this.element, {
                middleware: [floatingUi_dom_esm.offset({ mainAxis: this.mainAxisOffset, crossAxis: this.crossAxisOffset }), floatingUi_dom_esm.flip()],
                placement: this.placement,
                strategy: this.position,
            });
            this.menuY = coordinates.y;
            this.menuX = coordinates.x;
        };
        this.open = false;
        this.menuY = undefined;
        this.menuX = undefined;
        this.accessibleLabel = undefined;
        this.theme = "";
        this.controller = undefined;
        this.placement = "bottom-start";
        this.position = "absolute";
        this.mainAxisOffset = 0;
        this.crossAxisOffset = 0;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        themeableComponent.inheritGlobalTheme(this);
        this.teleport = new teleport.Teleport(this.element);
    }
    componentDidLoad() {
        {
            this.updatePlacement();
        }
    }
    /**
     * Component event handling.
     */
    handleKeyUp(evt) {
        if (this.open) {
            // When Esc is pressed the menu should be closed
            if (keyboardUtils.isEscapeKey(evt)) {
                this.focusController();
                this.hide();
            }
        }
    }
    async handleKeyDown(evt) {
        if (this.open) {
            if (keyboardUtils.isArrowDownKey(evt)) {
                evt.preventDefault();
                const current = await this.getFocusedItemIndex();
                if (current !== -1) {
                    if (current < this.itemElements.length - 1) {
                        this.itemElements[current + 1].setFocus();
                    }
                    else {
                        this.itemElements[0].setFocus();
                    }
                }
            }
            if (keyboardUtils.isArrowUpKey(evt)) {
                evt.preventDefault();
                const current = await this.getFocusedItemIndex();
                if (current !== -1) {
                    if (current === 0) {
                        this.itemElements[this.itemElements.length - 1].setFocus();
                    }
                    else {
                        this.itemElements[current - 1].setFocus();
                    }
                }
            }
            if (keyboardUtils.isTabKey(evt)) {
                evt.preventDefault();
                this.hide();
            }
        }
    }
    handleClick(evt) {
        const isClickOutside = evt.composedPath().every(node => node !== this.element && node !== this.controller);
        if (this.open && isClickOutside) {
            this.hide();
        }
    }
    /**
     * isOpen.
     */
    async isOpen() {
        return this.open;
    }
    /**
     * Show.
     */
    async show() {
        this.open = true;
        this.teleport.go();
        this.itemElements[0].setFocus();
        this.duetToggle.emit({ open: this.open, component: "duet-popup-menu" });
        this.updatePlacement();
    }
    /**
     * Hide.
     */
    async hide() {
        this.open = false;
        this.duetToggle.emit({ open: this.open, component: "duet-popup-menu" });
        this.focusController();
        this.teleport.resume(200);
    }
    /**
     * Toggle.
     */
    async toggle() {
        if (this.open) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    focusController() {
        if (this.controller) {
            if ("setFocus" in this.controller) {
                this.controller.setFocus();
            }
            else {
                this.controller.focus();
            }
        }
    }
    get itemElements() {
        return Array.from(this.element.querySelectorAll(":scope > duet-popup-menu-item"));
    }
    async getFocusedItemIndex() {
        const items = this.itemElements;
        for (let i = 0; i < items.length; i++) {
            if (await items[i].isFocused()) {
                return i;
            }
        }
        return -1;
    }
    render() {
        const positionStyles = {
            top: `${this.menuY}px`,
            left: `${this.menuX}px`,
        };
        return (index.h(index.Host, { class: this.position }, index.h("div", { style: positionStyles, class: { open: this.open, "duet-popup-menu-list": true, "duet-theme-turva": this.theme === "turva" }, role: "menu", "aria-label": this.accessibleLabel }, index.h("slot", null))));
    }
    get element() { return index.getElement(this); }
};
DuetPopupMenu.style = duetPopupMenuCss;

exports.duet_popup_menu = DuetPopupMenu;
