/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-00f527af.js');
const tokens = require('./tokens-51cfbe11.js');
const floatingUi_dom_esm = require('./floating-ui.dom.esm-a7d59d53.js');
const themeableComponent = require('./themeable-component-83a2a0d4.js');
const createId = require('./create-id-1f8c438f.js');
const keyboardUtils = require('./keyboard-utils-7248dd0a.js');
const languageUtils = require('./language-utils-e8a527e5.js');
require('./string-utils-053749ff.js');

const duetTooltipCss = "*.sc-duet-tooltip,*.sc-duet-tooltip::after,*.sc-duet-tooltip::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-tooltip-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;z-index:200;display:inline-flex;width:auto;margin-top:-16px !important;margin-left:-3px !important;-webkit-tap-highlight-color:transparent}duet-tooltip-button.sc-duet-tooltip{position:relative}duet-tooltip-popup.sc-duet-tooltip{position:absolute}";

const DuetTooltip = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Own Properties.
         */
        this.mql = [
            window.matchMedia(tokens.media_query_medium.replace(/'/g, "")),
            window.matchMedia(tokens.media_query_large.replace(/'/g, "")),
        ];
        this.tooltipId = createId.createID("DuetTooltip");
        this.aboutString = {
            fi: "aiheesta",
            en: "about",
            sv: "om",
        };
        /**
         * Local methods
         */
        this.openTooltip = () => {
            this.active = true;
            this.focusTarget = "tooltip";
        };
        this.closeTooltip = (moveFocusToButton = false) => {
            this.active = false;
            if (moveFocusToButton) {
                this.focusTarget = "trigger";
            }
            setTimeout(() => {
                this.updatePlacement();
            }, 200);
        };
        this.toggleOpen = () => {
            this.active ? this.closeTooltip() : this.openTooltip();
        };
        this.updatePlacement = async () => {
            var _a, _b;
            let preferRight = true;
            if (this.breakpoint === "large" && !this.mql[1].matches) {
                preferRight = false;
            }
            else if (this.breakpoint === "medium" && !this.mql[0].matches) {
                preferRight = false;
            }
            let placement = preferRight ? "top-start" : "top-end";
            if (this.direction === "left") {
                placement = "top-end";
            }
            else if (this.direction === "right") {
                placement = "top-start";
            }
            const position = await floatingUi_dom_esm.computePosition(this.buttonEl, this.popupElement, {
                placement,
                middleware: [floatingUi_dom_esm.flip(), floatingUi_dom_esm.shift({ padding: 5 }), floatingUi_dom_esm.arrow({ element: this.arrowEl })],
            });
            this.tooltipY = position.y;
            this.tooltipX = position.x;
            this.placement = position.placement;
            this.arrowY = (_a = position.middlewareData.arrow) === null || _a === void 0 ? void 0 : _a.y;
            this.arrowX = (_b = position.middlewareData.arrow) === null || _b === void 0 ? void 0 : _b.x;
        };
        this.placement = "bottom";
        this.tooltipY = undefined;
        this.tooltipX = undefined;
        this.arrowX = undefined;
        this.arrowY = undefined;
        this.theme = "";
        this.language = languageUtils.getLanguage();
        this.accessibleLabelDefault = {
            fi: "Näytä lisätietoja",
            en: "Show more information",
            sv: "Visa mer tilläggsuppgifter",
        };
        this.accessibleLabel = languageUtils.getLocaleString(this.accessibleLabelDefault, this.language);
        this.accessibleAboutLabel = undefined;
        this.accessibleInputLabel = undefined;
        this.accessibleCloseLabelDefault = {
            fi: "Sulje lisätiedot",
            en: "Close details",
            sv: "Stäng tilläggsuppgifter",
        };
        this.accessibleCloseLabel = languageUtils.getLocaleString(this.accessibleCloseLabelDefault, this.language);
        this.label = "";
        this.breakpoint = "medium";
        this.direction = "auto";
        this.positionVertical = "0";
        this.positionHorizontal = "0";
        this.active = false;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        themeableComponent.inheritGlobalTheme(this);
    }
    async componentDidLoad() {
        this.arrowEl = await this.popupElement.getArrowElement();
        this.contentEl = await this.popupElement.getContentElement();
        this.updatePlacement();
        if (this.active) {
            this.openTooltip();
        }
        this.intersectionObserver = new IntersectionObserver(this.updatePlacement, { root: document.body });
        this.intersectionObserver.observe(this.element);
    }
    componentDidUpdate() {
        switch (this.focusTarget) {
            case "tooltip":
                // delay focus so button is correctly announced as "expanded"
                setTimeout(() => this.contentEl.focus({ preventScroll: true }));
                break;
            case "trigger":
                // delay focus so button is correctly announced as "collapsed"
                setTimeout(() => this.buttonEl.setFocus({ preventScroll: true }));
                break;
        }
        this.focusTarget = null;
    }
    connectedCallback() {
        languageUtils.connectLanguageChangeObserver(this, [
            { prop: "accessibleLabel", defaults: "accessibleLabelDefault" },
            { prop: "accessibleCloseLabel", defaults: "accessibleCloseLabelDefault" },
        ]);
    }
    disconnectedCallback() {
        languageUtils.disconnectLanguageChangeObserver(this);
    }
    /**
     * Component event handling.
     */
    onScroll() {
        clearTimeout(this.scrollTimer);
        this.scrollTimer = setTimeout(() => {
            if (this.active) {
                this.updatePlacement();
            }
        }, 100);
    }
    handleWindowResize() {
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(() => {
            this.updatePlacement();
        }, 100);
    }
    handleDocumentClick(e) {
        if (!this.active) {
            return;
        }
        const path = e.composedPath();
        const isClickOutside = path.every(el => el !== this.element && el !== this.contentEl);
        if (isClickOutside) {
            this.closeTooltip();
        }
    }
    handleKeyDown(e) {
        if (this.active && keyboardUtils.isEscapeKey(e)) {
            this.closeTooltip(true);
        }
    }
    handlePopupClose() {
        if (this.active) {
            this.closeTooltip(true);
        }
    }
    async handleActiveChange(newActiveValue) {
        if (newActiveValue) {
            setTimeout(() => this.updatePlacement(), 10);
        }
        else {
            setTimeout(() => this.updatePlacement(), 300);
        }
    }
    /**
     * render() function.
     * Always the last one in the class.
     */
    render() {
        const tooltipStyles = {
            transform: `translateY(${this.positionVertical}) translateX(${this.positionHorizontal})`,
            // This is needed to that the active tooltip stacks on
            // top of other tooltips and the header.
            zIndex: this.active ? "201" : "",
        };
        const popupContainerStyles = {
            position: "relative",
            overflow: this.active ? "visible" : "hidden",
        };
        const positionStyles = {
            top: `${this.tooltipY}px`,
            left: `${this.tooltipX}px`,
            display: "block",
            "pointer-events": this.active ? "auto" : "none",
        };
        const arrowStyles = {
            top: this.arrowY ? `${this.arrowY}px` : undefined,
            left: this.arrowX ? `${this.arrowX}px` : undefined,
        };
        return (index.h(index.Host, { style: tooltipStyles }, index.h("duet-tooltip-button", { ref: element => (this.buttonEl = element), active: this.active, tooltipId: this.tooltipId, label: this.label, accessibleLabel: (this.accessibleInputLabel && `${this.accessibleInputLabel}, ${this.accessibleLabel}`) ||
                (this.accessibleAboutLabel &&
                    `${this.accessibleLabel} ${this.aboutString[this.language]} ${this.accessibleAboutLabel}`) ||
                this.accessibleLabel, onClick: this.toggleOpen, theme: this.theme }), index.h("div", { style: popupContainerStyles }, index.h("duet-tooltip-popup", { ref: element => (this.popupElement = element), active: this.active, tooltipId: this.tooltipId, arrowStyles: arrowStyles, style: positionStyles, placement: this.placement, accessibleCloseLabel: this.accessibleCloseLabel, theme: this.theme }, index.h("slot", null)))));
    }
    get element() { return index.getElement(this); }
    static get watchers() { return {
        "active": ["handleActiveChange"]
    }; }
};
DuetTooltip.style = duetTooltipCss;

exports.duet_tooltip = DuetTooltip;
