/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-00f527af.js');
const themeableComponent = require('./themeable-component-83a2a0d4.js');
const languageUtils = require('./language-utils-e8a527e5.js');
const errorcodes_utils = require('./errorcodes.utils-a86b1f94.js');
require('./string-utils-053749ff.js');

const formatBytes = (bytes, decimals = 2) => {
    if (bytes === 0) {
        return "0 Bytes";
    }
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
};

const duetUploadItemCss = ".file-link::part(duet-link){text-decoration:none}";

const DuetUploadItem = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.fileUploadingInfo = {
            fi: "Tiedosto latautuu",
            sv: "Filen laddas upp",
            en: "File is uploading",
        };
        this.onLinkClick = (event) => {
            const { url, meta } = this.data;
            if (!!this.linkClickEvent) {
                event.preventDefault();
                this.linkClickEvent.emit({
                    component: "duet-upload",
                    data: { name: this.data.item.name, url, meta },
                });
            }
        };
        this.theme = "";
        this.data = undefined;
        this.type = undefined;
        this.showLinks = undefined;
        this.actions = undefined;
        this.label = undefined;
        this.categoryLabel = undefined;
        this.errorCodes = undefined;
        this.showCategory = undefined;
        this.linkClickEvent = undefined;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        themeableComponent.inheritGlobalTheme(this);
    }
    /**
     * focusActionButton.
     */
    async focusActionButton() {
        if (this.actionButton) {
            await this.actionButton.setFocus({ preventScroll: true });
            this.actionButton.scrollIntoView({ behavior: "smooth", block: "center", inline: "nearest" });
        }
    }
    getFileNameLine() {
        const { item, size, uploaded, url, progress, error } = this.data;
        const { name } = item;
        const ContentName = (index.h("span", { class: "duet-upload-item-name" }, index.h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), index.h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name));
        const SizeText = (index.h("span", { class: "duet-upload-item-size", style: { fontSize: "14px", fontWeight: "400" } }, "(", formatBytes(size), ")"));
        switch (this.type) {
            case "inprogress":
                return (index.h("span", { class: "duet-upload-item-name", role: "status" }, index.h("duet-paragraph", { class: "duet-upload-item-name", color: "gray-darker", margin: "none", weight: "semi-bold" }, index.h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), index.h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name), index.h("duet-visually-hidden", null, index.h("duet-paragraph", null, languageUtils.getLocaleString(this.fileUploadingInfo))), index.h("duet-progress", { progress: Math.ceil(progress), "aria-hidden": true })));
            case "pending":
                return (index.h("span", { class: "duet-upload-item-name" }, index.h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), index.h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name));
            case "failure":
                return (index.h("span", { class: "duet-upload-item-error", role: "status" }, index.h("duet-paragraph", { class: "duet-upload-item-name", color: "danger", margin: "none", weight: "semi-bold" }, index.h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), index.h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name), index.h("duet-paragraph", { class: "duet-upload-item-error-label", size: "small", margin: "none", color: "danger" }, errorcodes_utils.getI18nError(error.type, this.errorCodes))));
            default:
                return uploaded && url && this.showLinks ? (index.h("duet-paragraph", { color: "secondary", margin: "none", weight: "semi-bold" }, index.h("duet-link", { class: "file-link", onClick: this.onLinkClick, url: url }, ContentName), index.h("duet-spacer", { size: "xx-small", direction: "horizontal" }), SizeText)) : (index.h("duet-paragraph", { color: "secondary", margin: "none", weight: "semi-bold" }, ContentName, index.h("duet-spacer", { size: "xx-small", direction: "horizontal" }), SizeText));
        }
    }
    render() {
        const { uid, meta, item } = this.data;
        const Badges = meta && meta.badges ? (index.h("span", null, meta.badges.map(badgeText => (index.h("duet-badge", { color: "primary" }, badgeText))))) : undefined;
        const actionDescription = `${meta && meta.badges ? meta.badges.join(",") : ""} ${item.name}`;
        return (index.h("div", { class: {
                "upload-item-row": true,
            } }, this.showCategory && (index.h("div", { class: "item-categories" }, index.h("duet-heading", { class: "heading", color: "color-secondary", level: "h6", weight: "semibold" }, languageUtils.getLocaleString(this.categoryLabel)), Badges)), index.h("div", { class: { "item-name": true, "no-category": !this.showCategory } }, !!this.label && (index.h("duet-heading", { class: "heading", color: "color-secondary", level: "h6", weight: "semibold" }, languageUtils.getLocaleString(this.label))), this.getFileNameLine()), index.h("div", { class: "item-actions" }, this.actions.map(actionItem => {
            return (index.h("duet-action-button", { actionMeta: Object.assign({}, meta || {}), actionId: uid || null, actionName: actionItem.name, theme: this.theme, iconName: actionItem.icon, iconColor: actionItem.color, iconSize: actionItem.size, background: actionItem.background, "accessible-label": `${actionDescription} ${languageUtils.getLocaleString(actionItem.label)} `, accessibleTitle: false, ref: button => (this.actionButton = button) }));
        }))));
    }
    get element() { return index.getElement(this); }
};
DuetUploadItem.style = duetUploadItemCss;

exports.duet_upload_item = DuetUploadItem;
