/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-checkbox", () => {
    it("should render a checkbox", async () => {
        const page = await createPage(`<duet-checkbox></duet-checkbox>`);
        const component = await page.find("duet-checkbox");
        expect(component).not.toBeNull();
    });
    it("should provide a property that renders label", async () => {
        const page = await createPage(`<duet-checkbox label="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox label");
        expect(element.innerText).toEqual("test");
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-checkbox margin="none"></duet-checkbox>`);
        const element = await page.find(".duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should provide a property that renders aria-controls", async () => {
        const page = await createPage(`<duet-checkbox accessible-controls="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("aria-controls")).toEqual("test");
    });
    it("should provide a property that renders aria-activedescendant", async () => {
        const page = await createPage(`<duet-checkbox accessible-active-descendant="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("aria-activedescendant")).not.toBeNull();
    });
    it("should provide a property that renders aria-owns", async () => {
        const page = await createPage(`<duet-checkbox accessible-owns="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("aria-owns")).not.toBeNull();
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-checkbox theme="turva"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox-container");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that makes the  disabled", async () => {
        const page = await createPage(`<duet-checkbox disabled></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("disabled")).not.toBeNull();
    });
    it("should provide a property that adds an ID for the checkbox", async () => {
        const page = await createPage(`<duet-checkbox identifier="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("id")).toEqual("test");
    });
    it("should provide a property that makes checkbox required", async () => {
        const page = await createPage(`<duet-checkbox required></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("required")).not.toBeNull();
    });
    it("should provide a property that adds name for the checkbox", async () => {
        const page = await createPage(`<duet-checkbox name="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("name")).not.toBeNull();
    });
    it("should provide a property that adds role for the checkbox", async () => {
        const page = await createPage(`<duet-checkbox role="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("role")).not.toBeNull();
    });
    it("should provide a property that checks the checkbox", async () => {
        const page = await createPage(`<duet-checkbox checked></duet-checkbox>`);
        const element = (await page.find("duet-checkbox .duet-checkbox"));
        expect(element.checked).not.toBeNull();
    });
    it("should provide a property that adds value for the checkbox", async () => {
        const page = await createPage(`<duet-checkbox value="test"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("value")).not.toBeNull();
    });
    it("should provide a property that changes tabindex of checkbox", async () => {
        const page = await createPage(`<duet-checkbox accessible-index="-1"></duet-checkbox>`);
        const element = await page.find("duet-checkbox .duet-checkbox");
        expect(element.getAttribute("tabindex")).not.toBeNull();
    });
    it("should only raise an event on user interaction, not when changing checked property programmatically", async () => {
        const page = await createPage(`<duet-checkbox label="Checked" value="test"></duet-checkbox>`);
        const checkbox = await page.find("duet-checkbox");
        const changeEventSpy = await checkbox.spyOnEvent("duetChange");
        checkbox.setProperty("checked", true);
        await page.waitForChanges();
        expect(changeEventSpy).not.toHaveReceivedEvent();
        await checkbox.click();
        expect(changeEventSpy).toHaveReceivedEvent();
    });
    it("should raise an event on focus", async () => {
        const page = await createPage(`<duet-checkbox label="Checked" value="test"></duet-checkbox>`);
        const checkbox = await page.find("duet-checkbox");
        const focusEventSpy = await checkbox.spyOnEvent("duetFocus");
        await page.keyboard.press("Tab");
        await page.waitForChanges();
        expect(focusEventSpy).toHaveReceivedEvent();
    });
    it("should raise an event on blur", async () => {
        const page = await createPage(`
      <duet-checkbox label="Checked" value="test"></duet-checkbox>
      <button>another focusable element</button>
    `);
        const checkbox = await page.find("duet-checkbox");
        const blurEventSpy = await checkbox.spyOnEvent("duetFocus");
        // focus then blur the checkbox
        await page.keyboard.press("Tab");
        await page.keyboard.press("Tab");
        await page.waitForChanges();
        expect(blurEventSpy).toHaveReceivedEvent();
    });
});
