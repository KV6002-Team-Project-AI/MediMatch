/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { createID } from "../../utils/create-id";
import { subscribeTabbingChange, unsubscribeTabbingChange } from "../../utils/keyboard-utils";
export class DuetChip {
    constructor() {
        /**
         * Own Properties.
         */
        this.chipId = createID("DuetChip");
        this.popupSetUp = () => {
            const popup = document.querySelector(`duet-popup-menu#${this.popup}`);
            if (popup) {
                this.popupElement = popup;
                popup.controller = this.element;
                const originalText = this.element.textContent;
                const originalValue = this.value;
                if (!popup.id) {
                    popup.id = "popup-menu";
                }
                popup.addEventListener("duetToggle", (evt) => {
                    this.popupOpen = evt.detail.open;
                });
                const clearActive = () => {
                    popup.querySelectorAll("duet-popup-menu-item").forEach(item => {
                        item.active = false;
                    });
                };
                popup.querySelectorAll("duet-popup-menu-item").forEach(item => {
                    item.addEventListener("click", evt => {
                        var _a;
                        const value = (_a = item.value) !== null && _a !== void 0 ? _a : item.innerText;
                        if (!item.active) {
                            clearActive();
                            item.active = true;
                            this.element.textContent = item.innerText;
                            this.value = value;
                            this.checked = true;
                        }
                        else {
                            clearActive();
                            this.element.textContent = originalText;
                            this.value = originalValue;
                            this.checked = false;
                        }
                        this.emitChange(evt);
                        // A workaround to the difference of event handling between the browers.
                        // Chrome will emit a separate click event on the chip after the popup is closed, resulting popup.toggle() to
                        // open the popup again. Firefox does not have this behavior.
                        setTimeout(() => {
                            if (this.popupElement.isOpen()) {
                                this.popupElement.hide();
                            }
                        });
                    });
                });
            }
        };
        /**
         * Component event handling.
         */
        this.onFocus = (ev) => {
            this.focus = true;
            this.duetFocus.emit({
                originalEvent: ev,
                checked: this.checked,
                value: this.value,
                component: "duet-chip",
            });
        };
        this.onBlur = (ev) => {
            this.focus = false;
            this.duetBlur.emit({
                originalEvent: ev,
                checked: this.checked,
                value: this.value,
                component: "duet-chip",
            });
        };
        this.emitChange = originalEvent => {
            this.duetChange.emit({
                originalEvent,
                checked: this.checked,
                value: this.value,
                component: "duet-chip",
            });
        };
        /**
         * Change checked state and emit duetChange event.
         */
        this.onFilterChange = (evt) => {
            this.checked = !this.checked;
            this.emitChange(evt);
        };
        /**
         * Change checked state and emit duetChange event.
         */
        this.onRadioChange = (evt) => {
            const input = this.focusableElement;
            const inputChecked = input.checked;
            this.checked = inputChecked;
            this.emitChange(evt);
        };
        /**
         * Stop propagation and prevent default if popup is present, as the popup controls value and checked state.
         */
        this.onFilterClick = (evt) => {
            if (this.disabled) {
                evt.stopPropagation();
                evt.preventDefault();
                return;
            }
            if (this.popupElement) {
                evt.stopPropagation();
                evt.preventDefault();
                this.popupElement.toggle();
            }
        };
        /**
         * Remove input chip
         */
        this.onRemoveClick = (evt) => {
            evt.stopPropagation();
            evt.preventDefault();
            this.element.remove();
        };
        this.focus = false;
        this.popupElement = undefined;
        this.popupOpen = undefined;
        this.accessibleLabel = undefined;
        this.variation = "button";
        this.popup = undefined;
        this.icon = "";
        this.theme = "";
        this.identifier = undefined;
        this.value = undefined;
        this.name = undefined;
        this.checked = false;
        this.disabled = false;
    }
    clearOtherRadioButtons() {
        if (this.variation === "radio" && this.checked) {
            const chips = document.querySelectorAll(`duet-chip[variation="radio"][name="${this.name}"]`);
            chips.forEach(chip => {
                if (chip !== this.element) {
                    chip.checked = false;
                }
            });
        }
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        this.popupSetUp();
    }
    connectedCallback() {
        subscribeTabbingChange(this);
    }
    disconnectedCallback() {
        unsubscribeTabbingChange(this);
    }
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    async setFocus(options) {
        setTimeout(() => this.focusableElement.focus(options), 200);
    }
    render() {
        var _a;
        const identifier = this.identifier || this.chipId;
        const classes = {
            "duet-chip-container": true,
            [`duet-chip-${this.variation}`]: true,
            "duet-chip-focus": this.focus,
            "duet-chip-has-icon": !!this.icon,
            "duet-chip-has-popup": this.variation === "filter" && !!this.popupElement,
            "duet-theme-turva": this.theme === "turva",
            "duet-chip-filter-checked": this.variation === "filter" && this.checked,
            "duet-chip-radio-checked": this.variation === "radio" && this.checked,
            "duet-chip-filter-popup-open": this.popupOpen,
            "duet-chip-disabled": this.disabled,
        };
        const focusHandlers = {
            onFocus: this.onFocus,
            onBlur: this.onBlur,
            ref: el => (this.focusableElement = el),
        };
        return (h(Host, null, this.variation === "button" && (h("div", { class: classes }, h("button", Object.assign({ id: identifier, "aria-label": this.accessibleLabel, "aria-disabled": this.disabled ? "true" : undefined, name: this.name, value: this.value, onClick: this.disabled ? evt => evt.stopPropagation() : undefined }, focusHandlers), h("div", { class: "duet-chip-icon-container" }, this.icon && (h("duet-icon", { name: this.icon, size: "x-small", margin: "none", color: "currentColor" }))), h("slot", null)))), this.variation === "input" && (h("div", { class: classes }, h("button", Object.assign({ id: identifier, class: "duet-chip-input-button", "aria-label": this.accessibleLabel }, focusHandlers), h("div", { class: "duet-chip-icon-container" }, this.icon && (h("duet-icon", { name: this.icon, size: "x-small", margin: "none", color: "currentColor" }))), h("slot", null)), h("button", { class: "duet-chip-remove-button", onClick: this.onRemoveClick }, h("duet-icon", { name: "activity-close", size: "xx-small", margin: "none", color: "currentColor" })))), this.variation === "filter" && (h("div", { class: classes }, h("input", Object.assign({ "aria-haspopup": this.popupElement && "menu", "aria-controls": (_a = this.popupElement) === null || _a === void 0 ? void 0 : _a.id, "aria-expanded": this.popupElement ? (this.popupOpen ? "true" : "false") : undefined, "aria-disabled": this.disabled ? "true" : undefined, id: identifier, type: "checkbox", name: this.name, value: this.value, checked: this.checked, onClick: this.onFilterClick, onChange: this.onFilterChange }, focusHandlers)), h("label", { htmlFor: identifier }, h("div", { class: "duet-chip-icon-container" }, this.icon && (h("duet-icon", { name: this.icon, size: "x-small", margin: "none", color: "currentColor" })), h("duet-icon", { name: "messaging-checked-small", size: "xx-small", margin: "none", color: "currentColor", class: "check-mark" })), h("slot", null), this.popupElement && (h("div", { class: "duet-chip-popup-disclosure" }, h("duet-icon", { name: "action-arrow-down-small", size: "xxx-small", margin: "none", color: "currentColor" })))))), this.variation === "radio" && (h("div", { class: classes }, h("input", Object.assign({ "aria-disabled": this.disabled ? "true" : undefined, id: identifier, type: "radio", name: this.name, value: this.value, checked: this.checked, onChange: this.onRadioChange, onClick: this.disabled ? evt => evt.preventDefault() : undefined }, focusHandlers)), h("label", { htmlFor: identifier }, h("div", { class: "duet-chip-icon-container" }, this.icon && (h("duet-icon", { name: this.icon, size: "x-small", margin: "none", color: "currentColor" })), h("duet-icon", { name: "messaging-checked-small", size: "xx-small", margin: "none", color: "currentColor", class: "check-mark" })), h("slot", null))))));
    }
    static get is() { return "duet-chip"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["duet-chip.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["duet-chip.css"]
        };
    }
    static get properties() {
        return {
            "accessibleLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Adds accessible label for the chip that is only shown for screen readers.\nTypically, this label text replaces the visible text on the button for\nusers who use assistive technology."
                },
                "attribute": "accessible-label",
                "reflect": false
            },
            "variation": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetChipVariation",
                    "resolved": "\"button\" | \"filter\" | \"input\" | \"radio\"",
                    "references": {
                        "DuetChipVariation": {
                            "location": "local",
                            "path": "/Users/mgibas/workspace/duet/packages/components/src/components/duet-chip/duet-chip.tsx",
                            "id": "src/components/duet-chip/duet-chip.tsx::DuetChipVariation"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Variation of the chip.\nButton should be used to present a list of actions or suggestions. It behaves like a button and must be used\ntogether with a click handler. Filter acts like a checkbox, it can be toggled on or off, and it should be\nused with a value. Input represents items input by the user, and the chip can be removed with a click.\nRadio behaves like a radio button, it can be toggled on or off, and it should be used with a value and name.\nWARNING: Input variation is still work-in-progress and subject to change."
                },
                "attribute": "variation",
                "reflect": false,
                "defaultValue": "\"button\""
            },
            "popup": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Id of the DuetPopupMenu that is controlled by the chip."
                },
                "attribute": "popup",
                "reflect": false
            },
            "icon": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetIconName",
                    "resolved": "string",
                    "references": {
                        "DuetIconName": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetIconName"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Icon to display to the left of the chip content."
                },
                "attribute": "icon",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "theme": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetTheme",
                    "resolved": "\"\" | \"default\" | \"turva\"",
                    "references": {
                        "DuetTheme": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTheme"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Theme of the button."
                },
                "attribute": "theme",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "identifier": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Adds a unique identifier for the chip."
                },
                "attribute": "identifier",
                "reflect": false
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The value of the html input when used as filter, or the button's value."
                },
                "attribute": "value",
                "reflect": false
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Name attribute of the html input (filter) or button."
                },
                "attribute": "name",
                "reflect": false
            },
            "checked": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Checked state of the filter chip."
                },
                "attribute": "checked",
                "reflect": true,
                "defaultValue": "false"
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Makes the chip look inactive and announced as unavailable to assistive technologies. Prevents the default action.\nNot available for the input variation."
                },
                "attribute": "disabled",
                "reflect": false,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "focus": {},
            "popupElement": {},
            "popupOpen": {}
        };
    }
    static get events() {
        return [{
                "method": "duetChange",
                "name": "duetChange",
                "bubbles": false,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the checked property has changed (applicable only for the filter variation)."
                },
                "complexType": {
                    "original": "DuetChipEvent",
                    "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-chip\"; }",
                    "references": {
                        "DuetChipEvent": {
                            "location": "local",
                            "path": "/Users/mgibas/workspace/duet/packages/components/src/components/duet-chip/duet-chip.tsx",
                            "id": "src/components/duet-chip/duet-chip.tsx::DuetChipEvent"
                        }
                    }
                }
            }, {
                "method": "duetFocus",
                "name": "duetFocus",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the chip receives focus."
                },
                "complexType": {
                    "original": "DuetChipEvent",
                    "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-chip\"; }",
                    "references": {
                        "DuetChipEvent": {
                            "location": "local",
                            "path": "/Users/mgibas/workspace/duet/packages/components/src/components/duet-chip/duet-chip.tsx",
                            "id": "src/components/duet-chip/duet-chip.tsx::DuetChipEvent"
                        }
                    }
                }
            }, {
                "method": "duetBlur",
                "name": "duetBlur",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Emitted when the chip loses focus."
                },
                "complexType": {
                    "original": "DuetChipEvent",
                    "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-chip\"; }",
                    "references": {
                        "DuetChipEvent": {
                            "location": "local",
                            "path": "/Users/mgibas/workspace/duet/packages/components/src/components/duet-chip/duet-chip.tsx",
                            "id": "src/components/duet-chip/duet-chip.tsx::DuetChipEvent"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "(options?: FocusOptions) => Promise<void>",
                    "parameters": [{
                            "name": "options",
                            "type": "FocusOptions",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "FocusOptions": {
                            "location": "global",
                            "id": "global::FocusOptions"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus. Use this method instead of the global focus().",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "checked",
                "methodName": "clearOtherRadioButtons"
            }];
    }
}
