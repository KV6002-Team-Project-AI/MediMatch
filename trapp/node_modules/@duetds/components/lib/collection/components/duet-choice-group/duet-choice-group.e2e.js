/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-choice-group", () => {
    it("should render a choice group", async () => {
        const page = await createPage("<duet-choice-group></duet-choice-group>");
        const component = await page.find("duet-choice-group");
        expect(component).not.toBeNull();
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-choice-group margin="none"></duet-choice-group>`);
        const element = await page.find(".duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should prevent stacking in non-responsive mode", async () => {
        const page = await createPage(`<duet-choice-group></duet-choice-group>`);
        const element = await page.find(".duet-choice-group");
        expect(element).toHaveClass("duet-no-stacking");
    });
    it("should provide a property that toggles on a responsive mode", async () => {
        const page = await createPage(`<duet-choice-group responsive></duet-choice-group>`);
        const component = await page.find("duet-choice-group");
        const element = await page.find(".duet-choice-group");
        expect(component).toHaveClass("duet-choice-group-breakpoint-small");
        expect(element).not.toHaveClass("duet-no-stacking");
    });
    it("should provide a property that changes the default breakpoint in a responsive mode", async () => {
        const page = await createPage(`<duet-choice-group responsive breakpoint="medium"></duet-choice-group>`);
        const component = await page.find("duet-choice-group");
        expect(component).toHaveClass("duet-choice-group-breakpoint-medium");
    });
    it("should support using arrow keys to navigate through choices", async () => {
        const page = await createPage(`
      <duet-choice-group value="one" label="Test" direction="horizontal" name="group">
        <duet-choice type="radio" label="1" value="1" expand></duet-choice>
        <duet-choice type="radio" label="2" value="2" expand></duet-choice>
        <duet-choice type="radio" label="3" value="3" expand></duet-choice>
      </duet-choice-group>
    `);
        const choiceGroup = await page.find("duet-choice-group");
        const duetChangeEvent = await choiceGroup.spyOnEvent("duetChange");
        await page.keyboard.press("Tab");
        await page.keyboard.press("ArrowDown");
        await page.waitForChanges();
        expect(duetChangeEvent).toHaveReceivedEventTimes(1);
        expect(duetChangeEvent.lastEvent.detail).toEqual({
            checked: true,
            value: "2",
            component: "duet-choice",
        });
    });
    it("should associate the tooltip with the legend", async () => {
        const page = await createPage(`
      <duet-choice-group value="one" label="This choice group has a tooltip" tooltip="Hello, I'm a tooltip!.">
        <duet-choice label="Elainvakuutus" type="radio" value="one" expand></duet-choice>
        <duet-choice label="Autovakuutus" type="radio" value="two" expand></duet-choice>
      </duet-choice-group>
    `);
        const legend = await page.find("duet-fieldset >>> legend");
        const tooltip = await page.find("duet-tooltip");
        const tooltipInputLabel = await tooltip.getProperty("accessibleInputLabel");
        expect(tooltipInputLabel).not.toBeNull();
        expect(legend.textContent).toBe(tooltipInputLabel);
    });
    it("ignores duetChange events from all components other than duet-choice", async () => {
        const page = await createPage(`
      <duet-choice-group value="svenska" label="Asiointikieli" name="group" responsive>
        <duet-choice label="Svenska" type="radio" value="svenska" collapsible expand>
          <duet-textarea></duet-textarea>
        </duet-choice>
      </duet-choice-group>
    `);
        const choiceGroup = await page.find("duet-choice-group");
        // tab to textarea
        await page.keyboard.press("Tab");
        await page.keyboard.press("Tab");
        // enter some text to trigger duetChange event from textarea
        await page.keyboard.type("hello");
        // tab out
        await page.keyboard.press("Tab");
        await page.waitForChanges();
        // value should not have changed
        const value = await choiceGroup.getProperty("value");
        expect(value).toBe("svenska");
    });
});
