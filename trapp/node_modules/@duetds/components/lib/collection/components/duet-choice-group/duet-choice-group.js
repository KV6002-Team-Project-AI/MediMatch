/*!
 * Built with Duet Design System
 */
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
export class DuetChoiceGroup {
    constructor() {
        this.choiceGroupName = "duet-choice-group";
        this.choices = new Set();
        /**
         * Component event handling.
         */
        this.onSelect = (ev) => {
            if (ev.detail.component !== "duet-choice") {
                return;
            }
            const selectedChoice = ev.target;
            if (selectedChoice && this.choices.has(selectedChoice)) {
                this.value = selectedChoice.value;
            }
        };
        this.onChoiceReady = (ev) => {
            const choice = ev.target;
            if (choice.closest("duet-choice-group") === this.element && !this.choices.has(choice)) {
                this.choices.add(choice);
                this.updateChoices();
            }
        };
        this.onChoiceRemove = (ev) => {
            const choice = ev.target;
            this.choices.delete(choice);
            this.updateChoices();
        };
        this.direction = "vertical";
        this.margin = "auto";
        this.theme = "";
        this.error = "";
        this.name = undefined;
        this.label = "Label";
        this.labelHidden = false;
        this.caption = undefined;
        this.tooltip = undefined;
        this.tooltipDirection = "auto";
        this.responsive = false;
        this.breakpoint = "small";
        this.value = undefined;
        this.disabled = undefined;
        this.required = false;
        this.accessibleLiveError = "polite";
    }
    /**
     * Component lifecycle events.
     */
    async connectedCallback() {
        if (Build.isServer) {
            return;
        }
        this.initialValue = this.value;
        this.updateChoices();
    }
    disconnectedCallback() {
        if (Build.isServer) {
            return;
        }
        if (this.mutationO) {
            this.mutationO.disconnect();
            this.mutationO = undefined;
        }
    }
    componentWillLoad() {
        inheritGlobalTheme(this);
    }
    /**
     * Local methods
     */
    async updateChoices() {
        var _a;
        const value = (_a = this.value) !== null && _a !== void 0 ? _a : this.initialValue;
        let hasChecked = false;
        // Walk the DOM in reverse order, since the last selected one wins
        for (const choice of Array.from(this.choices)) {
            choice.name = this.name;
            choice.required = this.required;
            choice.groupDisabled = this.disabled;
            choice.groupDirection = this.direction;
            choice.groupResponsive = this.responsive;
            if (!hasChecked && choice.value === value) {
                // Correct value for this choice, but this choice isn't checked yet
                // and we haven't found a checked yet
                hasChecked = true;
                choice.checked = true;
                if (typeof this.value === "undefined") {
                    this.value = value;
                }
            }
            else {
                // This choice doesn't have the correct value or the choice group has been already checked
                choice.checked = false;
            }
        }
        // Reset value if
        if (!hasChecked) {
            this.value = undefined;
        }
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        if (Build.isServer) {
            return;
        }
        return (h(Host, { onDuetChange: this.onSelect, onDuetChoiceReady: this.onChoiceReady, onDuetChoiceRemove: this.onChoiceRemove, class: {
                horizontal: this.direction === "horizontal",
                "duet-choice-group-breakpoint-x-small": this.responsive && this.breakpoint === "x-small",
                "duet-choice-group-breakpoint-small": this.responsive && this.breakpoint === "small",
                "duet-choice-group-breakpoint-medium": this.responsive && this.breakpoint === "medium",
                "duet-choice-group-breakpoint-large": this.responsive && this.breakpoint === "large",
                "duet-choice-group-breakpoint-x-large": this.responsive && this.breakpoint === "x-large",
            } }, h("duet-fieldset", { label: this.label, labelHidden: this.labelHidden, compactLabel: true, caption: this.caption, error: this.error, margin: this.margin, theme: this.theme, "accessible-live-error": this.accessibleLiveError }, this.tooltip && (h("duet-tooltip", { slot: "tooltip", direction: this.tooltipDirection, accessibleInputLabel: this.label }, this.tooltip)), h("div", { class: { [this.choiceGroupName]: true, "duet-no-stacking": !this.responsive } }, h("slot", null)))));
    }
    static get is() { return "duet-choice-group"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() {
        return {
            "$": ["duet-choice-group.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["duet-choice-group.css"]
        };
    }
    static get properties() {
        return {
            "direction": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetDirection",
                    "resolved": "\"horizontal\" | \"vertical\"",
                    "references": {
                        "DuetDirection": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetDirection"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Direction of the choice group."
                },
                "attribute": "direction",
                "reflect": false,
                "defaultValue": "\"vertical\""
            },
            "margin": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetMargin",
                    "resolved": "\"auto\" | \"none\"",
                    "references": {
                        "DuetMargin": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetMargin"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Controls the margin of the component."
                },
                "attribute": "margin",
                "reflect": false,
                "defaultValue": "\"auto\""
            },
            "theme": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetTheme",
                    "resolved": "\"\" | \"default\" | \"turva\"",
                    "references": {
                        "DuetTheme": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTheme"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Theme of the choice group."
                },
                "attribute": "theme",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "error": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Display choice group in error state along with an error message."
                },
                "attribute": "error",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "name": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Name for the choice buttons within this group. **This must be unique amongst all other inputs.**"
                },
                "attribute": "name",
                "reflect": false
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Legend displayed for the choice buttons in this group."
                },
                "attribute": "label",
                "reflect": false,
                "defaultValue": "\"Label\""
            },
            "labelHidden": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Visually hide the label, but still show it to screen readers."
                },
                "attribute": "label-hidden",
                "reflect": false,
                "defaultValue": "false"
            },
            "caption": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Additional caption to show inside the label of the choice group."
                },
                "attribute": "caption",
                "reflect": false,
                "defaultValue": "undefined"
            },
            "tooltip": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Tooltip to display next to the label of the choice group."
                },
                "attribute": "tooltip",
                "reflect": false,
                "defaultValue": "undefined"
            },
            "tooltipDirection": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetTooltipDirection",
                    "resolved": "\"auto\" | \"left\" | \"right\"",
                    "references": {
                        "DuetTooltipDirection": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTooltipDirection"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "With direction setting you can force the tooltip to always open towards left\nor right instead of automatically determining the direction."
                },
                "attribute": "tooltip-direction",
                "reflect": false,
                "defaultValue": "\"auto\""
            },
            "responsive": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Enable or disable the automatic responsive behaviour of the choice group\ncomponent when horizontal setting is used. Setting this option to \"true\"\nmakes sure that contents are stacked vertically on mobile."
                },
                "attribute": "responsive",
                "reflect": false,
                "defaultValue": "false"
            },
            "breakpoint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetChoiceGroupBreakpoint",
                    "resolved": "\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\"",
                    "references": {
                        "DuetChoiceGroupBreakpoint": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetChoiceGroupBreakpoint"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Switch the breakpoint used to trigger the content stacking. These match to\nsimilar media query tokens eg.: $media-query-small, $media-query-medium."
                },
                "attribute": "breakpoint",
                "reflect": false,
                "defaultValue": "\"small\""
            },
            "value": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The value of the selected choice button."
                },
                "attribute": "value",
                "reflect": true
            },
            "disabled": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Determines, whether the control is disabled or not."
                },
                "attribute": "disabled",
                "reflect": false
            },
            "required": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Sets whether making a choice is required or optional. Will set contained choices to required as well."
                },
                "attribute": "required",
                "reflect": false,
                "defaultValue": "false"
            },
            "accessibleLiveError": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "\"off\" | \"polite\" | \"assertive\"",
                    "resolved": "\"assertive\" | \"off\" | \"polite\"",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "The aria-live attribute for the error message. When the input is validated on blur, use \"off\", as using \"polite\" or \"assertive\"\nmakes the screen reader read the error message twice. When the input is validated on submit, use \"polite\", as \"off\" would leave\nthe messages unread by screen readers. Use \"assertive\" only in those rare cases when \"polite\" would leave the error message\nunread by screen readers."
                },
                "attribute": "accessible-live-error",
                "reflect": false,
                "defaultValue": "\"polite\""
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "value",
                "methodName": "updateChoices"
            }, {
                "propName": "disabled",
                "methodName": "updateChoices"
            }, {
                "propName": "name",
                "methodName": "updateChoices"
            }, {
                "propName": "direction",
                "methodName": "updateChoices"
            }, {
                "propName": "responsive",
                "methodName": "updateChoices"
            }];
    }
}
