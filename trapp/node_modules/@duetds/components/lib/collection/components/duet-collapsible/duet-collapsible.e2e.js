/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-collapsible", () => {
    // taken from here: https://github.com/puppeteer/puppeteer/issues/545#issuecomment-489338078
    function isElementVisible(page, selector) {
        return page.$eval(selector, (element) => {
            if (!element) {
                return false;
            }
            return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
        });
    }
    const generatePage = async (open = false) => {
        return createPage(`
      <duet-collapsible heading="First collapsible" ${open ? "open" : ""} accessible-label="Accessible First collapsible">
        <duet-paragraph>
          Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aperiam impedit, possimus minima repudiandae
        </duet-paragraph>
        <duet-paragraph>
          Laudantium consectetur iusto fugiat hic porro vero ex, non atque saepe maiores. Consectetur tempore
        </duet-paragraph>
      </duet-collapsible>
      <duet-collapsible heading="Second collapsible" heading-weight="normal" ${open ? "open" : ""}>
        <duet-paragraph>
          Lorem ipsum dolor sit, amet consectetur adipisicing elit. Aperiam impedit, possimus minima repudiandae
        </duet-paragraph>
        <duet-paragraph>
          Laudantium consectetur iusto fugiat hic porro vero ex, non atque saepe maiores. Consectetur tempore
        </duet-paragraph>
        <duet-collapsible class="inner" heading="Inner collapsible" heading-weight="normal">
          <duet-paragraph class="inner">
            Laudantium consectetur iusto fugiat hic porro vero ex, non atque saepe maiores. Consectetur tempore
          </duet-paragraph>
        </duet-collapsible>
      </duet-collapsible>
      <duet-collapsible heading="Third collapsible">
        <div slot="after-heading">
          <duet-badge>Badge</duet-badge>
        </div>
        <duet-paragraph>
          Laudantium consectetur iusto fugiat hic porro vero ex, non atque saepe maiores. Consectetur tempore
        </duet-paragraph>
      </duet-collapsible>
    `);
    };
    it("renders", async () => {
        const page = await generatePage();
        const collapsible = await page.find("duet-collapsible");
        expect(collapsible).toHaveClass("hydrated");
    });
    it("can be initially open", async () => {
        const page = await generatePage(true);
        expect(await isElementVisible(page, "duet-paragraph")).toBe(true);
    });
    it("can be initially closed", async () => {
        const page = await generatePage();
        expect(await isElementVisible(page, "duet-paragraph")).toBe(false);
    });
    it("can have initially closed duet-collapsible nested inside initially open one", async () => {
        const page = await generatePage(true);
        expect(await isElementVisible(page, "duet-paragraph.inner")).toBe(false);
    });
    it("can open initially closed nested on click", async () => {
        const page = await generatePage(true);
        expect(await isElementVisible(page, "duet-paragraph.inner")).toBe(false);
        const button = await page.find("duet-collapsible.inner >>> button");
        await button.click();
        expect(await isElementVisible(page, "duet-paragraph.inner")).toBe(true);
    });
    it("closes on click", async () => {
        const page = await generatePage(true);
        expect(await isElementVisible(page, "duet-paragraph")).toBe(true);
        const button = await page.find("duet-collapsible >>> button");
        await button.click();
        expect(await isElementVisible(page, "duet-paragraph")).toBe(false);
    });
    it("opens on click", async () => {
        const page = await generatePage();
        expect(await isElementVisible(page, "duet-paragraph")).toBe(false);
        const button = await page.find("duet-collapsible >>> button");
        await button.click();
        expect(await isElementVisible(page, "duet-paragraph")).toBe(true);
    });
    it("closes on space key", async () => {
        const page = await generatePage(true);
        await page.keyboard.press("Tab");
        await page.keyboard.press("Space");
        await page.waitForChanges();
        expect(await isElementVisible(page, "duet-paragraph")).toBe(false);
    });
    it("closes on return key", async () => {
        const page = await generatePage(true);
        await page.keyboard.press("Tab");
        await page.keyboard.press("Enter");
        await page.waitForChanges();
        expect(await isElementVisible(page, "duet-paragraph")).toBe(false);
    });
    it("raises a toggle event", async () => {
        const page = await generatePage(true);
        const collapsible = await page.find("duet-collapsible");
        const duetToggle = await collapsible.spyOnEvent("duetToggle");
        const button = await page.find("duet-collapsible >>> button");
        await button.click();
        expect(duetToggle).toHaveReceivedEventTimes(1);
    });
    it("renders the necessary aria attributes", async () => {
        const page = await generatePage();
        const content = await page.find("duet-collapsible >>> [id]");
        const button = await page.find("duet-collapsible >>> button");
        // button and content should be associated via aria-controls/id attributes
        expect(button.getAttribute("aria-controls")).toEqual(content.id);
        expect(button.getAttribute("aria-label")).toBe("Accessible First collapsible");
        expect(button.getAttribute("aria-expanded")).toBe("false");
        await button.click();
        expect(button.getAttribute("aria-expanded")).toBe("true");
    });
    it("renders the after-heading slot", async () => {
        const page = await generatePage();
        expect(await isElementVisible(page, "duet-badge")).toBe(true);
    });
});
