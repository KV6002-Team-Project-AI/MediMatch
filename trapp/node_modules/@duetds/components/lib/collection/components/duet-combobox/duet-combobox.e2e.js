/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
const createPageWithCombobox = async () => {
    const combobox = `<duet-combobox force="true"><duet-input label="Combobox Postalcode example" icon="form-location" expand caption="use arrow keys to navigate, type to search list"></duet-input></duet-combobox>`;
    const page = await createPage(combobox);
    await page.$eval("duet-combobox", (combobox, props) => Object.assign(combobox, props), {
        items: [
            { id: 0, value: "49200", name: "Heinlahti" },
            { id: 1, value: "49210", name: "Huutjarvi" },
            { id: 2, value: "49220", name: "Siltakyla" },
            { id: 3, value: "49240", name: "Purola" },
            { id: 4, value: "49270", name: "Something" },
            { id: 5, value: "49290", name: "Vastila" },
        ],
    });
    return page;
};
describe("duet-combobox", () => {
    it("should render a combobox", async () => {
        const page = await createPageWithCombobox();
        const component = await page.find("duet-combobox");
        expect(component).not.toBeNull();
    });
    it("allow selection of items via keyboard, make sure tabbing away retains content", async () => {
        const page = await createPageWithCombobox();
        const element = await page.find("duet-combobox");
        const input = await element.find("duet-input .duet-input");
        await input.click();
        // type some chars that match the values in the combobox
        await page.keyboard.type("H", { delay: 150 });
        await page.keyboard.press("ArrowDown", { delay: 150 });
        // move cursor so we can test maintaining position
        await page.keyboard.press("Enter");
        await page.waitForChanges();
        // check the value
        expect(await input.getProperty("value")).toBe("Heinlahti");
        // type some chars that do not match the values in the combobox
        await page.keyboard.type("superMAN", { delay: 50 });
        // tab to input
        await page.keyboard.press("Tab");
        // we should see value hasn't changed
        await page.waitForChanges();
        expect(await input.getProperty("value")).toBe("Heinlahti");
    });
    it("closes via escape key with null values if forced", async () => {
        const page = await createPageWithCombobox();
        const element = await page.find("duet-combobox");
        const input = await element.find("duet-input .duet-input");
        // tab to input
        await page.keyboard.press("Tab");
        // type some chars that match the values in the combobox
        await page.keyboard.type("Heinlah", { delay: 50 });
        // send escape
        await page.keyboard.press("Escape");
        await page.waitForChanges();
        // check the value
        expect(await input.getProperty("value")).toBe("");
    });
    it("closes via escape key with set values if forced", async () => {
        const page = await createPageWithCombobox();
        const targetValue = "Heinlahti";
        const element = await page.find("duet-combobox");
        const input = await element.find("duet-input .duet-input");
        // tab to input
        await page.keyboard.press("Tab");
        // type some chars that match the values in the combobox
        await page.keyboard.type("Heinlah", { delay: 50 });
        // move cursor so we can test maintaining position
        await page.keyboard.press("ArrowDown");
        await page.keyboard.press("Enter");
        //for each letter there is in the string targetValue we need to press backspace
        for (let i = 0; i < targetValue.length; i++) {
            await page.keyboard.press("Backspace");
        }
        // type some chars that match the values in the combobox
        await page.keyboard.type("Pyhtää", { delay: 50 });
        // send escape
        await page.keyboard.press("Escape");
        await page.waitForChanges();
        const itemValue = await input.getProperty("value");
        // check the value
        expect(itemValue).toBe(targetValue);
    });
    it("shows dropdown navigable via keys", async () => {
        const page = await createPageWithCombobox();
        const element = await page.find("duet-combobox");
        const input = await element.find("duet-input .duet-input");
        // focus on input
        await input.click();
        // type some chars that match the values in the combobox
        await page.keyboard.type("H", { delay: 150 });
        // send keys to navigate
        await page.keyboard.press("ArrowDown", { delay: 150 });
        await page.keyboard.press("ArrowDown", { delay: 150 });
        await page.keyboard.press("Enter", { delay: 50 });
        // tab to input
        await page.keyboard.press("Tab", { delay: 500 });
        await page.waitForChanges();
        // check the value
        expect(await input.getProperty("value")).toBe("Huutjarvi");
    });
    it("allows filtering middle of string", async () => {
        const page = await createPageWithCombobox();
        const element = await page.find("duet-combobox");
        element.setProperty("filterType", "includes");
        await page.waitForChanges();
        const input = await element.find("duet-input .duet-input");
        // focus on input
        await input.click();
        // type some chars that match the values in the combobox
        await page.keyboard.type("uu", { delay: 150 });
        // send keys to navigate
        await page.keyboard.press("ArrowDown", { delay: 150 });
        await page.keyboard.press("Enter", { delay: 50 });
        // tab to input
        await page.keyboard.press("Tab", { delay: 500 });
        await page.waitForChanges();
        // check the value
        expect(await input.getProperty("value")).toBe("Huutjarvi");
    });
});
