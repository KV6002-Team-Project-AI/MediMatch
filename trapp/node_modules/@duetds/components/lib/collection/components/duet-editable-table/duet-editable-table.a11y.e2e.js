/*!
 * Built with Duet Design System
 */
import { formatViolations, options as axeRunOptions, testWithAxe } from "../../utils/axe-core-utils";
describe("[a11y] duet-editable-table", () => {
    it("should render an accessible component", async () => {
        const result = await testWithAxe(`
        <duet-editable-table margin="auto" sticky sticky-distance="none" variation="striped">
          <div class="example-menu" slot="thead-first">
            <div>
              <ul role="menubar">
                <li role="menuitem">
                  <duet-button
                    accessible-label="Download the table as a CSV file"
                    fixed
                    icon="action-download"
                    icon-size="medium"
                    margin="none"
                    padding="none"
                    variation="plain"
                  >
                    Download as CSV
                  </duet-button>
                </li>
                <li role="menuitem">
                  <duet-button
                    accessible-label="Copy the data to you Clipboard as csv"
                    fixed
                    icon="form-file"
                    icon-size="medium"
                    margin="none"
                    padding="none"
                    variation="plain"
                  >
                    copy
                  </duet-button>
                </li>
              </ul>
            </div>
          </div>
        </duet-editable-table>
        <script>
          // Save a reference to the elements
          const eTable = document.querySelector("duet-editable-table");


          // defined actions - if this is not defined, the table will not have any actions
          eTable.actions = [
            {
              "icon": "action-edit-2",
              "color": "primary",
              "name": "edit",
              "size": "x-small",
              "background": "gray-lightest",
              "label": {
                "fi": "Muokkaa luokkaa",
                "en": "Edit category",
                "sv": "Redigera kategori",
              },
            },
            {
              "icon": "action-delete",
              "color": "danger",
              "name": "delete",
              "size": "x-small",
              "background": "gray-lightest",
              "label": {
                "fi": "Poista",
                "en": "Delete",
                "sv": "Radera",
              },
            },
          ];

          //defined columns, if this is set, rows must also be defined for this to have an affect
          eTable.columns = [
            {
              sort_order: 1, direction: 1, index: 0, key: "name",
              label: {
                "fi": "Name",
                "en": "Name",
                "sv": "Name",
              },
            },
            {
              sort_order: 2, direction: -1, index: 1, key: "last_name",
              label: {
                "fi": "Last name",
                "en": "Last name",
                "sv": "Last name",
              },
            },
            {
              direction: 1, index: 2, key: "age",
              label: {
                "fi": "Age",
                "en": "Age",
                "sv": "Age",
              },
            },
            {
              direction: 1, index: 3, key: "hidden_age",
              label: {
                "fi": "hidden age",
                "en": "hidden age",
                "sv": "hidden age",
              },
            },
          ];

          //defined rows, if this is set, columns must also be defined for this to have an affect
          eTable.rows = [{
            "name": "Jenn",
            "last_name": "Woodburne",
            "age": 65,
            "hidden_age": 25,
            "meta": {
              "id": "1",
            },
          }, {
            "name": "Symon",
            "last_name": "Effemy",
            "age": 91,
            "hidden_age": 25,
            "meta": {
              "id": "2",
            },
          }, {
            "name": "Shari",
            "last_name": "Pattlel",
            "age": 81,
            "hidden_age": 25,
            "meta": {
              "id": "3",
            },
          }, {
            "name": "Trudy",
            "last_name": "MacRitchie",
            "age": 56,
            "hidden_age": 25,
            "meta": {
              "id": "4",
            },
          }, {
            "name": "Dick",
            "last_name": "Gorgen",
            "age": 69,
            "hidden_age": 25,
            "meta": {
              "id": "5",
            },
          }, {
            "name": "Pia",
            "last_name": "Siemens",
            "age": 93,
            "hidden_age": 25,
            "meta": {
              "id": "6",
            },
          }, {
            "name": "Fred",
            "last_name": "Baslter",
            "age": 78,
            "hidden_age": 25,
            "meta": {
              "id": "7",
            },
          }, {
            "name": "Fred",
            "last_name": "Alster",
            "age": 54,
            "hidden_age": 25,
            "meta": {
              "id": "8",
            },
          }, {
            "name": "Mair",
            "last_name": "Camier",
            "age": 76,
            "hidden_age": 25,
            "meta": {
              "id": "9",
            },
          }, {
            "name": "Meade",
            "last_name": "Hansana",
            "age": 68,
            "hidden_age": 25,
            "meta": {
              "id": "10",
            },
          }];



        </script>

      `, axeRunOptions);
        expect(result).not.toBeNull();
        expect(formatViolations(result.violations)).toEqual([]);
    });
});
