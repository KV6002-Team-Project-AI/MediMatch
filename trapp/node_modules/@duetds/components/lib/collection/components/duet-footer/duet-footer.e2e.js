/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
const defaultFooter = `<duet-footer logo-href="/" language="fi" class="duet-example-without-padding"> </duet-footer>`;
const simpleVariation = `<duet-footer variation="simple" class="duet-example-without-padding"> </duet-footer>`;
describe("duet-footer", () => {
    it("should render a navigation", async () => {
        const page = await createPage(defaultFooter);
        const component = await page.find("duet-footer");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that sets language", async () => {
        const page = await createPage(defaultFooter);
        const element = await page.find("duet-footer >>> duet-logo");
        expect(element.getAttribute("language")).toEqual("fi");
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-footer margin="none"></duet-footer>`);
        const element = await page.find("duet-footer >>> .duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-footer theme="turva"></duet-footer>`);
        const element = await page.find("duet-footer >>> .duet-footer");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that changes logoâ€™s href", async () => {
        const page = await createPage(`<duet-footer logo-href="demo"></duet-footer>`);
        const element = await page.find("duet-footer >>> duet-logo");
        expect(element.getAttribute("href")).toEqual("demo");
    });
    it("should provide a property that renders navigation items", async () => {
        const page = await createPage(defaultFooter);
        await page.$eval("duet-footer", (el) => {
            el.items = [
                { label: "Hae korvausta", href: "#", icon: "navigation-make-claim" },
                { label: "Osta vakuutus", href: "#", icon: "action-buy-insurance" },
                { label: "Yhteystiedot", href: "#", icon: "form-tel" },
            ];
        });
        await page.waitForChanges();
        const element = await page.find("duet-footer >>> .duet-footer-link");
        expect(element).not.toBeNull();
    });
    it("should provide a property that renders menu items", async () => {
        const page = await createPage(defaultFooter);
        await page.$eval("duet-footer", (el) => {
            el.menu = [
                { label: "Hae korvausta", href: "#" },
                { label: "Osta vakuutus", href: "#" },
                { label: "Yhteystiedot", href: "#" },
            ];
        });
        await page.waitForChanges();
        const element = await page.find("duet-footer >>> p a");
        expect(element).not.toBeNull();
    });
    it("should provide a property that renders the footer in simple mode", async () => {
        const page = await createPage(simpleVariation);
        const element = await page.find("duet-footer >>> .duet-footer-simple");
        expect(element).not.toBeNull();
    });
    it("should automatically refresh itself when content changes", async () => {
        const page = await createPage(defaultFooter);
        await page.$eval("duet-footer", (el) => {
            el.items = [
                { label: "Hae korvausta", href: "#", icon: "navigation-make-claim" },
                { label: "Osta vakuutus", href: "#", icon: "action-buy-insurance" },
                { label: "Yhteystiedot", href: "#", icon: "form-tel" },
            ];
        });
        const element = await page.find("duet-footer");
        // should be updated when setting the *attribute*
        element.setAttribute("items", '[{ "label": "test", "href": "#", "icon": "navigation-make-claim" }]');
        await page.waitForChanges();
        let test = await page.find("duet-footer >>> .duet-footer-link");
        expect(test).toEqualText("test");
        // should also be updated when setting the label *property*
        element.setProperty("items", [{ label: "test 2", href: "#", icon: "navigation-make-claim" }]);
        await page.waitForChanges();
        test = await page.find("duet-footer >>> .duet-footer-link");
        expect(test).toEqualText("test 2");
    });
    describe("events", () => {
        let page;
        let footer;
        const props = {
            items: [
                { label: "item 1", id: "item-1", icon: "form-tel" },
                { label: "item 2", id: "item-2", icon: "navigation-make-claim" },
            ],
            menu: [{ label: "menu 1", id: "menu-1" }],
            logoHref: "/logo",
        };
        beforeEach(async () => {
            page = await createPage(defaultFooter);
            footer = await page.find("duet-footer");
            await page.$eval("duet-footer", (footer, props) => {
                Object.assign(footer, props);
            }, props);
            await page.waitForChanges();
        });
        // TODO: broken test as the browser tries to enter the logo url
        it.skip("raises events when logo is clicked", async () => {
            const logo = await page.find("duet-footer >>> duet-logo");
            const changeSpy = await footer.spyOnEvent("duetChange");
            const logoSpy = await footer.spyOnEvent("duetLogoClick");
            await logo.click();
            const expected = {
                component: "duet-footer",
                data: { href: props.logoHref, label: "logo" },
                originalEvent: expect.anything(),
            };
            expect(changeSpy.firstEvent.detail).toEqual(expected);
            expect(logoSpy.firstEvent.detail).toEqual(expected);
        });
        it("raises events when the menu is clicked", async () => {
            const menu = await page.find("duet-footer >>> #menu-1");
            const changeSpy = await footer.spyOnEvent("duetChange");
            const menuSpy = await footer.spyOnEvent("duetMenuClick");
            await menu.click();
            const expected = {
                component: "duet-footer",
                data: props.menu[0],
                originalEvent: expect.anything(),
            };
            expect(changeSpy.firstEvent.detail).toEqual(expected);
            expect(menuSpy.firstEvent.detail).toEqual(expected);
        });
        it("raises events when an item is clicked", async () => {
            const item = await page.find("duet-footer >>> #item-1");
            const changeSpy = await footer.spyOnEvent("duetChange");
            const itemSpy = await footer.spyOnEvent("duetItemClick");
            await item.click();
            const expected = {
                component: "duet-footer",
                data: props.items[0],
                originalEvent: expect.anything(),
            };
            expect(changeSpy.firstEvent.detail).toEqual(expected);
            expect(itemSpy.firstEvent.detail).toEqual(expected);
        });
    });
    describe("analytics", () => {
        let page;
        beforeEach(async () => {
            page = await createPage(`
        <duet-footer
          items='[
            { "label": "item 1", "id": "item-1", "analyticsId": "item analytics", "icon": "form-tel"} ,
            { "label": "item 2", "id": "item-2", "icon": "form-tel" }
          ]'
          menu='[{ "label": "menu 1", "id": "menu-1", "analyticsId": "menu analytics"}]'
        ></duet-footer>
      `);
        });
        it("allows analytics to be set for footer items", async () => {
            const item1 = await page.find("duet-footer >>> #item-1");
            expect(item1).not.toBeNull();
            const analyticsSpy = await page.spyOnEvent("duetAnalytics");
            await item1.click();
            expect(analyticsSpy).toHaveReceivedEventDetail({
                analyticsId: "item analytics",
                component: "duet-footer",
            });
        });
        it("allows analytics to be set for menu items", async () => {
            const menu1 = await page.find("duet-footer >>> #menu-1");
            expect(menu1).not.toBeNull();
            const analyticsSpy = await page.spyOnEvent("duetAnalytics");
            await menu1.click();
            expect(analyticsSpy).toHaveReceivedEventDetail({
                analyticsId: "menu analytics",
                component: "duet-footer",
            });
        });
        it("does nothing when items without analytics are clicked", async () => {
            const item2 = await page.find("duet-footer >>> #item-2");
            expect(item2).not.toBeNull();
            const analyticsSpy = await page.spyOnEvent("duetAnalytics");
            await item2.click();
            expect(analyticsSpy).toHaveReceivedEventTimes(0);
        });
    });
});
