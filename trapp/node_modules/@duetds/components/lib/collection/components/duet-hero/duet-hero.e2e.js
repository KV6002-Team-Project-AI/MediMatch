/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-hero", () => {
    it("should render a hero area", async () => {
        const page = await createPage(`<duet-hero></duet-hero>`);
        const component = await page.find("duet-hero");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-hero theme="turva"></duet-hero>`);
        const element = await page.find("duet-hero >>> .duet-hero");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that sets pre-heading", async () => {
        const page = await createPage(`<duet-hero pre-heading="test"></duet-hero>`);
        const element = await page.find("duet-hero >>> .duet-hero-pre");
        expect(element.textContent).toEqual("test");
    });
    it("should provide a property that sets the heading", async () => {
        const page = await createPage(`<duet-hero heading="test #473895ur8oiojoP!"></duet-hero>`);
        const element = await page.find("duet-hero >>> duet-heading");
        expect(element.textContent).toEqual("test #473895ur8oiojoP!");
    });
    it("should provide a property that changes the heading level", async () => {
        const page = await createPage(`<duet-hero heading="test #473895ur8oiojoP!" level="h5"></duet-hero>`);
        const element = await page.find("duet-hero >>> duet-heading");
        expect(element.getAttribute("level")).toEqual("h5");
    });
    it("should provide a property that sets the description", async () => {
        const page = await createPage(`<duet-hero description="test #473895ur8oiojoP!"></duet-hero>`);
        const element = await page.find("duet-hero >>> duet-paragraph >>> .duet-paragraph");
        expect(element.textContent).toEqual("test #473895ur8oiojoP!");
    });
    it("should provide a property that sets an icon for the action button", async () => {
        const page = await createPage(`<duet-hero button-label="test #473895ur8oiojoP!" button-id="test"></duet-hero>`);
        const element = await page.find("duet-hero >>> duet-button >>> .duet-button-icon");
        expect(element).not.toBeNull();
    });
    it("should provide a property that sets an ID for the action button", async () => {
        const page = await createPage(`<duet-hero button-label="test #473895ur8oiojoP!" button-id="test"></duet-hero>`);
        const element = await page.find("duet-hero >>> duet-button >>> #test");
        expect(element).not.toBeNull();
    });
    it("should provide a property that sets the icon size", async () => {
        const page = await createPage(`<duet-hero button-label="test #473895ur8oiojoP!" icon="action-add" icon-size="large"></duet-hero>`);
        await page.waitForChanges();
        const element = await page.find("duet-hero >>> duet-button >>> .large");
        expect(element).not.toBeNull();
    });
    it("should provide a property that sets the image for hero area", async () => {
        const page = await createPage(`<duet-hero image="/icons/lib/assets/action-add-circle.svg"></duet-hero>`);
        const element = await page.find("duet-hero >>> .duet-hero-image");
        expect(element).not.toBeNull();
    });
    it("should provide a property that changes the style variation to light", async () => {
        const page = await createPage(`<duet-hero variation="light"></duet-hero>`);
        const element = await page.find("duet-hero >>> .duet-hero-light");
        expect(element).not.toBeNull();
    });
    it("should not render image if the image property isn’t used", async () => {
        const page = await createPage(`<duet-hero title="test"></duet-hero>`);
        const element = await page.find("duet-hero >>> .duet-hero-image");
        expect(element).toBeNull();
    });
    it("should not render button if the buttonLabel property isn’t used", async () => {
        const page = await createPage(`<duet-hero title="test"></duet-hero>`);
        const element = await page.find("duet-hero >>> duet-button");
        expect(element).toBeNull();
    });
    it("should not render intro text if the description property isn’t used", async () => {
        const page = await createPage(`<duet-hero title="test"></duet-hero>`);
        const element = await page.find("duet-hero >>> .duet-hero-paragraph");
        expect(element).toBeNull();
    });
    it("should provide a property that sets action items", async () => {
        const page = await createPage(`<duet-hero></duet-hero>`);
        await page.$eval("duet-hero", (el) => {
            el.variation = "gray";
            el.actions = [
                { label: "Ilmoita vahingosta", href: "/foo", icon: "navigation-make-claim" },
                { label: "Päivitä vakuutusta", href: "#", icon: "action-edit-2" },
                { label: "Tee rekisteröintimuutos", href: "#", icon: "messaging-terms", external: true },
            ];
        });
        await page.waitForChanges();
        const element = await page.find("duet-hero >>> .duet-hero-links .duet-hero-link:first-child");
        expect(element.getAttribute("href")).toEqual("/foo");
    });
    it("should provide a property that sets list items", async () => {
        const page = await createPage(`<duet-hero></duet-hero>`);
        await page.$eval("duet-hero", (el) => {
            el.variation = "gray";
            el.listItems = [
                { label: "Ilmoita vahingosta", value: "test" },
                { label: "Päivitä vakuutusta", value: "test" },
                { label: "Tee rekisteröintimuutos", value: "test" },
            ];
        });
        await page.waitForChanges();
        const element = await page.find("duet-hero >>> duet-list");
        expect(element).not.toBeNull();
    });
    it("should provide a property that sets the back link", async () => {
        const page = await createPage(`<duet-hero></duet-hero>`);
        await page.$eval("duet-hero", (el) => {
            el.variation = "gray";
            el.back = { label: "Takaisin", href: "#" };
        });
        await page.waitForChanges();
        const element = await page.find("duet-hero >>> .duet-hero-back");
        expect(element).not.toBeNull();
    });
    it("should provide a property that sets language", async () => {
        const page = await createPage(`<duet-hero language="en"></duet-hero>`);
        await page.$eval("duet-hero", (el) => {
            el.variation = "gray";
            el.actions = [
                { label: "Ilmoita vahingosta", href: "#", icon: "navigation-make-claim" },
                { label: "Päivitä vakuutusta", href: "#", icon: "action-edit-2" },
                { label: "Tee rekisteröintimuutos", href: "#", icon: "messaging-terms", external: true },
            ];
        });
        const element = await page.find("duet-hero >>> duet-visually-hidden");
        expect(element.textContent).toEqual(", Avautuu uuteen ikkunaan");
    });
    it("should automatically refresh itself when content changes", async () => {
        const page = await createPage(`<duet-hero language="en"></duet-hero>`);
        await page.$eval("duet-hero", (el) => {
            el.variation = "gray";
            el.actions = [{ label: "Ilmoita vahingosta", href: "#", icon: "navigation-make-claim" }];
        });
        const element = await page.find("duet-hero");
        // should be updated when setting the *attribute*
        element.setAttribute("actions", '[{ "label": "test", "href": "#", "icon": "navigation-make-claim" }]');
        await page.waitForChanges();
        const test = await page.find("duet-hero >>> .duet-hero-links .duet-hero-link:first-child");
        expect(test).toEqualText("test");
        // should also be updated when setting the label *property*
        element.setProperty("actions", [{ label: "test 2", href: "#", icon: "navigation-make-claim" }]);
        await page.waitForChanges();
        expect(test).toEqualText("test 2");
    });
    describe("analytics", () => {
        let page;
        const ANALYTICS_EVENT_NAME = "some test event";
        beforeEach(async () => {
            page = await createPage(`<duet-hero heading="Laskut" button-label="Vaihda e-laskutukseen" button-url="#"></duet-hero>`);
            await page.$eval("duet-hero", (hero, analyticsId) => {
                hero.buttonData = { analytics: analyticsId };
            }, ANALYTICS_EVENT_NAME);
        });
        it("allows analytics to be set for the hero button", async () => {
            const button = await page.find("duet-hero >>> duet-button");
            const analyticsSpy = await page.spyOnEvent("duetAnalytics");
            await button.click();
            expect(analyticsSpy).toHaveReceivedEventTimes(1);
            expect(analyticsSpy).toHaveReceivedEventDetail({
                analyticsId: ANALYTICS_EVENT_NAME,
                component: "duet-hero",
            });
        });
        it("doesn't add analytics attributes when elements other than button clicked", async () => {
            const heading = await page.find("duet-hero >>> duet-heading");
            const analyticsSpy = await page.spyOnEvent("duetAnalytics");
            await heading.click();
            expect(analyticsSpy).toHaveReceivedEventTimes(0);
        });
    });
});
