/*!
 * Built with Duet Design System
 */
import { formatViolations, options as axeRunOptions, testWithAxe } from "../../utils/axe-core-utils";
describe("[a11y] duet-input", () => {
    it("should render an accessible component", async () => {
        const result = await testWithAxe(`
        <duet-input type="text" required label="Text input" placeholder="Placeholder text" debounce="500"></duet-input>
      `, axeRunOptions);
        expect(result).not.toBeNull();
        expect(formatViolations(result.violations)).toEqual([]);
    });
    it("should render an accessible component of type email", async () => {
        const result = await testWithAxe(`
        <duet-input type="email" required label="Email input" placeholder="example@example.com"></duet-input>      `, axeRunOptions);
        expect(result).not.toBeNull();
        expect(formatViolations(result.violations)).toEqual([]);
    });
    it("should render an accessible component of type search", async () => {
        const result = await testWithAxe(`
        <duet-input clear="true" type="search" label="Search input" label-hidden placeholder="Type to search"></duet-input>
      `, axeRunOptions);
        expect(result).not.toBeNull();
        expect(formatViolations(result.violations)).toEqual([]);
    });
    it("should render an accessible component of type password", async () => {
        const result = await testWithAxe(`
        <duet-input type="password" variation="revealable" label="Password" placeholder="Password"></duet-input>
      `, axeRunOptions);
        expect(result).not.toBeNull();
        expect(formatViolations(result.violations)).toEqual([]);
    });
});
