/*!
 * Built with Duet Design System
 */
import { createPage, isFocused } from "../../utils/test-utils";
describe("duet-modal", () => {
    // we want to wait for modal to be focused to ensure close button
    // automatically receives focus when `active` prop is `true`
    const isModalFocused = () => {
        return document.activeElement === document.querySelector("duet-modal");
    };
    it("should render a modal", async () => {
        const page = await createPage(`<duet-modal></duet-modal>`);
        const component = await page.find("duet-modal");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-modal theme="turva"></duet-modal>`);
        const element = await page.find("duet-modal >>> .duet-modal-overlay");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that changes the size", async () => {
        const page = await createPage(`<duet-modal size="small"></duet-modal>`);
        const element = await page.find("duet-modal >>> .duet-modal");
        expect(element).toHaveClass("small");
    });
    it("should provide a property that sets a heading", async () => {
        const page = await createPage(`<duet-modal heading="test"></duet-modal>`);
        const element = await page.find("duet-modal >>> duet-heading");
        expect(element.textContent).toEqual("test");
    });
    it("should provide a property that sets a heading's level", async () => {
        const page = await createPage(`<duet-modal heading="test" heading-level="h1"></duet-modal>`);
        const element = await page.find("duet-modal >>> duet-heading");
        expect(element.getAttribute("level")).toEqual("h1");
    });
    it("should provide a property that sets a heading's visual level", async () => {
        const page = await createPage(`<duet-modal heading="test" heading-visual-level="h4"></duet-modal>`);
        const element = await page.find("duet-modal >>> duet-heading");
        expect(element.getAttribute("visual-level")).toEqual("h4");
    });
    it("should set a heading's visual level the same as its level if no visual value provided", async () => {
        const page = await createPage(`<duet-modal heading="test" heading-level="h1"></duet-modal>`);
        const element = await page.find("duet-modal >>> duet-heading");
        expect(element.getAttribute("visual-level")).toEqual("h1");
    });
    it("should provide a property that sets an icon", async () => {
        const page = await createPage(`<duet-modal icon="form-location"></duet-modal>`);
        const element = await page.find("duet-modal >>> duet-icon");
        expect(element).not.toBeNull();
    });
    it("should provide a property that sets the icon color", async () => {
        const page = await createPage(`<duet-modal icon="form-location" color="secondary"></duet-modal>`);
        const element = await page.find("duet-modal >>> duet-icon");
        expect(element.getAttribute("color")).toEqual("secondary");
    });
    it("should provide a property that makes the modal active", async () => {
        const page = await createPage(`<duet-modal active></duet-modal>`);
        const element = await page.find("duet-modal >>> .duet-modal-overlay");
        expect(element).toHaveClass("duet-modal-active");
    });
    it("traps focus", async () => {
        const page = await createPage(`
      <duet-modal
        size="small"
        heading="Modal test"
        icon="damage-breakage"
        class="duet-text-center"
        active
      >
        <duet-paragraph>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore
          magna aliqua. Ut enim ad minim veniam quis nostrud.
        </duet-paragraph>
        <duet-paragraph>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.
        </duet-paragraph>
        <duet-collapsible heading="Click to open details">
          Lorem ipsum dolor sit, amet consectetur adipisicing elit.
          Aperiam impedit, possimus minima repudiandae.
        </duet-collapsible>
      </duet-modal>
    `);
        await page.find("duet-modal");
        await page.waitForFunction(isModalFocused);
        // tab to link in light dom
        await page.keyboard.press("Tab");
        const collapsible = await page.find("duet-collapsible >>> button");
        expect(await isFocused(collapsible)).toBe(true);
        // focus should now go back to close button
        await page.keyboard.press("Tab");
        const closeButton = await page.find("duet-modal >>> duet-button");
        expect(await isFocused(closeButton)).toBe(true);
    });
    it.skip("closes on blur", async () => {
        const page = await createPage(`
      <duet-modal
        size="small"
        heading="Modal test"
        icon="damage-breakage"
        class="duet-text-center"
        active
        close-on-blur="true"
      >
        <duet-paragraph>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore
          magna aliqua. Ut enim ad minim veniam quis nostrud.
        </duet-paragraph>
        <duet-paragraph>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt.
        </duet-paragraph>
        <duet-collapsible heading="Click to open details">
          Lorem ipsum dolor sit, amet consectetur adipisicing elit.
          Aperiam impedit, possimus minima repudiandae.
        </duet-collapsible>
      </duet-modal>
    `);
        await page.waitForFunction(isModalFocused);
        const duetModalInner = await page.find("duet-modal >>>");
        const duetBody = await page.find("body");
        expect(duetModalInner.isVisible()).toBeTruthy();
        duetBody.click();
        expect(!duetModalInner || duetModalInner.isVisible()).toBeFalsy();
    });
});
