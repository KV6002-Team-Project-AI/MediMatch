/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-multiselect", () => {
    it("should render a multiselect", async () => {
        const page = await createPage(`<duet-multiselect></duet-multiselect>`);
        const component = await page.find("duet-multiselect");
        expect(component).not.toBeNull();
    });
    it("should provide a property that renders label", async () => {
        const page = await createPage(`<duet-multiselect label="test"></duet-multiselect>`);
        const element = await page.find("duet-multiselect >>> label");
        expect(element.innerText).toEqual("test");
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-multiselect margin="none"></duet-multiselect>`);
        const element = await page.find(".duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-multiselect theme="turva"></duet-multiselect>`);
        const element = await page.find("duet-multiselect >>> .duet-multiselect-container");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that makes the  disabled", async () => {
        const page = await createPage(`<duet-multiselect disabled></duet-multiselect>`);
        const element = await page.find("duet-multiselect >>> .duet-multiselect");
        expect(element.getAttribute("disabled")).not.toBeNull();
    });
    it("should provide a property that adds an ID", async () => {
        const page = await createPage(`<duet-multiselect identifier="test"></duet-multiselect>`);
        const element = await page.find("duet-multiselect >>> .duet-multiselect");
        expect(element.getAttribute("id")).toEqual("test");
    });
    it("should provide a property that renders select all and and clear all buttons", async () => {
        const page = await createPage(`<duet-multiselect all-controls items='[{"label": "11100", "value": "11100"}, {"label": "22200", "value": "22200"}]'></duet-multiselect>`);
        const selectAll = await page.find("duet-multiselect >>> button.duet-multiselect-select-all");
        const clearAll = await page.find("duet-multiselect >>> button.duet-multiselect-clear-all");
        expect(selectAll).not.toBeNull();
        expect(clearAll).not.toBeNull();
    });
    it("should not render select all and and clear all buttons if there are no items", async () => {
        const page = await createPage(`<duet-multiselect all-controls></duet-multiselect>`);
        const selectAll = await page.find("duet-multiselect >>> button.duet-multiselect-select-all");
        const clearAll = await page.find("duet-multiselect >>> button.duet-multiselect-clear-all");
        expect(selectAll).toBeNull();
        expect(clearAll).toBeNull();
    });
    it("should select and clear all when clicking the corresponding buttons", async () => {
        const page = await createPage(`<duet-multiselect all-controls items='[{"label": "11100", "value": "11100"}, {"label": "22200", "value": "22200"}]'></duet-multiselect>`);
        const multiselect = await page.find("duet-multiselect");
        const multiselectTrigger = await page.find("duet-multiselect >>> .duet-multiselect");
        const selectAll = await page.find("duet-multiselect >>> button.duet-multiselect-select-all");
        const clearAll = await page.find("duet-multiselect >>> button.duet-multiselect-clear-all");
        await multiselectTrigger.click();
        expect(await multiselect.getProperty("value")).toHaveLength(0);
        await selectAll.click();
        expect(await multiselect.getProperty("value")).toHaveLength(2);
        await clearAll.click();
        expect(await multiselect.getProperty("value")).toHaveLength(0);
    });
    it("should only raise an event on user interaction, not when changing checked property programmatically", async () => {
        const page = await createPage(`<duet-multiselect label="Checked" items='[{"label": "11100", "value": "11100"}, {"label": "22200", "value": "22200"}]'></duet-multiselect>`);
        const multiselect = await page.find("duet-multiselect >>> .duet-multiselect");
        await multiselect.click();
        const checkbox = await page.find("duet-multiselect >>> duet-checkbox");
        const changeEventSpy = await checkbox.spyOnEvent("duetChange");
        checkbox.setProperty("checked", true);
        await page.waitForChanges();
        expect(changeEventSpy).not.toHaveReceivedEvent();
        await checkbox.click();
        expect(changeEventSpy).toHaveReceivedEvent();
    });
    it("should raise an event on focus", async () => {
        const page = await createPage(`<duet-multiselect label="Checked" value="test"></duet-multiselect>`);
        const multiselect = await page.find("duet-multiselect");
        const focusEventSpy = await multiselect.spyOnEvent("duetFocus");
        await page.keyboard.press("Tab");
        await page.waitForChanges();
        expect(focusEventSpy).toHaveReceivedEvent();
    });
    it("should raise an event on blur", async () => {
        const page = await createPage(`
      <duet-multiselect label="Checked" value="test"></duet-multiselect>
      <button>another focusable element</button>
    `);
        const multiselect = await page.find("duet-multiselect");
        const blurEventSpy = await multiselect.spyOnEvent("duetFocus");
        // focus then blur the checkbox
        await page.keyboard.press("Tab");
        await page.keyboard.press("Tab");
        await page.waitForChanges();
        expect(blurEventSpy).toHaveReceivedEvent();
    });
});
