/*!
 * Built with Duet Design System
 */
import { createComponent } from "./duet-number-input.e2e";
describe("duet-number-input - negative values", () => {
    it("supports negative min and max values", async () => {
        const page = await createComponent({ value: "-2 C", step: 1, min: -3, max: -1, unit: "C" });
        const numberInput = await page.find("duet-number-input");
        const input = await numberInput.find("duet-input");
        const subtract = await numberInput.find(".duet-number-button-subtract");
        const add = await numberInput.find(".duet-number-button-add");
        await page.$eval("duet-number-input", (el) => el.setFocus());
        expect(await input.getProperty("value")).toBe("−2 C");
        await add.click();
        await page.waitForChanges();
        expect(await input.getProperty("value")).toBe("−1 C");
        // we've hit the max, so should still be 3
        await add.click();
        await page.waitForChanges();
        expect(await input.getProperty("value")).toBe("−1 C");
        await subtract.click();
        await page.waitForChanges();
        expect(await input.getProperty("value")).toBe("−2 C");
        await subtract.click();
        await page.waitForChanges();
        expect(await input.getProperty("value")).toBe("−3 C");
        // we've hit the min, so should be still be 1
        await subtract.click();
        await page.waitForChanges();
        expect(await input.getProperty("value")).toBe("−3 C");
    });
});
