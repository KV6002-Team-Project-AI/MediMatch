/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
import { shouldDisplayNavigation } from "./duet-pagination-utils";
describe("duet-pagination", () => {
    describe("shouldDisplayNavigation", () => {
        it("return false when visibleItems are low compared to totalItems", async () => {
            const shouldDisplayNavigationResult = shouldDisplayNavigation(10, 100, 10);
            expect(shouldDisplayNavigationResult).toBe(false);
        });
        it("return true when visibleItems are high compared to totalItems", async () => {
            const shouldDisplayNavigationResult = shouldDisplayNavigation(10, 1000, 10);
            expect(shouldDisplayNavigationResult).toBe(true);
        });
    });
    describe("Edge conditions should appear correctly", () => {
        /**
         * The component should handle situation where take / totals is not an equal number
         * eg 1000 / 30 = 33,3333333
         * and should display 34 page with a fraction of the visible-items viewable
         */
        it("The characters should look correctly when setting un-divisible fractions", async () => {
            const page = await createPage(`
        <div>
          <duet-pagination take="30" visible-items="5" total="1000"></duet-pagination>
        </div>`);
            const pager = await page.find("duet-pagination");
            const paginationLinks = await page.findAll("duet-pagination >>> li.duet-pagination-item duet-button");
            expect(paginationLinks.length).toBe(7); // ( 1 2 3 4 5 … 34 )
            const fwdButton = await page.find("duet-pagination >>> .duet-pagination-link-dots-forward");
            expect(pager).not.toBeNull();
            expect(pager).toHaveClass("hydrated");
            expect(fwdButton.textContent).toBe("…");
            expect(paginationLinks[6].textContent).toBe("34");
            await fwdButton.click();
            const paginationLinksPost = await page.findAll("duet-pagination >>> li.duet-pagination-item duet-button");
            expect(paginationLinksPost.length).toBe(9); // ( 1 … 6 7 8 9 10 … 34 )
            expect(paginationLinksPost[6].textContent).toBe("10");
            expect(paginationLinksPost[7].textContent).toBe("…");
            expect(paginationLinksPost[8].textContent).toBe("34");
            // now that the pager is on second "page" it will have changed the dom elements and re-rendered, we need tog et the bn again
            const newFwdButton = await page.find("duet-pagination >>> .duet-pagination-link-dots-forward");
            await newFwdButton.click();
            const paginationLinksPost2ndClick = await page.findAll("duet-pagination >>> li.duet-pagination-item duet-button");
            expect(paginationLinksPost2ndClick.length).toBe(9); // ( 1 … 11 12 13 14 15 … 34 )
            expect(paginationLinksPost[6].textContent).not.toBe("5.666666666666666");
            expect(paginationLinksPost[6].textContent).toBe("15");
            expect(paginationLinksPost[7].textContent).toBe("…");
            expect(paginationLinksPost[8].textContent).toBe("34");
        });
    });
    describe("fixes", () => {
        it("DUET-765: should not display upper ellipsis in the last take", async () => {
            const page = await createPage(`
        <div>
          <duet-pagination take="5" visible-items="5" total="1000"></duet-pagination>
        </div>`);
            const lastPageButton = await page.find("duet-pagination >>> .duet-pagination-link-jump-forward");
            await lastPageButton.click();
            const paginationLinksPost = await page.findAll("duet-pagination >>> li.duet-pagination-item duet-button");
            expect(paginationLinksPost.map(item => item.textContent)).toEqual(["1", "…", "196", "197", "198", "199", "200"]);
        });
        it("DUET-765: should display upper ellipsis and total buttons except the last take", async () => {
            const page = await createPage(`
        <div>
          <duet-pagination take="5" visible-items="5" total="1000"></duet-pagination>
        </div>`);
            const lastPageButton = await page.find("duet-pagination >>> .duet-pagination-link-jump-forward");
            await lastPageButton.click();
            const jumpBackButton = await page.find("duet-pagination >>> .duet-pagination-link-dots-back");
            await jumpBackButton.click();
            const paginationLinksPost = await page.findAll("duet-pagination >>> li.duet-pagination-item duet-button");
            expect(paginationLinksPost.map(item => item.textContent)).toEqual([
                "1",
                "…",
                "191",
                "192",
                "193",
                "194",
                "195",
                "…",
                "200",
            ]);
        });
        it("DUET-766: should not allow navigation beyond the last page", async () => {
            const page = await createPage(`
        <div>
          <duet-pagination take="5" visible-items="5" total="1000"></duet-pagination>
        </div>`);
            const lastPageButton = await page.find("duet-pagination >>> .duet-pagination-link-jump-forward");
            await lastPageButton.click();
            const jumpBackButton = await page.find("duet-pagination >>> .duet-pagination-link-dots-back");
            await jumpBackButton.click();
            const fwdArrowButton = await page.find("duet-pagination >>> .duet-date-dialog-next");
            await fwdArrowButton.click();
            const paginationLinksPost = await page.findAll("duet-pagination >>> li.duet-pagination-item duet-button");
            expect(paginationLinksPost.map(item => item.textContent)).toEqual(["1", "…", "196", "197", "198", "199", "200"]);
        });
    });
});
