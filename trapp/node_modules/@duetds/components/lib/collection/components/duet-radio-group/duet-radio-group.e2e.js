/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-radio-group", () => {
    it("should render a radio group", async () => {
        const page = await createPage(`<duet-radio-group></duet-radio-group>`);
        const component = await page.find("duet-radio-group");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should associate the tooltip with the legend", async () => {
        const page = await createPage(`<duet-radio-group label="test label" tooltip="some tooltip"></duet-radio-group>`);
        const legend = await page.find("duet-fieldset >>> legend");
        const tooltip = await page.find("duet-tooltip");
        const tooltipInputLabel = await tooltip.getProperty("accessibleInputLabel");
        expect(tooltipInputLabel).not.toBeNull();
        expect(legend.textContent).toBe(tooltipInputLabel);
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-radio-group margin="none"></duet-radio-group>`);
        const element = await page.find(".duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should raise a change event on user interaction, as long as the value is provided", async () => {
        const page = await createPage(`<duet-radio-group>
      <duet-radio value="foo" label="Foo"></duet-radio>
      <duet-radio value="true" label="True"></duet-radio>
      <duet-radio value="false" label="False"></duet-radio>
      <duet-radio value="123" label="Number"></duet-radio>
      <duet-radio value="" label="[empty]"></duet-radio>
    </duet-radio-group>`);
        const component = await page.find("duet-radio-group");
        const radios = await page.findAll("duet-radio-group duet-radio");
        const changeEventSpy = await component.spyOnEvent("duetChange");
        for (const radio of radios) {
            await radio.click();
        }
        expect(changeEventSpy).toHaveReceivedEventTimes(radios.length);
    });
    it("should not raise a change event when the value doesn't change", async () => {
        const page = await createPage(`<duet-radio-group>
      <duet-radio value="foo" label="Foo"></duet-radio>
      <duet-radio value="true" label="True"></duet-radio>
      <duet-radio value="false" label="False"></duet-radio>
      <duet-radio value="123" label="Number"></duet-radio>
      <duet-radio value="" label="[empty]"></duet-radio>
    </duet-radio-group>`);
        const component = await page.find("duet-radio-group");
        const radio = await page.find("duet-radio-group duet-radio");
        const changeEventSpy = await component.spyOnEvent("duetChange");
        await radio.click();
        await radio.click();
        await radio.click();
        expect(changeEventSpy).toHaveReceivedEventTimes(1);
    });
});
