/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-radio", () => {
    it("should render a radio", async () => {
        const page = await createPage(`<duet-radio></duet-radio>`);
        const component = await page.find("duet-radio");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that renders label", async () => {
        const page = await createPage(`<duet-radio label="test"></duet-radio>`);
        const element = await page.find("duet-radio label");
        expect(element.innerText).toEqual("test");
    });
    it("should provide a slot that renders label", async () => {
        const page = await createPage(`<duet-radio><span slot="label">test</span></duet-radio>`);
        const element = await page.find("duet-radio label");
        expect(element.innerText).toEqual("test");
    });
    it("should render HTML in the label when provided as a slotted content", async () => {
        const page = await createPage(`<duet-radio><span slot="label">test <strong>HTML!</strong></span></duet-radio>`);
        const element = await page.find("duet-radio label strong");
        expect(element).not.toBeNull();
    });
    it("should prioritize the content from the label slot when both the slot and the attribute are present", async () => {
        const page = await createPage(`<duet-radio label="Label wins"><span slot="label">Slot wins</span></duet-radio>`);
        const element = await page.find("duet-radio label");
        expect(element.innerText).toEqual("Slot wins");
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-radio margin="none"></duet-radio>`);
        const element = await page.find(".duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should provide a property that renders aria-controls", async () => {
        const page = await createPage(`<duet-radio accessible-controls="test"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("aria-controls")).toEqual("test");
    });
    it("should provide a property that renders aria-activedescendant", async () => {
        const page = await createPage(`<duet-radio accessible-active-descendant="test"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("aria-activedescendant")).not.toBeNull();
    });
    it("should provide a property that renders aria-owns", async () => {
        const page = await createPage(`<duet-radio accessible-owns="test"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("aria-owns")).not.toBeNull();
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-radio theme="turva"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio-container");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that makes the radio disabled", async () => {
        const page = await createPage(`<duet-radio disabled></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("disabled")).not.toBeNull();
    });
    it("should provide a property that adds an ID for the radio", async () => {
        const page = await createPage(`<duet-radio identifier="test"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("id")).toEqual("test");
    });
    it("should provide a property that adds name for the radio", async () => {
        const page = await createPage(`<duet-radio name="test"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("name")).not.toBeNull();
    });
    it("should provide a property that adds role for the radio", async () => {
        const page = await createPage(`<duet-radio role="test"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("role")).not.toBeNull();
    });
    it("should provide a property that checks the radio", async () => {
        const page = await createPage(`<duet-radio checked></duet-radio>`);
        const element = (await page.find("duet-radio .duet-radio"));
        expect(element.checked).not.toBeNull();
    });
    it("should provide a property that adds value for the radio", async () => {
        const page = await createPage(`<duet-radio value="test"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("value")).not.toBeNull();
    });
    it("should provide a property that adds group direction", async () => {
        const page = await createPage(`<duet-radio group-direction="horizontal"></duet-radio>`);
        const element = await page.find("duet-radio");
        expect(element).toHaveClass("horizontal");
    });
    it("should provide a property that adds group disabled", async () => {
        const page = await createPage(`<duet-radio group-disabled></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("disabled")).not.toBeNull();
    });
    it("should provide a property that changes tabindex of checkbox", async () => {
        const page = await createPage(`<duet-radio accessible-index="-1"></duet-radio>`);
        const element = await page.find("duet-radio .duet-radio");
        expect(element.getAttribute("tabindex")).not.toBeNull();
    });
    it("should only raise an event on user interaction, not when changing checked property programmatically", async () => {
        const page = await createPage(`<duet-radio label="Checked" value="test"></duet-radio>`);
        const choice = await page.find("duet-radio");
        const changeEventSpy = await choice.spyOnEvent("duetChange");
        choice.setProperty("checked", true);
        await page.waitForChanges();
        expect(changeEventSpy).not.toHaveReceivedEvent();
        choice.setProperty("checked", false);
        await page.waitForChanges();
        await choice.click();
        expect(changeEventSpy).toHaveReceivedEvent();
    });
    it("should raise an event on focus", async () => {
        const page = await createPage(`<duet-radio label="Checked" value="test"></duet-radio>`);
        const radio = await page.find("duet-radio");
        const focusEventSpy = await radio.spyOnEvent("duetFocus");
        await page.keyboard.press("Tab");
        await page.waitForChanges();
        expect(focusEventSpy).toHaveReceivedEvent();
    });
    it("should raise an event on blur", async () => {
        const page = await createPage(`
      <duet-radio label="Checked" value="test"></duet-radio>
      <button>another focusable element</button>
    `);
        const radio = await page.find("duet-radio");
        const blurEventSpy = await radio.spyOnEvent("duetFocus");
        // focus then blur the checkbox
        await page.keyboard.press("Tab");
        await page.keyboard.press("Tab");
        await page.waitForChanges();
        expect(blurEventSpy).toHaveReceivedEvent();
    });
});
