/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-select", () => {
    const setSelectItems = (el) => {
        el.items = [
            { label: "Helsinki", value: "1" },
            { label: "Tampere", value: "2" },
            { label: "Vantaa", value: "3" },
            { label: "Espoo", value: "4" },
        ];
    };
    it("should render a select", async () => {
        const page = await createPage(`<duet-select></duet-select>`);
        const component = await page.find("duet-select");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that renders label", async () => {
        const page = await createPage(`<duet-select label="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select duet-label label");
        expect(element.innerText).toEqual("test");
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-select margin="none"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find(".duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should provide a property that renders aria-controls", async () => {
        const page = await createPage(`<duet-select accessible-controls="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select");
        expect(element).toEqualAttribute("aria-controls", "test");
    });
    it("should provide a property that renders aria-activedescendant", async () => {
        const page = await createPage(`<duet-select accessible-active-descendant="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select");
        expect(element.getAttribute("aria-activedescendant")).not.toBeNull();
    });
    it("should provide a property that renders aria-owns", async () => {
        const page = await createPage(`<duet-select accessible-owns="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select");
        expect(element.getAttribute("aria-owns")).not.toBeNull();
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-select theme="turva"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select .duet-select-container");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that expands the select to fill 100% width", async () => {
        const page = await createPage(`<duet-select expand></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select");
        expect(element).toHaveClass("duet-expand");
    });
    it("should provide a property that makes the select disabled", async () => {
        const page = await createPage(`<duet-select disabled></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select");
        expect(element.getAttribute("disabled")).not.toBeNull();
    });
    it("should provide a property that adds an ID for the select", async () => {
        const page = await createPage(`<duet-select identifier="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select");
        expect(element).toEqualAttribute("id", "test");
    });
    it("should provide a property that makes the label hidden", async () => {
        const page = await createPage(`<duet-select label-hidden></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select .duet-select-container");
        expect(element).toHaveClass("duet-label-hidden");
    });
    it("should provide a property that adds name for the select", async () => {
        const page = await createPage(`<duet-select name="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select");
        expect(element.getAttribute("name")).not.toBeNull();
    });
    it("should provide a property that adds role for the select", async () => {
        const page = await createPage(`<duet-select role="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select");
        expect(element.getAttribute("role")).not.toBeNull();
    });
    it("should provide a property that sets the select items", async () => {
        const page = await createPage(`<duet-select></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select select option:first-child");
        expect(element).toEqualAttribute("value", "1");
    });
    it("should provide a property that sets tooltip", async () => {
        const page = await createPage(`<duet-select tooltip="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select duet-tooltip");
        expect(element).not.toBeNull();
    });
    it("should associate the tooltip with the label", async () => {
        const page = await createPage(`<duet-select label="test label" tooltip="test"></duet-select>`);
        const label = await page.find("label");
        const tooltip = await page.find("duet-tooltip");
        const tooltipInputLabel = await tooltip.getProperty("accessibleInputLabel");
        expect(tooltipInputLabel).not.toBeNull();
        expect(label.textContent).toBe(tooltipInputLabel);
    });
    it("should not render tooltip if the property isnâ€™t used", async () => {
        const page = await createPage(`<duet-select id="test"></duet-select>`);
        await page.$eval("duet-select", setSelectItems);
        await page.waitForChanges();
        const element = await page.find("duet-select duet-tooltip");
        expect(element).toBeNull();
    });
    it("should allow options to be grouped", async () => {
        const page = await createPage(`<duet-select id="test"></duet-select>`);
        await page.$eval("duet-select", (el) => {
            el.items = [
                { label: "Helsinki", value: "1" },
                {
                    label: "Grouped options",
                    options: [
                        { label: "Tampere", value: "2" },
                        { label: "Vantaa", value: "3" },
                    ],
                },
                { label: "Espoo", value: "4" },
            ];
        });
        await page.waitForChanges();
        const optgroup = await page.find("duet-select optgroup");
        expect(optgroup).toEqualAttribute("label", "Grouped options");
    });
    it("should allow for options and optgroups to be disabled", async () => {
        const page = await createPage(`<duet-select id="test"></duet-select>`);
        await page.$eval("duet-select", (el) => {
            el.items = [
                { label: "Helsinki", value: "1", disabled: true },
                {
                    label: "Grouped options",
                    disabled: true,
                    options: [
                        { label: "Tampere", value: "2" },
                        { label: "Vantaa", value: "3" },
                    ],
                },
                { label: "Espoo", value: "4" },
            ];
        });
        await page.waitForChanges();
        const optgroup = await page.find("duet-select optgroup");
        const option = await page.find("duet-select option");
        expect(option).toEqualAttribute("value", "1");
        expect(option).toHaveAttribute("disabled");
        expect(optgroup).toHaveAttribute("disabled");
    });
    it("supports passing items as a JSON string", async () => {
        const items = [
            { label: "Helsinki", value: "1" },
            { label: "Tampere", value: "2" },
            { label: "Vantaa", value: "3" },
            { label: "Espoo", value: "4" },
        ];
        const page = await createPage(`<duet-select id="test" items='${JSON.stringify(items)}'></duet-select>`);
        const options = await page.findAll("duet-select option");
        expect(options.length).toBe(items.length);
        options.forEach((option, i) => {
            expect(option).toEqualAttribute("value", items[i].value);
            expect(option).toEqualText(items[i].label);
        });
    });
    it("should automatically refresh itself when content changes", async () => {
        const page = await createPage(`<duet-select></duet-select>`);
        await page.$eval("duet-select", (el) => {
            el.items = [
                { label: "Helsinki", value: "1" },
                { label: "Tampere", value: "2" },
                { label: "Vantaa", value: "3" },
                { label: "Espoo", value: "4" },
            ];
        });
        const element = await page.find("duet-select");
        // should be updated when setting the *attribute*
        element.setAttribute("items", '[{ "label": "test", "value": "#" }]');
        await page.waitForChanges();
        const test = await page.find("duet-select option");
        expect(test).toEqualText("test");
        // should also be updated when setting the label *property*
        element.setProperty("items", [{ label: "test 2", value: "#" }]);
        await page.waitForChanges();
        expect(test).toEqualText("test 2");
    });
});
