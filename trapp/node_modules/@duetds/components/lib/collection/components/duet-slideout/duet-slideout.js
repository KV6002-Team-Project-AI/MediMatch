/*!
 * Built with Duet Design System
 */
import { Build, h, Host } from "@stencil/core";
import { disableBodyScroll, enableBodyScroll } from "body-scroll-lock/lib/bodyScrollLock.es6.js";
import { hasSlot } from "../../common";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { focusElement, FocusGuard } from "../../utils/focus-utils";
import { isEscapeKey } from "../../utils/keyboard-utils";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
import { Teleport } from "../../utils/teleport";
import { getColorByName } from "../../utils/token-utils";
/**
 * @slot sticky-header - Content will be fixed to the top of the modal when scrolling.
 */
export class DuetSlideout {
    constructor() {
        this.exitLangObject = {
            en: "Exit the menu",
            fi: "Poistu valikosta",
            sv: "Avsluta menyn",
        };
        this.topLevelOpenMenuBarLangObject = {
            en: "Exit this menu to find top level items",
            fi: "Poistu tästä valikosta löytääksesi ylätason kohteet",
            sv: "Stäng den här menyn för att hitta objekt på toppnivå",
        };
        this.isSafariBrowser = /^((?!chrome|android).)*safari/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent);
        this.hasStickyHeaderSlot = false;
        this.handleBodyScrolling = () => {
            if (this.displaying && this.open) {
                disableBodyScroll(this.dialog, { reserveScrollBarGap: true });
            }
            else {
                enableBodyScroll(this.dialog);
            }
        };
        this.setOpenButton = (element) => {
            if (!element) {
                return;
            }
            try {
                const button = element;
                button.accessiblePopup = "true";
                button.accessibleExpanded = false;
                this.openButton = button;
            }
            catch (_e) { }
        };
        this.openButtonEventListener = (e) => {
            e.stopPropagation();
            e.preventDefault();
            this.onClick(e);
        };
        this.getOpenPanel = () => {
            return this.element.querySelector("duet-slideout-panel[open]");
        };
        this.toggleMenu = (e) => {
            this.open = !this.open;
            if (this.openButton) {
                this.openButton.accessibleExpanded = this.open;
            }
            this.duetSlideoutEvent.emit({
                originalEvent: e,
                data: { element: this.element, open: this.open },
                component: "duet-slideout",
            });
            if (this.open) {
                const openPanel = this.getOpenPanel();
                this.teleport.go(true);
                if (openPanel) {
                    openPanel.setFocus();
                    this.handleBodyScrolling();
                }
                else {
                    setTimeout(() => {
                        this.closeButton.focus();
                        this.handleBodyScrolling();
                    }, 200);
                }
            }
            else {
                setTimeout(() => {
                    focusElement(this.openButton);
                    this.handleBodyScrolling();
                    this.teleport.resume();
                }, 200);
            }
        };
        this.bgOnClick = (e) => {
            if (this.open) {
                this.toggleMenu(e);
            }
        };
        this.onClick = (e) => {
            this.toggleMenu(e);
        };
        this.language = getLanguage();
        this.displaying = false;
        this.openPanel = false;
        this.theme = "";
        this.accessibleRole = "menubar";
        this.open = false;
        this.opener = undefined;
        this.backgroundColor = "gray-lightest";
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        this.hasStickyHeaderSlot = hasSlot(this.element, "sticky-header");
        this.teleport = new Teleport(this.element);
    }
    connectedCallback() {
        connectLanguageChangeObserver(this);
        if (Build.isServer) {
            return;
        }
        if (this.opener) {
            this.setOpenButton(document.getElementById(this.opener));
            this.openButton.addEventListener("click", this.openButtonEventListener);
        }
        this.mutationObserver = new MutationObserver(() => {
            this.openPanel = !!this.getOpenPanel();
        });
        this.mutationObserver.observe(this.element, { childList: true, attributeFilter: ["open"], subtree: true });
    }
    componentDidRender() {
        if (Build.isServer) {
            return;
        }
        // intersection observer is here to observe when the dialog is actually visible and when its not
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
        this.intersectionObserver = new IntersectionObserver(entries => {
            this.displaying = entries[0].isIntersecting;
            this.handleBodyScrolling();
        });
        // this.dialog can't be observed before rendering because its not available yet
        this.intersectionObserver.observe(this.dialog);
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
        enableBodyScroll(this.dialog);
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
        if (this.openButton) {
            this.openButton.removeEventListener("click", this.openButtonEventListener);
        }
    }
    /**
     * Component event handling.
     */
    handleKeyUp(ev) {
        // When Esc is pressed
        if (isEscapeKey(ev)) {
            if (this.open) {
                this.toggleMenu(ev);
            }
        }
    }
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    async setFocus(options) {
        var _a;
        (_a = this.openButton) === null || _a === void 0 ? void 0 : _a.focus(options);
    }
    /**
     * Toggles the slideout.
     */
    async toggle() {
        const event = new CustomEvent("toggle");
        this.toggleMenu(event);
        setTimeout(() => {
            this.closeButton.focus();
        }, 200);
    }
    /**
     * Shows the slideout. Additionally saves the element (DuetButton or DuetMenuBarButton) that triggered
     * the slideout so that focus can be moved back to this specific element when
     * the slideout dialog is closed.
     */
    async show() {
        if (this.open) {
            return;
        }
        this.setOpenButton(document.activeElement);
        this.toggleMenu(new CustomEvent("toggle"));
    }
    /**
     * Hides the slideout dialog and puts focus back to the original element
     * that triggered the slideout (if we’re still in the same view).
     */
    async hide() {
        if (!this.open) {
            return;
        }
        this.toggleMenu(new CustomEvent("toggle"));
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        const styles = {
            background: getColorByName(this.backgroundColor, this.theme),
        };
        const topLevelOpenMenuBarTranslation = getLocaleString(this.topLevelOpenMenuBarLangObject);
        const exitTranslation = getLocaleString(this.exitLangObject);
        return (h(Host, null, h("div", { class: { "duet-slideout": true, "duet-theme-turva": this.theme === "turva" } }, h("div", { class: {
                "desktop-bg": true,
                hidden: !this.open,
            }, onClick: this.bgOnClick }), h("div", { ref: element => (this.dialog = element), tabindex: "-1", role: "dialog", id: "dialog", "aria-labelledby": "button", "aria-modal": this.isSafariBrowser ? false : true, "aria-flowto": "slot-container", class: {
                dialog: true,
                hidden: !this.open,
            }, style: styles }, h(FocusGuard, { moveFocusTo: this.closeButton }), h("div", { class: { "top-container": true, "has-sticky-header-slot": this.hasStickyHeaderSlot } }, h("div", { class: "top" }, h("button", { ref: element => (this.closeButton = element), "aria-haspopup": "dialog", "aria-controls": "dialog", "aria-expanded": this.open ? "true" : "false", "aria-label": `${exitTranslation}`, type: "button", class: {
                "slideout-close": true,
                active: this.open,
            }, onClick: this.onClick, inert: this.openPanel }, h("duet-icon", { name: "navigation-close", size: "small", margin: "none", color: "secondary" }))), h("div", { class: "sticky-header" }, h("slot", { name: "sticky-header" }))), h("div", { id: "slot-container", role: this.accessibleRole, "aria-label": this.openPanel ? topLevelOpenMenuBarTranslation : null, class: {
                items: true,
            } }, h("slot", null)), h(FocusGuard, { moveFocusTo: this.closeButton })))));
    }
    static get is() { return "duet-slideout"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["duet-slideout.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["duet-slideout.css"]
        };
    }
    static get properties() {
        return {
            "theme": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetTheme",
                    "resolved": "\"\" | \"default\" | \"turva\"",
                    "references": {
                        "DuetTheme": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTheme"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Theme."
                },
                "attribute": "theme",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "accessibleRole": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Role of the slot's container. By default this is menubar and the slideout should by default contain menuitems."
                },
                "attribute": "accessible-role",
                "reflect": false,
                "defaultValue": "\"menubar\""
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Open"
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "opener": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Id of the DuetMenuBarButton or DuetButton that opens the menu."
                },
                "attribute": "opener",
                "reflect": false
            },
            "backgroundColor": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetColor",
                    "resolved": "string",
                    "references": {
                        "DuetColor": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetColor"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Background color. Use one of the color tokens."
                },
                "attribute": "background-color",
                "reflect": true,
                "defaultValue": "\"gray-lightest\""
            }
        };
    }
    static get states() {
        return {
            "language": {},
            "displaying": {},
            "openPanel": {}
        };
    }
    static get events() {
        return [{
                "method": "duetSlideoutEvent",
                "name": "duetSlideoutEvent",
                "bubbles": true,
                "cancelable": true,
                "composed": true,
                "docs": {
                    "tags": [],
                    "text": "Event raised when the menu has been opened. You can prevent the\ndefault browser functionality by calling **event.detail.originalEvent.preventDefault()**\ninside your listener. Additionally, the passed data is available via **event.detail.data**."
                },
                "complexType": {
                    "original": "DuetSlideoutEventDetails",
                    "resolved": "{ originalEvent: Event; data: { element: HTMLElement; open: boolean; }; component: \"duet-slideout\"; }",
                    "references": {
                        "DuetSlideoutEventDetails": {
                            "location": "local",
                            "path": "/Users/mgibas/workspace/duet/packages/components/src/components/duet-slideout/duet-slideout.tsx",
                            "id": "src/components/duet-slideout/duet-slideout.tsx::DuetSlideoutEventDetails"
                        }
                    }
                }
            }];
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "(options?: FocusOptions) => Promise<void>",
                    "parameters": [{
                            "name": "options",
                            "type": "FocusOptions",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "FocusOptions": {
                            "location": "global",
                            "id": "global::FocusOptions"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus. Use this method instead of the global focus().",
                    "tags": []
                }
            },
            "toggle": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Toggles the slideout.",
                    "tags": []
                }
            },
            "show": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Shows the slideout. Additionally saves the element (DuetButton or DuetMenuBarButton) that triggered\nthe slideout so that focus can be moved back to this specific element when\nthe slideout dialog is closed.",
                    "tags": []
                }
            },
            "hide": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Hides the slideout dialog and puts focus back to the original element\nthat triggered the slideout (if we\u2019re still in the same view).",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get listeners() {
        return [{
                "name": "keyup",
                "method": "handleKeyUp",
                "target": "window",
                "capture": false,
                "passive": false
            }];
    }
}
