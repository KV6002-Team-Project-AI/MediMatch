/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-step", () => {
    let page;
    let step;
    let button;
    let region;
    beforeEach(async () => {
        page = await createPage(`<duet-step step-index="0" state="complete"><h1>hello world</h1></duet-step>`);
        step = await page.find("duet-step");
        button = await page.find("duet-step [role=button]");
        region = await page.find("duet-step [role=region]");
    });
    it("renders", async () => {
        expect(step).toHaveClass("hydrated");
    });
    describe("props", () => {
        it("allows a heading to be set", async () => {
            await page.$eval("duet-step", (el) => {
                el.heading = "Test heading";
            });
            await page.waitForChanges();
            expect(button).toEqualText("Test heading");
        });
    });
    // see: https://www.w3.org/TR/wai-aria-practices-1.1/examples/accordion/accordion.html#rps_label
    //this now superceeds the previous example: https://www.w3.org/TR/wai-aria-practices-1.2/examples/accordion/accordion.html#rps_label
    describe("a11y requirements", () => {
        it("should have a button and a region", async () => {
            expect(button).not.toBeNull();
            expect(region).not.toBeNull();
        });
        it("should have aria-expanded and aria-disabled attributes on button", async () => {
            expect(button).toHaveAttribute("aria-expanded");
            expect(button).toHaveAttribute("aria-disabled");
        });
        it("should have ids on button and region", async () => {
            expect(button.id).toBeDefined();
            expect(region.id).toBeDefined();
        });
        it("region and button should be associated with one another", async () => {
            expect(button.getAttribute("aria-controls")).toEqual(region.id);
            expect(region.getAttribute("aria-labelledby")).toEqual(button.id);
        });
        it("should be collapsed and button enabled when step is complete", async () => {
            step.setProperty("state", "complete");
            await page.waitForChanges();
            expect(button.getAttribute("aria-expanded")).toEqual("false");
            expect(button.getAttribute("aria-disabled")).toEqual("false");
        });
        it("should should be expanded and button disabled when step is active", async () => {
            step.setProperty("state", "current");
            await page.waitForChanges();
            expect(button.getAttribute("aria-expanded")).toEqual("true");
            expect(button.getAttribute("aria-disabled")).toEqual("true");
        });
        it("should be collapsed and button disabled when step is incomplete", async () => {
            step.setProperty("state", "incomplete");
            await page.waitForChanges();
            expect(button.getAttribute("aria-expanded")).toEqual("false");
            expect(button.getAttribute("aria-disabled")).toEqual("true");
        });
    });
    describe("events", () => {
        it("raises an event when the button of complete step is clicked", async () => {
            await page.$eval("duet-step", (elm) => {
                elm.stepIndex = 0;
                elm.state = "complete";
            });
            const duetStepClick = await step.spyOnEvent("duetStepClick");
            button.click();
            await page.waitForEvent("duetStepClick");
            await page.waitForChanges();
            expect(duetStepClick).toHaveReceivedEventTimes(1);
            expect(duetStepClick.lastEvent.detail).toEqual({
                stepIndex: 0,
                component: "duet-step",
                originalEvent: expect.any(Object),
            });
        });
        it("does not raise an event if button of non-complete step is clicked", async () => {
            await page.$eval("duet-step", (elm) => {
                elm.stepIndex = 0;
                elm.state = "current";
            });
            const duetStepClick = await step.spyOnEvent("duetStepClick");
            button.click();
            await page.waitForChanges();
            expect(duetStepClick).toHaveReceivedEventTimes(0);
        });
    });
});
