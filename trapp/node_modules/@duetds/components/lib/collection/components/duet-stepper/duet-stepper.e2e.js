/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-stepper", () => {
    let page;
    let stepper;
    let steps;
    beforeEach(async () => {
        page = await createPage(`
      <duet-stepper>
        <duet-step heading="First step">
          <duet-input label="First input" expand></duet-input>
          <duet-button variation="primary">Next</duet-button>
        </duet-step>

        <duet-step heading="Second step">
          <duet-input label="Second input" expand></duet-input>
          <duet-button variation="primary">Next</duet-button>
        </duet-step>

        <duet-step heading="Third step">
          <duet-input label="Third input" expand></duet-input>
        </duet-step>
      </duet-stepper>

      <script>
        const stepper = document.querySelector("duet-stepper")
        const nextButtons = document.querySelectorAll("duet-button")

        nextButtons.forEach(button => button.addEventListener("click", () => {
          stepper.selected++
        }))
        stepper.addEventListener("duetStepChange", e => {
          stepper.selected = e.detail.toStep
        })
      </script>
    `);
        stepper = await page.find("duet-stepper");
        steps = await page.findAll("duet-step");
    });
    it("renders", async () => {
        expect(stepper).toHaveClass("hydrated");
    });
    describe("props", () => {
        it("allows you to set an accessible aria-live label", async () => {
            await page.$eval("duet-stepper", (el) => {
                el.accessibleLive = "Step {current} of {total}";
            });
            await page.waitForChanges();
            const element = await page.find("duet-stepper >>> [aria-live]");
            expect(element).toEqualText("Step 1 of 3");
        });
    });
    it("correctly numbers the steps", async () => {
        const stepIndexes = await Promise.all(steps.map(step => step.getProperty("stepIndex")));
        expect(stepIndexes).toEqual([0, 1, 2]);
    });
    it("allows you to progress through steps", async () => {
        const nextButtons = await page.findAll("duet-button");
        let stepStates = await Promise.all(steps.map(step => step.getProperty("state")));
        expect(stepStates).toEqual(["current", "incomplete", "incomplete"]);
        // go to second step
        await nextButtons[0].click();
        stepStates = await Promise.all(steps.map(step => step.getProperty("state")));
        expect(stepStates).toEqual(["complete", "current", "incomplete"]);
        // go to third step
        await nextButtons[1].click();
        stepStates = await Promise.all(steps.map(step => step.getProperty("state")));
        expect(stepStates).toEqual(["complete", "complete", "current"]);
    });
    it("allows you to return to a previous step by clicking on the step heading", async () => {
        // go to second step
        const nextButton = await page.find("duet-button");
        await nextButton.click();
        let stepStates = await Promise.all(steps.map(step => step.getProperty("state")));
        expect(stepStates).toEqual(["complete", "current", "incomplete"]);
        // go back to first step
        const heading = await page.find("duet-step [role=button]");
        await heading.click();
        stepStates = await Promise.all(steps.map(step => step.getProperty("state")));
        expect(stepStates).toEqual(["current", "incomplete", "incomplete"]);
    });
});
