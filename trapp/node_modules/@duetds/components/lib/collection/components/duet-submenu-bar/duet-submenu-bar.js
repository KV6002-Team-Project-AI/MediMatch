/*!
 * Built with Duet Design System
 */
import { media_query_large } from "@duetds/tokens/lib/tokens.json";
import { h, Host } from "@stencil/core";
import { disableBodyScroll, enableBodyScroll } from "body-scroll-lock/lib/bodyScrollLock.es6.js";
import { inheritGlobalTheme } from "../../common/themeable-component";
export class DuetSubmenuBar {
    constructor() {
        this.mql = [window.matchMedia(media_query_large.replace(/'/g, ""))];
        this.boundMqlFunctions = [];
        this.handleMobileView = () => {
            if (this.mql[0].matches) {
                this.mobile = false;
                this.enableBodyScroll();
            }
            else {
                this.mobile = true;
                if (!this.bodyScroll) {
                    this.disableBodyScroll();
                }
            }
        };
        this.onClick = () => {
            this.open = !this.open;
        };
        this.enableBodyScroll = () => {
            if (this.nav) {
                enableBodyScroll(this.nav);
            }
            if (this.itemsContainer) {
                enableBodyScroll(this.itemsContainer);
            }
        };
        this.disableBodyScroll = () => {
            if (this.nav) {
                disableBodyScroll(this.nav, { reserveScrollBarGap: true });
            }
            if (this.itemsContainer) {
                disableBodyScroll(this.itemsContainer, { reserveScrollBarGap: true });
            }
        };
        this.checkIfHasItems = () => {
            const hasDropdownLinks = !!this.element.querySelector("duet-submenu-bar-dropdown-link");
            const hasLinks = !!this.element.querySelector("duet-submenu-bar-link");
            return hasDropdownLinks || hasLinks;
        };
        this.mobile = true;
        this.bodyScroll = true;
        this.theme = "";
        this.open = false;
        this.accessibleLabel = undefined;
    }
    watchOpenStateHandler(newValue) {
        const open = newValue;
        if (open) {
            this.bodyScroll = false;
            this.disableBodyScroll();
        }
        else {
            this.enableBodyScroll();
            this.bodyScroll = true;
        }
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        const children = Array.from(this.element.children).filter(child => !child.hasAttribute("slot"));
        for (const child of children) {
            child.setAttribute("role", "listitem");
        }
    }
    connectedCallback() {
        this.nav = document.querySelector("duet-nav > [slot='mobile']");
        this.hasItems = this.checkIfHasItems();
        this.handleMobileView();
        for (let i = 0; i < this.mql.length; i++) {
            // addEventListener is not available in Stencil hydrate
            if (this.mql[i].addEventListener) {
                const bound = this.handleMobileView.bind(this);
                this.mql[i].addEventListener("change", bound);
                this.boundMqlFunctions[i] = bound;
            }
        }
    }
    disconnectedCallback() {
        for (let i = 0; i < this.mql.length; i++) {
            // removeEventListener is not available in Stencil hydrate
            if (this.mql[i].removeEventListener) {
                this.mql[i].removeEventListener("change", this.boundMqlFunctions[i]);
            }
        }
        this.boundMqlFunctions = [];
        this.enableBodyScroll();
    }
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    async setFocus(options) {
        this.button.focus(options);
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        return (h(Host, null, h("nav", { class: { "duet-submenu-bar": true, "duet-theme-turva": this.theme === "turva" }, "aria-label": this.accessibleLabel }, this.hasItems && (h("button", { ref: element => (this.button = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", id: "button", type: "button", class: {
                active: this.open,
            }, onClick: this.onClick }, h("div", { class: "label" }, h("slot", { name: "label" }), h("duet-icon", { theme: this.theme, class: "caret", name: "action-arrow-down-small", margin: "none", size: "xxx-small", color: "currentColor" })))), h("div", { class: {
                "menu-container": true,
                hidden: !this.open,
            }, role: "presentation" }, h("div", { role: this.mobile ? "menu" : null, id: "menu", "aria-labelledby": this.mobile ? "button" : null, "aria-expanded": this.mobile ? (this.open ? "true" : "false") : null, class: {
                items: true,
                hidden: !this.open,
            }, ref: element => (this.itemsContainer = element) }, h("div", { class: "list", role: this.mobile ? "presentation" : "list" }, h("slot", null), h("div", { class: "list-padding" }))), h("div", { class: "mobile-background" })))));
    }
    static get is() { return "duet-submenu-bar"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() {
        return {
            "$": ["duet-submenu-bar.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["duet-submenu-bar.css"]
        };
    }
    static get properties() {
        return {
            "theme": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetTheme",
                    "resolved": "\"\" | \"default\" | \"turva\"",
                    "references": {
                        "DuetTheme": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTheme"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Theme."
                },
                "attribute": "theme",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "open": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Open"
                },
                "attribute": "open",
                "reflect": true,
                "defaultValue": "false"
            },
            "accessibleLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Adds accessible label for the button that is only shown for screen readers.\nTypically, this label text replaces the visible text on the button for\nusers who use assistive technology."
                },
                "attribute": "accessible-label",
                "reflect": false
            }
        };
    }
    static get states() {
        return {
            "mobile": {},
            "bodyScroll": {}
        };
    }
    static get methods() {
        return {
            "setFocus": {
                "complexType": {
                    "signature": "(options?: FocusOptions) => Promise<void>",
                    "parameters": [{
                            "name": "options",
                            "type": "FocusOptions",
                            "docs": ""
                        }],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        },
                        "FocusOptions": {
                            "location": "global",
                            "id": "global::FocusOptions"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "Sets focus. Use this method instead of the global focus().",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "open",
                "methodName": "watchOpenStateHandler"
            }];
    }
}
