/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-tab-group", () => {
    it("should render a tab", async () => {
        const page = await createPage(`
      <duet-tab-group>
        <duet-tab label="test"></duet-tab>
      </duet-tab-group>
    `);
        const component = await page.find("duet-tab-group");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`
      <duet-tab-group theme="turva">
        <duet-tab label="test"></duet-tab>
      </duet-tab-group>
    `);
        const element = await page.find("duet-tab-group >>> .duet-tab-group");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`
      <duet-tab-group margin="none">
        <duet-tab label="test"></duet-tab>
        <duet-tab label="test2"></duet-tab>
      </duet-tab-group>
    `);
        const element = await page.find("duet-tab-group >>> .duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should provide a property that removes the padding of the component", async () => {
        const page = await createPage(`
      <duet-tab-group padding="none">
        <duet-tab label="test"></duet-tab>
        <duet-tab label="test2"></duet-tab>
      </duet-tab-group>
    `);
        const element = await page.find("duet-tab-group >>> .duet-p-0");
        expect(element).not.toBeNull();
    });
    it("creates unique IDs for for all buttons and panels", async () => {
        const page = await createPage(`
      <duet-tab-group>
        <duet-tab label="Outer 1" selected>Outer tab 1</duet-tab>
        <duet-tab label="Outer 2">
          Outer tab 2
          <duet-tab-group>
            <duet-tab label="Inner 1" selected>Inner tab 1</duet-tab>
            <duet-tab label="Inner 2">Inner tab 2</duet-tab>
            <duet-tab label="Inner 3">Inner tab 3</duet-tab>
          </duet-tab-group>
        </duet-tab>
        <duet-tab label="Outer 3">Outer tab 3</duet-tab>
      </duet-tab-group>
    `);
        const buttons = await page.findAll(`duet-tab-group >>> [role="tablist"] button`);
        const panels = await page.findAll(`duet-tab-group >>> duet-tab`);
        for (const button of buttons) {
            const matches = await page.findAll(`duet-tab-group >>> #${button.id}`);
            expect(matches.length).toBe(1);
        }
        for (const panel of panels) {
            const matches = await page.findAll(`duet-tab-group >>> #${panel.id}`);
            expect(matches.length).toBe(1);
        }
    });
    it("should propagate accessible-description to internal button element", async () => {
        const ariaString = "accessible-description-test";
        const page = await createPage(`
      <duet-tab-group variation="plain">
        <duet-tab label="test2" class="test" accessible-description="${ariaString}">Outer tab 1 content</duet-tab>
      </duet-tab-group>
    `);
        await page.waitForChanges();
        const testString = await page.evaluate(() => {
            const element = document
                .querySelector("duet-tab-group")
                .shadowRoot.querySelector("button")
                .getAttribute("aria-description");
            return element;
        });
        expect(testString).toEqualText(ariaString);
    });
    describe("events", () => {
        it("should raise events on tab change", async () => {
            const page = await createPage(`
        <duet-tab-group padding="none">
          <duet-tab label="test" class="test1"></duet-tab>
          <duet-tab label="test2"></duet-tab>
        </duet-tab-group>
      `);
            const tabGroup = await page.find("duet-tab-group");
            const tabs = await page.findAll("duet-tab-group >>> button");
            const tab = tabs.find(t => t.innerText === "test2");
            const changeSpy = await tabGroup.spyOnEvent("duetChange");
            const tabChangeSpy = await tabGroup.spyOnEvent("duetTabChange");
            await tab.click();
            await page.waitForChanges();
            const expectedEvent = { value: 1, component: "duet-tab-group" };
            expect(changeSpy).toHaveReceivedEventDetail(expectedEvent);
            expect(tabChangeSpy).toHaveReceivedEventDetail(expectedEvent);
        });
    });
});
