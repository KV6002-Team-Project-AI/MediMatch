/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
describe("duet-toggle", () => {
    it("should render a toggle", async () => {
        const page = await createPage(`<duet-toggle></duet-toggle>`);
        const component = await page.find("duet-toggle");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that removes the margin of the component", async () => {
        const page = await createPage(`<duet-toggle margin="none"></duet-toggle>`);
        const element = await page.find(".duet-m-0");
        expect(element).not.toBeNull();
    });
    it("should provide a property that renders aria-controls", async () => {
        const page = await createPage(`<duet-toggle accessible-controls="test"></duet-toggle>`);
        const element = await page.find("duet-toggle input");
        expect(element.getAttribute("aria-controls")).toEqual("test");
    });
    it("should provide a property that renders aria-activedescendant", async () => {
        const page = await createPage(`<duet-toggle accessible-active-descendant="test"></duet-toggle>`);
        const element = await page.find("duet-toggle input");
        expect(element.getAttribute("aria-activedescendant")).not.toBeNull();
    });
    it("should provide a property that renders aria-owns", async () => {
        const page = await createPage(`<duet-toggle accessible-owns="test"></duet-toggle>`);
        const element = await page.find("duet-toggle input");
        expect(element.getAttribute("aria-owns")).not.toBeNull();
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-toggle theme="turva"></duet-toggle>`);
        const element = await page.find("duet-toggle .duet-toggle");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that adds an ID for the toggle", async () => {
        const page = await createPage(`<duet-toggle identifier="test"></duet-toggle>`);
        const element = await page.find("duet-toggle input");
        expect(element.getAttribute("id")).toEqual("test");
    });
    it("should provide a property that adds name for the toggle", async () => {
        const page = await createPage(`<duet-toggle name="test"></duet-toggle>`);
        const element = await page.find("duet-toggle input");
        expect(element.getAttribute("name")).not.toBeNull();
    });
    it("should provide a property that adds role for the toggle", async () => {
        const page = await createPage(`<duet-toggle role="test"></duet-toggle>`);
        const element = await page.find("duet-toggle input");
        expect(element.getAttribute("role")).not.toBeNull();
    });
    it("should provide a property that checks the toggle", async () => {
        const page = await createPage(`<duet-toggle checked></duet-toggle>`);
        const element = (await page.find("duet-toggle input"));
        expect(element.checked).not.toBeNull();
    });
    it("should provide a property that adds value for the toggle", async () => {
        const page = await createPage(`<duet-toggle value="test"></duet-toggle>`);
        const element = await page.find("duet-toggle input");
        expect(element.getAttribute("value")).not.toBeNull();
    });
    it("should raise a duetChange event when user changes value", async () => {
        const page = await createPage(`<duet-toggle value="test"></duet-toggle>`);
        const element = await page.find("duet-toggle");
        const spy = await element.spyOnEvent("duetChange");
        await element.click();
        expect(spy).toHaveReceivedEventDetail({
            component: "duet-toggle",
            value: "test",
            checked: true,
        });
    });
});
