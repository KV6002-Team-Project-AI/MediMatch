/*!
 * Built with Duet Design System
 */
import { createPage, isFocused } from "../../utils/test-utils";
function getTrigger(page) {
    return page.find(`duet-tooltip-button >>> button[aria-expanded]`);
}
async function getPopup(page) {
    const button = await getTrigger(page);
    return page.find(`duet-tooltip-popup >>> #${button.getAttribute("aria-controls")}`);
}
async function openWithClick(page) {
    const trigger = await getTrigger(page);
    const popup = await getPopup(page);
    await trigger.click();
    await popup.waitForVisible();
}
async function closeWithClick(page) {
    const trigger = await getTrigger(page);
    const popup = await getPopup(page);
    await trigger.click();
    await popup.waitForNotVisible();
}
async function clickOutside(page) {
    const popup = await getPopup(page);
    await page.mouse.click(0, 0);
    await page.waitForChanges();
    await popup.waitForNotVisible();
}
async function clickCloseButton(page) {
    const popup = await getPopup(page);
    const closeButton = await page.find(`duet-tooltip-popup >>> .duet-tooltip-close`);
    await closeButton.click();
    await popup.waitForNotVisible();
}
async function closeWithEsc(page) {
    const popup = await getPopup(page);
    await page.keyboard.press("Escape");
    await page.waitForChanges();
    await popup.waitForNotVisible();
}
describe("duet-tooltip", () => {
    it("should render a tooltip", async () => {
        const page = await createPage(`<duet-tooltip></duet-tooltip>`);
        const component = await page.find("duet-tooltip");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    describe("behavior", () => {
        it("can be toggled open and closed via the trigger", async () => {
            const page = await createPage(`<duet-tooltip label="Example label">Example content</duet-tooltip>`);
            const trigger = await getTrigger(page);
            const popup = await getPopup(page);
            await openWithClick(page);
            // focus *should* be moved to popup on open
            expect(trigger).toEqualAttribute("aria-expanded", "true");
            expect(await isFocused(popup)).toBe(true);
            await closeWithClick(page);
            // focus *should* be moved to trigger on close
            expect(trigger).toEqualAttribute("aria-expanded", "false");
            expect(await isFocused(trigger)).toBe(true);
        });
        it("closes on click of close button", async () => {
            const page = await createPage(`<duet-tooltip label="Example label">Example content</duet-tooltip>`);
            const trigger = await getTrigger(page);
            await openWithClick(page);
            expect(trigger).toEqualAttribute("aria-expanded", "true");
            await clickCloseButton(page);
            // focus *should* be moved to trigger on close button click
            expect(trigger).toEqualAttribute("aria-expanded", "false");
            expect(await isFocused(trigger)).toBe(true);
        });
        it("closes on click outside", async () => {
            const page = await createPage(`<duet-tooltip label="Example label">Example content</duet-tooltip>`);
            const trigger = await getTrigger(page);
            await openWithClick(page);
            expect(trigger).toEqualAttribute("aria-expanded", "true");
            await clickOutside(page);
            // focus *should not* be moved anywhere on click outside
            expect(trigger).toEqualAttribute("aria-expanded", "false");
            expect(await isFocused(trigger)).toBe(false);
        });
        it("closes on Escape key", async () => {
            const page = await createPage(`<duet-tooltip label="Example label">Example content</duet-tooltip>`);
            const trigger = await getTrigger(page);
            await openWithClick(page);
            expect(trigger).toEqualAttribute("aria-expanded", "true");
            await closeWithEsc(page);
            // focus *should* be moved to trigger if closing with escape
            expect(trigger).toEqualAttribute("aria-expanded", "false");
            expect(await isFocused(trigger)).toBe(true);
        });
    });
    it("supports passing a prefix to accessible label", async () => {
        const page = await createPage(`<duet-tooltip accessible-label="Tooltip label" accessible-input-label="Input name">Example content</duet-tooltip>`);
        const trigger = await getTrigger(page);
        expect(trigger).toEqualText("Input name, Tooltip label");
    });
});
