/*!
 * Built with Duet Design System
 */
import { media_query_large, media_query_medium } from "@duetds/tokens/lib/tokens.json";
import { arrow, computePosition, flip, shift } from "@floating-ui/dom";
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { createID } from "../../utils/create-id";
import { isEscapeKey } from "../../utils/keyboard-utils";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
export class DuetTooltip {
    constructor() {
        /**
         * Own Properties.
         */
        this.mql = [
            window.matchMedia(media_query_medium.replace(/'/g, "")),
            window.matchMedia(media_query_large.replace(/'/g, "")),
        ];
        this.tooltipId = createID("DuetTooltip");
        this.aboutString = {
            fi: "aiheesta",
            en: "about",
            sv: "om",
        };
        /**
         * Local methods
         */
        this.openTooltip = () => {
            this.active = true;
            this.focusTarget = "tooltip";
        };
        this.closeTooltip = (moveFocusToButton = false) => {
            this.active = false;
            if (moveFocusToButton) {
                this.focusTarget = "trigger";
            }
            setTimeout(() => {
                this.updatePlacement();
            }, 200);
        };
        this.toggleOpen = () => {
            this.active ? this.closeTooltip() : this.openTooltip();
        };
        this.updatePlacement = async () => {
            var _a, _b;
            let preferRight = true;
            if (this.breakpoint === "large" && !this.mql[1].matches) {
                preferRight = false;
            }
            else if (this.breakpoint === "medium" && !this.mql[0].matches) {
                preferRight = false;
            }
            let placement = preferRight ? "top-start" : "top-end";
            if (this.direction === "left") {
                placement = "top-end";
            }
            else if (this.direction === "right") {
                placement = "top-start";
            }
            const position = await computePosition(this.buttonEl, this.popupElement, {
                placement,
                middleware: [flip(), shift({ padding: 5 }), arrow({ element: this.arrowEl })],
            });
            this.tooltipY = position.y;
            this.tooltipX = position.x;
            this.placement = position.placement;
            this.arrowY = (_a = position.middlewareData.arrow) === null || _a === void 0 ? void 0 : _a.y;
            this.arrowX = (_b = position.middlewareData.arrow) === null || _b === void 0 ? void 0 : _b.x;
        };
        this.placement = "bottom";
        this.tooltipY = undefined;
        this.tooltipX = undefined;
        this.arrowX = undefined;
        this.arrowY = undefined;
        this.theme = "";
        this.language = getLanguage();
        this.accessibleLabelDefault = {
            fi: "Näytä lisätietoja",
            en: "Show more information",
            sv: "Visa mer tilläggsuppgifter",
        };
        this.accessibleLabel = getLocaleString(this.accessibleLabelDefault, this.language);
        this.accessibleAboutLabel = undefined;
        this.accessibleInputLabel = undefined;
        this.accessibleCloseLabelDefault = {
            fi: "Sulje lisätiedot",
            en: "Close details",
            sv: "Stäng tilläggsuppgifter",
        };
        this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefault, this.language);
        this.label = "";
        this.breakpoint = "medium";
        this.direction = "auto";
        this.positionVertical = "0";
        this.positionHorizontal = "0";
        this.active = false;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
    }
    async componentDidLoad() {
        if (Build.isServer) {
            return;
        }
        this.arrowEl = await this.popupElement.getArrowElement();
        this.contentEl = await this.popupElement.getContentElement();
        this.updatePlacement();
        if (this.active) {
            this.openTooltip();
        }
        this.intersectionObserver = new IntersectionObserver(this.updatePlacement, { root: document.body });
        this.intersectionObserver.observe(this.element);
    }
    componentDidUpdate() {
        switch (this.focusTarget) {
            case "tooltip":
                // delay focus so button is correctly announced as "expanded"
                setTimeout(() => this.contentEl.focus({ preventScroll: true }));
                break;
            case "trigger":
                // delay focus so button is correctly announced as "collapsed"
                setTimeout(() => this.buttonEl.setFocus({ preventScroll: true }));
                break;
        }
        this.focusTarget = null;
    }
    connectedCallback() {
        connectLanguageChangeObserver(this, [
            { prop: "accessibleLabel", defaults: "accessibleLabelDefault" },
            { prop: "accessibleCloseLabel", defaults: "accessibleCloseLabelDefault" },
        ]);
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
    }
    /**
     * Component event handling.
     */
    onScroll() {
        clearTimeout(this.scrollTimer);
        this.scrollTimer = setTimeout(() => {
            if (this.active) {
                this.updatePlacement();
            }
        }, 100);
    }
    handleWindowResize() {
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(() => {
            this.updatePlacement();
        }, 100);
    }
    handleDocumentClick(e) {
        if (!this.active) {
            return;
        }
        const path = e.composedPath();
        const isClickOutside = path.every(el => el !== this.element && el !== this.contentEl);
        if (isClickOutside) {
            this.closeTooltip();
        }
    }
    handleKeyDown(e) {
        if (this.active && isEscapeKey(e)) {
            this.closeTooltip(true);
        }
    }
    handlePopupClose() {
        if (this.active) {
            this.closeTooltip(true);
        }
    }
    async handleActiveChange(newActiveValue) {
        if (newActiveValue) {
            setTimeout(() => this.updatePlacement(), 10);
        }
        else {
            setTimeout(() => this.updatePlacement(), 300);
        }
    }
    /**
     * render() function.
     * Always the last one in the class.
     */
    render() {
        if (Build.isServer) {
            return;
        }
        const tooltipStyles = {
            transform: `translateY(${this.positionVertical}) translateX(${this.positionHorizontal})`,
            // This is needed to that the active tooltip stacks on
            // top of other tooltips and the header.
            zIndex: this.active ? "201" : "",
        };
        const popupContainerStyles = {
            position: "relative",
            overflow: this.active ? "visible" : "hidden",
        };
        const positionStyles = {
            top: `${this.tooltipY}px`,
            left: `${this.tooltipX}px`,
            display: "block",
            "pointer-events": this.active ? "auto" : "none",
        };
        const arrowStyles = {
            top: this.arrowY ? `${this.arrowY}px` : undefined,
            left: this.arrowX ? `${this.arrowX}px` : undefined,
        };
        return (h(Host, { style: tooltipStyles }, h("duet-tooltip-button", { ref: element => (this.buttonEl = element), active: this.active, tooltipId: this.tooltipId, label: this.label, accessibleLabel: (this.accessibleInputLabel && `${this.accessibleInputLabel}, ${this.accessibleLabel}`) ||
                (this.accessibleAboutLabel &&
                    `${this.accessibleLabel} ${this.aboutString[this.language]} ${this.accessibleAboutLabel}`) ||
                this.accessibleLabel, onClick: this.toggleOpen, theme: this.theme }), h("div", { style: popupContainerStyles }, h("duet-tooltip-popup", { ref: element => (this.popupElement = element), active: this.active, tooltipId: this.tooltipId, arrowStyles: arrowStyles, style: positionStyles, placement: this.placement, accessibleCloseLabel: this.accessibleCloseLabel, theme: this.theme }, h("slot", null)))));
    }
    static get is() { return "duet-tooltip"; }
    static get encapsulation() { return "scoped"; }
    static get originalStyleUrls() {
        return {
            "$": ["duet-tooltip.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["duet-tooltip.css"]
        };
    }
    static get properties() {
        return {
            "theme": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetTheme",
                    "resolved": "\"\" | \"default\" | \"turva\"",
                    "references": {
                        "DuetTheme": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTheme"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Theme of the tooltip."
                },
                "attribute": "theme",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "language": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetLanguage",
                    "resolved": "\"en\" | \"fi\" | \"sv\"",
                    "references": {
                        "DuetLanguage": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetLanguage"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "deprecated",
                            "text": "this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing"
                        }, {
                            "name": "default",
                            "text": "\"fi\""
                        }],
                    "text": "The currently active language. This setting changes the accessible labels to match the\nchosen language."
                },
                "attribute": "language",
                "reflect": false,
                "defaultValue": "getLanguage()"
            },
            "accessibleLabelDefault": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetLangObject | string",
                    "resolved": "DuetLangObject | string",
                    "references": {
                        "DuetLangObject": {
                            "location": "import",
                            "path": "../../utils/language-utils",
                            "id": "src/utils/language-utils.ts::DuetLangObject"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "default",
                            "text": "{fi: \"N\u00E4yt\u00E4 lis\u00E4tietoja\", en: \"See more information\", sv: \"Se mer information\"}"
                        }],
                    "text": "Default language strings for the accessibleLabel"
                },
                "attribute": "accessible-label-default",
                "reflect": false,
                "defaultValue": "{\n    fi: \"N\u00E4yt\u00E4 lis\u00E4tietoja\",\n    en: \"Show more information\",\n    sv: \"Visa mer till\u00E4ggsuppgifter\",\n  }"
            },
            "accessibleLabel": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "default",
                            "text": "{fi: \"N\u00E4yt\u00E4 lis\u00E4tietoja\", en: \"See more information\", sv: \"Se mer information\"}"
                        }],
                    "text": "Adds accessible label for the info icon that is only shown for screen\nreaders. This property is always required to create an accessible interface!"
                },
                "attribute": "accessible-label",
                "reflect": false,
                "defaultValue": "getLocaleString(this.accessibleLabelDefault, this.language)"
            },
            "accessibleAboutLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "String to add after the accessibleLabel to give more context to the tooltip. Preposition \"about\" is\nadded between the strings. In Finnish, the preposition is \"aiheesta\" and in Swedish \"om\"."
                },
                "attribute": "accessible-about-label",
                "reflect": false
            },
            "accessibleInputLabel": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "internal",
                            "text": "Adds a prefix to the accessible label.\nUsed internally by input components to add more context to the tooltip."
                        }],
                    "text": ""
                },
                "attribute": "accessible-input-label",
                "reflect": false
            },
            "accessibleCloseLabelDefault": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetLangObject | string",
                    "resolved": "DuetLangObject | string",
                    "references": {
                        "DuetLangObject": {
                            "location": "import",
                            "path": "../../utils/language-utils",
                            "id": "src/utils/language-utils.ts::DuetLangObject"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "default",
                            "text": "{fi: \"Sulje lis\u00E4tiedot\", en: \"Close details\", sv: \"St\u00E4ng detaljer\"}"
                        }],
                    "text": "Default language strings for the accessibleCloseLabel"
                },
                "attribute": "accessible-close-label-default",
                "reflect": false,
                "defaultValue": "{\n    fi: \"Sulje lis\u00E4tiedot\",\n    en: \"Close details\",\n    sv: \"St\u00E4ng till\u00E4ggsuppgifter\",\n  }"
            },
            "accessibleCloseLabel": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [{
                            "name": "default",
                            "text": "{fi: \"Sulje lis\u00E4tiedot\", en: \"Close details\", sv: \"St\u00E4ng detaljer\"}"
                        }],
                    "text": "Adds accessible label for the close icon that is only shown for screen\nreaders. This property is always required to create an accessibly interface!"
                },
                "attribute": "accessible-close-label",
                "reflect": false,
                "defaultValue": "getLocaleString(\n    this.accessibleCloseLabelDefault,\n    this.language\n  )"
            },
            "label": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Label of the tooltip. If used, replaces the accessibleLabel option."
                },
                "attribute": "label",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "breakpoint": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetTooltipBreakpoint",
                    "resolved": "\"large\" | \"medium\"",
                    "references": {
                        "DuetTooltipBreakpoint": {
                            "location": "local",
                            "path": "/Users/mgibas/workspace/duet/packages/components/src/components/duet-tooltip/duet-tooltip.tsx",
                            "id": "src/components/duet-tooltip/duet-tooltip.tsx::DuetTooltipBreakpoint"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Adjust the responsive breakpoint where tooltip starts opening towards left."
                },
                "attribute": "breakpoint",
                "reflect": false,
                "defaultValue": "\"medium\""
            },
            "direction": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "DuetTooltipDirection",
                    "resolved": "\"auto\" | \"left\" | \"right\"",
                    "references": {
                        "DuetTooltipDirection": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTooltipDirection"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "With direction setting you can force the tooltip to always open towards left\nor right instead of automatically determining the direction."
                },
                "attribute": "direction",
                "reflect": false,
                "defaultValue": "\"auto\""
            },
            "positionVertical": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Adjust the vertical positioning of the tooltip toggle in pixels. Can be a\nnegative value as well. E.g. \"-13px\"."
                },
                "attribute": "position-vertical",
                "reflect": true,
                "defaultValue": "\"0\""
            },
            "positionHorizontal": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "string",
                    "resolved": "string",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Adjust the horizontal positioning of the tooltip toggle in pixels. Can be a\nnegative value as well. E.g. \"-13px\"."
                },
                "attribute": "position-horizontal",
                "reflect": true,
                "defaultValue": "\"0\""
            },
            "active": {
                "type": "boolean",
                "mutable": true,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "Toggle whether the tooltip is initially visible or not. This property should\nnot be used in production in most cases."
                },
                "attribute": "active",
                "reflect": true,
                "defaultValue": "false"
            }
        };
    }
    static get states() {
        return {
            "placement": {},
            "tooltipY": {},
            "tooltipX": {},
            "arrowX": {},
            "arrowY": {}
        };
    }
    static get elementRef() { return "element"; }
    static get watchers() {
        return [{
                "propName": "active",
                "methodName": "handleActiveChange"
            }];
    }
    static get listeners() {
        return [{
                "name": "scroll",
                "method": "onScroll",
                "target": "window",
                "capture": false,
                "passive": true
            }, {
                "name": "resize",
                "method": "handleWindowResize",
                "target": "window",
                "capture": false,
                "passive": true
            }, {
                "name": "click",
                "method": "handleDocumentClick",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "keydown",
                "method": "handleKeyDown",
                "target": "document",
                "capture": false,
                "passive": false
            }, {
                "name": "tooltipPopupClosed",
                "method": "handlePopupClose",
                "target": "document",
                "capture": false,
                "passive": false
            }];
    }
}
