/*!
 * Built with Duet Design System
 */
import { createPage } from "../../utils/test-utils";
const ANIMATION_DELAY = 600;
describe("duet-tray", () => {
    it("should render a tray", async () => {
        const page = await createPage(`<duet-tray></duet-tray>`);
        const component = await page.find("duet-tray");
        expect(component).not.toBeNull();
        expect(component).toHaveClass("hydrated");
    });
    it("should provide a property that switches the theme", async () => {
        const page = await createPage(`<duet-tray theme="turva"></duet-tray>`);
        const element = await page.find("duet-tray >>> .duet-tray");
        expect(element).toHaveClass("duet-theme-turva");
    });
    it("should provide a property that makes the tray active", async () => {
        const page = await createPage(`<duet-tray active></duet-tray>`);
        const element = await page.find("duet-tray >>> .duet-tray");
        expect(element).toHaveClass("duet-tray-is-active");
    });
    it("should provide a property that disables responsive behaviour", async () => {
        const page = await createPage(`<duet-tray responsive="false"></duet-tray>`);
        const element = await page.find("duet-tray >>> .duet-tray");
        expect(element).not.toHaveClass("duet-tray-is-responsive");
    });
    it("should not have hidden state enabled by default", async () => {
        const page = await createPage(`<duet-tray>content</duet-tray>`);
        const element = await page.find("duet-tray >>> .duet-tray");
        expect(element).not.toHaveClass("duet-tray-is-hidden");
    });
    it("should not be active by default", async () => {
        const page = await createPage(`<duet-tray>content</duet-tray>`);
        const element = await page.find("duet-tray >>> .duet-tray");
        expect(element).not.toHaveClass("duet-tray-is-active");
    });
    it("allows for additional content in an expandable region", async () => {
        const page = await createPage(`
      <meta charset="utf-8" />
      <duet-tray response="false" active>
        <duet-grid alignment="center">
          <duet-grid-item margin="none" fill>
            <duet-paragraph size="small" margin="none"> Total price </duet-paragraph>
          </duet-grid-item>
          <duet-grid-item margin="none">
            <span class="duet-font-size-m duet-font-weight-semi-bold">189,90 â‚¬</span>
          </duet-grid-item>
        </duet-grid>
        <div slot="additional">
          <duet-list>
            <duet-list-item>
              <span slot="label">Label 1</span>
              <span slot="value">Value 1</span>
            </duet-list-item>
            <duet-list-item>
              <span slot="label">Label 2</span>
              <span slot="value">Value 2</span>
            </duet-list-item>
            <duet-list-item>
              <span slot="label">Label 3</span>
              <span slot="value">Value 3</span>
            </duet-list-item>
          </duet-list>
        </div>
      </duet-tray>
      <duet-paragraph class="outside">Something outside to click on</duet-paragraph>
    `);
        // ensure everything is correct from an a11y perspective
        const button = await page.find("duet-tray >>> .duet-tray-button");
        expect(button).toEqualAttribute("aria-expanded", "false");
        expect(button).toHaveAttribute("aria-controls");
        // initially, expandable area should not be visible
        const expandable = await page.find(`duet-tray >>> #${button.getAttribute("aria-controls")}`);
        expect(await expandable.isVisible()).toBe(false);
        // click to open
        await button.click();
        await page.waitForChanges();
        // then expandable area *should* be visible
        expect(button).toEqualAttribute("aria-expanded", "true");
        expect(await expandable.isVisible()).toBe(true);
        // click to close
        await button.click();
        await page.waitForChanges();
        await page.waitForTimeout(ANIMATION_DELAY);
        // then expandable area *should not* be visible
        expect(button).toEqualAttribute("aria-expanded", "false");
        expect(await expandable.isVisible()).toBe(false);
        // click to open (again)
        await button.click();
        await page.waitForChanges();
        expect(button).toEqualAttribute("aria-expanded", "true");
        expect(await expandable.isVisible()).toBe(true);
        // click on something outside of tray
        const outsideElement = await page.find(".outside");
        await outsideElement.click();
        await page.waitForChanges();
        await page.waitForTimeout(ANIMATION_DELAY);
        // then expandable area *should not* be visible
        expect(button).toEqualAttribute("aria-expanded", "false");
        expect(await expandable.isVisible()).toBe(false);
    });
});
