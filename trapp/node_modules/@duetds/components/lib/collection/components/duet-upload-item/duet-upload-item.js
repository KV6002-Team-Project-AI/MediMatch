/*!
 * Built with Duet Design System
 */
import { h } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { getLocaleString } from "../../utils/language-utils";
import { getI18nError } from "../duet-upload/errorcodes.utils";
import { formatBytes } from "../duet-upload/upload.helpers";
export class DuetUploadItem {
    constructor() {
        this.fileUploadingInfo = {
            fi: "Tiedosto latautuu",
            sv: "Filen laddas upp",
            en: "File is uploading",
        };
        this.onLinkClick = (event) => {
            const { url, meta } = this.data;
            if (!!this.linkClickEvent) {
                event.preventDefault();
                this.linkClickEvent.emit({
                    component: "duet-upload",
                    data: { name: this.data.item.name, url, meta },
                });
            }
        };
        this.theme = "";
        this.data = undefined;
        this.type = undefined;
        this.showLinks = undefined;
        this.actions = undefined;
        this.label = undefined;
        this.categoryLabel = undefined;
        this.errorCodes = undefined;
        this.showCategory = undefined;
        this.linkClickEvent = undefined;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
    }
    /**
     * focusActionButton.
     */
    async focusActionButton() {
        if (this.actionButton) {
            await this.actionButton.setFocus({ preventScroll: true });
            this.actionButton.scrollIntoView({ behavior: "smooth", block: "center", inline: "nearest" });
        }
    }
    getFileNameLine() {
        const { item, size, uploaded, url, progress, error } = this.data;
        const { name } = item;
        const ContentName = (h("span", { class: "duet-upload-item-name" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name));
        const SizeText = (h("span", { class: "duet-upload-item-size", style: { fontSize: "14px", fontWeight: "400" } }, "(", formatBytes(size), ")"));
        switch (this.type) {
            case "inprogress":
                return (h("span", { class: "duet-upload-item-name", role: "status" }, h("duet-paragraph", { class: "duet-upload-item-name", color: "gray-darker", margin: "none", weight: "semi-bold" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name), h("duet-visually-hidden", null, h("duet-paragraph", null, getLocaleString(this.fileUploadingInfo))), h("duet-progress", { progress: Math.ceil(progress), "aria-hidden": true })));
            case "pending":
                return (h("span", { class: "duet-upload-item-name" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name));
            case "failure":
                return (h("span", { class: "duet-upload-item-error", role: "status" }, h("duet-paragraph", { class: "duet-upload-item-name", color: "danger", margin: "none", weight: "semi-bold" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name), h("duet-paragraph", { class: "duet-upload-item-error-label", size: "small", margin: "none", color: "danger" }, getI18nError(error.type, this.errorCodes))));
            default:
                return uploaded && url && this.showLinks ? (h("duet-paragraph", { color: "secondary", margin: "none", weight: "semi-bold" }, h("duet-link", { class: "file-link", onClick: this.onLinkClick, url: url }, ContentName), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), SizeText)) : (h("duet-paragraph", { color: "secondary", margin: "none", weight: "semi-bold" }, ContentName, h("duet-spacer", { size: "xx-small", direction: "horizontal" }), SizeText));
        }
    }
    render() {
        const { uid, meta, item } = this.data;
        const Badges = meta && meta.badges ? (h("span", null, meta.badges.map(badgeText => (h("duet-badge", { color: "primary" }, badgeText))))) : undefined;
        const actionDescription = `${meta && meta.badges ? meta.badges.join(",") : ""} ${item.name}`;
        return (h("div", { class: {
                "upload-item-row": true,
            } }, this.showCategory && (h("div", { class: "item-categories" }, h("duet-heading", { class: "heading", color: "color-secondary", level: "h6", weight: "semibold" }, getLocaleString(this.categoryLabel)), Badges)), h("div", { class: { "item-name": true, "no-category": !this.showCategory } }, !!this.label && (h("duet-heading", { class: "heading", color: "color-secondary", level: "h6", weight: "semibold" }, getLocaleString(this.label))), this.getFileNameLine()), h("div", { class: "item-actions" }, this.actions.map(actionItem => {
            return (h("duet-action-button", { actionMeta: Object.assign({}, meta || {}), actionId: uid || null, actionName: actionItem.name, theme: this.theme, iconName: actionItem.icon, iconColor: actionItem.color, iconSize: actionItem.size, background: actionItem.background, "accessible-label": `${actionDescription} ${getLocaleString(actionItem.label)} `, accessibleTitle: false, ref: button => (this.actionButton = button) }));
        }))));
    }
    static get is() { return "duet-upload-item"; }
    static get originalStyleUrls() {
        return {
            "$": ["duet-upload-item.scss"]
        };
    }
    static get styleUrls() {
        return {
            "$": ["duet-upload-item.css"]
        };
    }
    static get properties() {
        return {
            "theme": {
                "type": "string",
                "mutable": true,
                "complexType": {
                    "original": "DuetTheme",
                    "resolved": "\"\" | \"default\" | \"turva\"",
                    "references": {
                        "DuetTheme": {
                            "location": "import",
                            "path": "../../common-types",
                            "id": "src/common-types.d.ts::DuetTheme"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "theme."
                },
                "attribute": "theme",
                "reflect": false,
                "defaultValue": "\"\""
            },
            "data": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DuetFileListItem",
                    "resolved": "{ uid: string; item: File; size: number; meta?: Record<string, any>; uploaded: boolean; error: DuetUploadErrorCode; progress: number; deleted: boolean; valid: boolean; xhr: false | DuetXhrRequest; url: string | false; group?: string; html?: string; status?: number; pending?: boolean; }",
                    "references": {
                        "DuetFileListItem": {
                            "location": "import",
                            "path": "../duet-upload/duet-upload",
                            "id": "src/components/duet-upload/duet-upload.tsx::DuetFileListItem"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "data."
                }
            },
            "type": {
                "type": "string",
                "mutable": false,
                "complexType": {
                    "original": "ItemType",
                    "resolved": "\"failure\" | \"inprogress\" | \"pending\" | \"success\"",
                    "references": {
                        "ItemType": {
                            "location": "local",
                            "path": "/Users/mgibas/workspace/duet/packages/components/src/components/duet-upload-item/duet-upload-item.tsx",
                            "id": "src/components/duet-upload-item/duet-upload-item.tsx::ItemType"
                        }
                    }
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "type."
                },
                "attribute": "type",
                "reflect": false
            },
            "showLinks": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "showLinks."
                },
                "attribute": "show-links",
                "reflect": false
            },
            "actions": {
                "type": "any",
                "mutable": false,
                "complexType": {
                    "original": "any",
                    "resolved": "any",
                    "references": {}
                },
                "required": false,
                "optional": false,
                "docs": {
                    "tags": [],
                    "text": "actions."
                },
                "attribute": "actions",
                "reflect": false
            },
            "label": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DuetLangObject",
                    "resolved": "DuetLangObject",
                    "references": {
                        "DuetLangObject": {
                            "location": "import",
                            "path": "../../utils/language-utils",
                            "id": "src/utils/language-utils.ts::DuetLangObject"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "label."
                }
            },
            "categoryLabel": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DuetLangObject",
                    "resolved": "DuetLangObject",
                    "references": {
                        "DuetLangObject": {
                            "location": "import",
                            "path": "../../utils/language-utils",
                            "id": "src/utils/language-utils.ts::DuetLangObject"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "categoryLabel."
                }
            },
            "errorCodes": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "DuetUploadErrorCode[]",
                    "resolved": "DuetUploadErrorCode[]",
                    "references": {
                        "DuetUploadErrorCode": {
                            "location": "import",
                            "path": "../duet-upload/errorcodes.utils",
                            "id": "src/components/duet-upload/errorcodes.utils.ts::DuetUploadErrorCode"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "errorCodes."
                }
            },
            "showCategory": {
                "type": "boolean",
                "mutable": false,
                "complexType": {
                    "original": "boolean",
                    "resolved": "boolean",
                    "references": {}
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "showCategory."
                },
                "attribute": "show-category",
                "reflect": false
            },
            "linkClickEvent": {
                "type": "unknown",
                "mutable": false,
                "complexType": {
                    "original": "EventEmitter<DuetUploadEvent>",
                    "resolved": "EventEmitter<DuetUploadEvent>",
                    "references": {
                        "EventEmitter": {
                            "location": "import",
                            "path": "@stencil/core",
                            "id": ""
                        },
                        "DuetUploadEvent": {
                            "location": "import",
                            "path": "../duet-upload/duet-upload",
                            "id": "src/components/duet-upload/duet-upload.tsx::DuetUploadEvent"
                        }
                    }
                },
                "required": false,
                "optional": true,
                "docs": {
                    "tags": [],
                    "text": "linkClickEvent."
                }
            }
        };
    }
    static get methods() {
        return {
            "focusActionButton": {
                "complexType": {
                    "signature": "() => Promise<void>",
                    "parameters": [],
                    "references": {
                        "Promise": {
                            "location": "global",
                            "id": "global::Promise"
                        }
                    },
                    "return": "Promise<void>"
                },
                "docs": {
                    "text": "focusActionButton.",
                    "tags": []
                }
            }
        };
    }
    static get elementRef() { return "element"; }
}
