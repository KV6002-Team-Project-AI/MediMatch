/*!
 * Built with Duet Design System
 */
export const isArrowLeftKey = (e) => e.key === "ArrowLeft" || e.key === "Left";
export const isArrowUpKey = (e) => e.key === "ArrowUp" || e.key === "Up";
export const isArrowRightKey = (e) => e.key === "ArrowRight" || e.key === "Right";
export const isArrowDownKey = (e) => e.key === "ArrowDown" || e.key === "Down";
export const isArrowKey = (e) => isArrowDownKey(e) || isArrowRightKey(e) || isArrowUpKey(e) || isArrowLeftKey(e);
export const isEscapeKey = (e) => e.key === "Escape" || e.key === "Esc";
export const isTabKey = (e) => e.key === "Tab";
export const isBackspaceKey = (e) => e.key === "Backspace";
export const isSpaceKey = (e) => e.key === " " || e.key === "Spacebar";
export const isPlusKey = (e) => e.key === "+" || e.key === "Add";
export const isMinusKey = (e) => e.key === "-" || e.key === "Subtract";
export const isQuestionKey = (e) => e.key === "?";
export const isEnterKey = (e) => e.key === "Enter";
export const isKeyboardClick = (e) => isEnterKey(e) || isSpaceKey(e);
export const isNumber = (e) => e.key >= "0" && e.key <= "9";
/**
 * Component instances that have subscribed to tabbing change.
 */
const tabbingChangeSubscribers = new Set();
function notifySubscribers(tabbing) {
    tabbingChangeSubscribers.forEach(subscriber => {
        subscriber.element.classList[tabbing ? "add" : "remove"]("user-is-tabbing");
    });
}
function listenKeys(event) {
    if (isTabKey(event)) {
        notifySubscribers(true);
        window.removeEventListener("keydown", listenKeys);
        window.addEventListener("mousedown", listenMouse, false);
    }
}
function listenMouse() {
    notifySubscribers(false);
    window.removeEventListener("mousedown", listenMouse);
    window.addEventListener("keydown", listenKeys, false);
}
// start listening for tabbing (and mouse clicking through that) only if window is defined (i.e. not on server)
if (typeof window !== "undefined") {
    window.addEventListener("keydown", listenKeys, false);
}
export const subscribeTabbingChange = component => {
    tabbingChangeSubscribers.add(component);
};
export const unsubscribeTabbingChange = component => {
    tabbingChangeSubscribers.delete(component);
};
