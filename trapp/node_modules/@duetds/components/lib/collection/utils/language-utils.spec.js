/*!
 * Built with Duet Design System
 */
import { getCurrentLanguage, getLanguage, getLocale, getLocaleString, isOfTypeLanguage } from "./language-utils";
import { convertHtmlQuotes } from "./string-utils";
describe("language-utils", () => {
    describe("isOfTypeLanguage", () => {
        it("return true is language if part of default languages", () => {
            expect(isOfTypeLanguage("fi")).toBe(true);
            expect(isOfTypeLanguage("en")).toBe(true);
            expect(isOfTypeLanguage("sv")).toBe(true);
        });
        it("return false is language if not part of default languages", () => {
            expect(isOfTypeLanguage("su")).toBe(false);
            expect(isOfTypeLanguage("uk")).toBe(false);
            expect(isOfTypeLanguage("dk")).toBe(false);
        });
    });
    describe("getLocaleString", () => {
        it("return the correct string", () => {
            const object = {
                fi: "finnish",
                sv: "swedish",
                en: "english",
            };
            expect(getLocaleString(object)).toBe(object["fi"]);
        });
        it("return the correct string for wrong overrides", () => {
            const object = {
                fi: "finnish",
                sv: "swedish",
                en: "english",
                dk: "denmark",
            };
            expect(getLocaleString(object, "dk")).toBe(object["fi"]);
        });
        it("works with urlencoded strings (passed from a html element)", () => {
            const reference = {
                fi: { error: "Tiedostot, joissa on virheitä", success: "Tiedostot" },
                sv: { error: "Filer med fel", success: "Filer" },
                en: { error: "Files with errors", success: "Files" },
            };
            const object = '{"fi":{"error":"Tiedostot, joissa on virheitä","success":"Tiedostot"},"sv":{"error":"Filer med fel","success":"Filer"},"en":{"error":"Files with errors","success":"Files"}}';
            const objectWithQuotes = "{&quot;fi&quot;:{&quot;error&quot;:&quot;Tiedostot, joissa on virheitä&quot;,&quot;success&quot;:&quot;Tiedostot&quot;},&quot;sv&quot;:{&quot;error&quot;:&quot;Filer med fel&quot;,&quot;success&quot;:&quot;Filer&quot;},&quot;en&quot;:{&quot;error&quot;:&quot;Files with errors&quot;,&quot;success&quot;:&quot;Files&quot;}}";
            const objectWithApos = "{&apos;fi&apos;:{&apos;error&apos;:&apos;Tiedostot, joissa on virheitä&apos;,&apos;success&apos;:&apos;Tiedostot&apos;},&apos;sv&apos;:{&apos;error&apos;:&apos;Filer med fel&apos;,&apos;success&apos;:&apos;Filer&apos;},&apos;en&apos;:{&apos;error&apos;:&apos;Files with errors&apos;,&apos;success&apos;:&apos;Files&apos;}}";
            const parsedObject = JSON.parse(convertHtmlQuotes(object));
            const parseObjectWithQuotes = JSON.parse(convertHtmlQuotes(objectWithQuotes));
            const parseObjectWithApos = JSON.parse(convertHtmlQuotes(objectWithApos));
            expect(JSON.stringify(parsedObject)).toEqual(JSON.stringify(parseObjectWithQuotes));
            expect(getLocaleString(parsedObject, "fi")).toEqual(reference["fi"]);
            expect(getLocaleString(parseObjectWithQuotes)).toEqual(reference["fi"]);
            expect(getLocaleString(parseObjectWithApos)).toEqual(reference["fi"]);
        });
    });
    describe("getLocale", () => {
        it("return the correct locale for se", () => {
            const object = {
                locale: "sv-SE",
                money: "€",
            };
            expect(getLocale("sv")).toMatchObject(object);
        });
        it("return the correct locale for en", () => {
            const object = {
                locale: "en-GB",
                money: "£",
            };
            expect(getLocale("en")).toMatchObject(object);
        });
        it("return the correct locale for us", () => {
            const object = {
                locale: "en-US",
                money: "$",
            };
            expect(getLocale("us")).toMatchObject(object);
        });
        it("return the correct locale for fi", () => {
            const object = {
                locale: "fi-FI",
                money: "€",
            };
            expect(getLocale("fi")).toMatchObject(object);
        });
        it("throws error for unknown languages", () => {
            expect(() => {
                //@ts-ignore
                getLocale("no");
            }).toThrow();
        });
    });
    describe("getLanguage", () => {
        it("returns a valid language even when given a unsuitable string", () => {
            expect(getLanguage("shouldFail")).toBe("fi");
            expect(getLanguage("us")).toBe("fi");
            expect(getLanguage("sv")).toBe("sv");
            expect(getLanguage("en")).toBe("en");
            expect(getLanguage("fi")).toBe("fi");
            expect(getLanguage()).toBe("fi");
        });
        it("should return correct language when html Lang is NOT present", () => {
            delete document.documentElement.lang;
            expect(getCurrentLanguage()).toBe("fi");
            expect(getLanguage()).toBe("fi");
        });
        it("should return correct language when html Lang is present and set to fi", () => {
            Object.defineProperty(document.documentElement, "lang", { value: "fi", configurable: true });
            expect(getCurrentLanguage()).toBe("fi");
            expect(getLanguage()).toBe("fi");
        });
        it("should return correct language when html Lang is present and set to sv", () => {
            Object.defineProperty(document.documentElement, "lang", { value: "sv", configurable: true });
            expect(getCurrentLanguage()).toBe("sv");
            expect(getLanguage()).toBe("sv");
        });
        it("should return correct language when html Lang is present and set to en", () => {
            Object.defineProperty(document.documentElement, "lang", { value: "en", configurable: true });
            expect(getCurrentLanguage()).toBe("en");
            expect(getLanguage()).toBe("en");
        });
        it("should return correct language when html Lang is present and set to dk", () => {
            Object.defineProperty(document.documentElement, "lang", { value: "dk", configurable: true });
            expect(getCurrentLanguage()).toBe("dk");
            expect(getLanguage()).toBe("fi");
        });
    });
    describe("avoid introducing breaking changes where label as String mutates to Object", () => {
        /**
         * We want to make sure that no regressions or breaking changes are introduced when converting props such as
          @Prop() accessibleLabel: string = "Sulje viesti"
    
         to
    
         @Prop() accessibleLabel: string = getLocaleString({
                  fi: "default finnish",
                  sv: "default swedish",
                  en: "default english",
                })
         */
        const somePresetObject = {
            fi: "preset finnish",
            sv: "preset swedish",
            en: "preset english",
        };
        const mockStringAsProperty = (variable) => {
            return variable ? variable : getLocaleString(somePresetObject);
        };
        it("should not fail when label is a string", () => {
            const testString = "some thing that is a string";
            const resultString = mockStringAsProperty(testString);
            const resultStringUndef = mockStringAsProperty(undefined);
            const resultStringEmpty = mockStringAsProperty();
            const resultStringNull = mockStringAsProperty(null);
            expect(resultString).toBe(testString);
            expect(resultStringEmpty).toBe(somePresetObject.fi);
            expect(resultStringNull).toBe(somePresetObject.fi);
            expect(resultStringUndef).toBe(somePresetObject.fi);
        });
    });
});
