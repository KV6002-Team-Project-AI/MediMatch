/*!
 * Built with Duet Design System
 */
import { clamp, roundTo, SafeParseFloat } from "./math.utils";
describe("math utils", () => {
    describe("roundTo", () => {
        it("should round to whole numbers", () => {
            expect(roundTo(123, 5)).toBe(125);
            expect(roundTo(111, 5)).toBe(110);
        });
        it("should round to negative whole numbers", () => {
            expect(roundTo(-123, 5)).toBe(-125);
            expect(roundTo(-111, 5)).toBe(-110);
        });
        it("should round to decimal numbers", () => {
            expect(roundTo(1.3, 0.5)).toBe(1.5);
            expect(roundTo(1.2, 0.5)).toBe(1);
            expect(roundTo(1.2, 1.5)).toBe(1.5);
        });
        it("should round to negative decimal numbers", () => {
            expect(roundTo(-1.3, 0.5)).toBe(-1.5);
            expect(roundTo(-1.2, 0.5)).toBe(-1);
            expect(roundTo(-1.2, 1.5)).toBe(-1.5);
        });
    });
    describe("clamp", () => {
        it("should return value if in range", () => {
            expect(clamp(5, 0, 10)).toBe(5);
        });
        it("should return min if value < min", () => {
            expect(clamp(-5, 0, 10)).toBe(0);
        });
        it("should return max if value > max", () => {
            expect(clamp(15, 0, 10)).toBe(10);
        });
        it("should return max if value > max for negative min", () => {
            expect(clamp(15, -10, 10)).toBe(10);
        });
        it("should return min if value < min for negative min", () => {
            expect(clamp(-15, -10, 10)).toBe(-10);
        });
    });
    describe("SafeParseFloat with locale", () => {
        it("should parse numbers in Swedish locale", () => {
            expect(SafeParseFloat("12345,67", "sv-SE")).toBe(12345.67);
            expect(SafeParseFloat("12 345,67", "sv-SE")).toBe(12345.67);
            expect(SafeParseFloat("12 345,67€", "sv-SE")).toBe(12345.67);
        });
        it("should parse numbers in Finnish locale", () => {
            expect(SafeParseFloat("12345,67", "fi-FI")).toBe(12345.67);
            expect(SafeParseFloat("12 345,67", "fi-FI")).toBe(12345.67);
            expect(SafeParseFloat("12 345,67€", "fi-FI")).toBe(12345.67);
        });
        it("should parse numbers in English locale", () => {
            expect(SafeParseFloat("12345.67", "en-GB")).toBe(12345.67);
            expect(SafeParseFloat("12,345.67", "en-GB")).toBe(12345.67);
            expect(SafeParseFloat("12,345.67€", "en-GB")).toBe(12345.67);
        });
        it("should throw if something not a number is supplied", () => {
            // @ts-ignore
            expect(() => SafeParseFloat("definitely not a 10100 number ", "it-IT")).toThrow(Error);
        });
        it("should support negqative values", () => {
            // @ts-ignore
            expect(SafeParseFloat("-12 345,67€", "fi-FI")).toBe(-12345.67);
            expect(SafeParseFloat("-12 345,67€", "sv-SE")).toBe(-12345.67);
            expect(SafeParseFloat("-1€", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-1", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-1 €", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-1 ", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-10 ", "fi-FI")).toBe(-10);
            expect(SafeParseFloat("- 10 ", "fi-FI")).toBe(-10);
        });
    });
});
describe("math-utils negative numbers", () => {
    describe("roundTo", () => {
        it("should round to negative decimal numbers", () => {
            expect(roundTo(-1.3, 0.5)).toBe(-1.5);
            expect(roundTo(-1.2, 0.5)).toBe(-1);
            expect(roundTo(-1.2, 1.5)).toBe(-1.5);
        });
    });
    describe("clamp", () => {
        it("should return value if in range", () => {
            expect(clamp(5, 0, 10)).toBe(5);
        });
        it("should return min if value < min", () => {
            expect(clamp(-5, 0, 10)).toBe(0);
        });
        it("should return max if value > max", () => {
            expect(clamp(15, 0, 10)).toBe(10);
        });
        it("should return max if value > max for negative min", () => {
            expect(clamp(15, -10, 10)).toBe(10);
        });
        it("should return min if value < min for negative min", () => {
            expect(clamp(-15, -10, 10)).toBe(-10);
        });
    });
    describe("SafeParseFloat", () => {
        it("should parse numbers in Swedish locale", () => {
            expect(SafeParseFloat("-2", "sv-SE")).toBe(-2);
            expect(SafeParseFloat("-2 €", "sv-SE")).toBe(-2);
            expect(SafeParseFloat("-2€", "sv-SE")).toBe(-2);
            expect(SafeParseFloat("- 2 €", "sv-SE")).toBe(-2);
        });
        it("should parse numbers in Finnish locale", () => {
            expect(SafeParseFloat("-2", "fi-FI")).toBe(-2);
            expect(SafeParseFloat("-2 €", "fi-FI")).toBe(-2);
            expect(SafeParseFloat("-2€", "fi-FI")).toBe(-2);
            expect(SafeParseFloat("- 2 €", "fi-FI")).toBe(-2);
        });
        it("should parse numbers in English locale", () => {
            expect(SafeParseFloat("-2", "en-GB")).toBe(-2);
            expect(SafeParseFloat("-2 €", "en-GB")).toBe(-2);
            expect(SafeParseFloat("-2€", "en-GB")).toBe(-2);
            expect(SafeParseFloat("- 2 €", "en-GB")).toBe(-2);
        });
        it("should not throw if unknown locale supplied", () => {
            // @ts-ignore
            expect(() => SafeParseFloat("12.345,67", "enokian")).not.toThrow(TypeError);
        });
        it("should support negative values", () => {
            // @ts-ignore
            expect(SafeParseFloat("-12 345,67€", "fi-FI")).toBe(-12345.67);
            expect(SafeParseFloat("-12 345,67€", "sv-SE")).toBe(-12345.67);
            expect(SafeParseFloat("-12 345.67€", "en-GB")).toBe(-12345.67);
            expect(SafeParseFloat("-12 345,67€", "fi-FI")).toBe(-12345.67);
            expect(SafeParseFloat("-12 345,67€", "sv-SE")).toBe(-12345.67);
            expect(SafeParseFloat("-12,345.67€", "en-GB")).toBe(-12345.67);
            expect(SafeParseFloat("-1€", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-1", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-1 €", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-1 ", "fi-FI")).toBe(-1);
            expect(SafeParseFloat("-10 ", "fi-FI")).toBe(-10);
            expect(SafeParseFloat("- 10 ", "fi-FI")).toBe(-10);
        });
    });
});
