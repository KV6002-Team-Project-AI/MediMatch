/*!
 * Built with Duet Design System
 */
import { parsePossibleJSON } from "./string-utils";
describe("string-utils", () => {
    describe("parsePossibleString", () => {
        it("returns exact same object, if object is passed", () => {
            const object = { hello: "world" };
            expect(parsePossibleJSON(object)).toBe(object);
        });
        it("returns exact same array, if array is passed", () => {
            const array = [{ hello: "world" }];
            expect(parsePossibleJSON(array)).toBe(array);
        });
        it("parses string arguments as JSON", () => {
            const object = { hello: "world" };
            const stringifiedObject = JSON.stringify(object);
            expect(parsePossibleJSON(stringifiedObject)).toEqual(object);
        });
        it("gracefully handles malformed/invalid JSON", () => {
            // spy on console.warn so we can assert it was called, and avoid mess in test output
            const spy = jest.spyOn(global.console, "warn").mockImplementation(() => jest.fn());
            // intentionally invalid JSON - unquoted property name
            const stringifiedObject = '{ hello: "world" }';
            expect(parsePossibleJSON(stringifiedObject)).toBe(undefined);
            expect(console.warn).toHaveBeenCalled();
            spy.mockRestore();
        });
        it("returns undefined for other types of data", () => {
            expect(parsePossibleJSON(null)).toBe(undefined);
            expect(parsePossibleJSON(undefined)).toBe(undefined);
            expect(parsePossibleJSON(function () {
                /*intentionally empty*/
            })).toBe(undefined);
            expect(parsePossibleJSON(true)).toBe(undefined);
            expect(parsePossibleJSON(12345)).toBe(undefined);
        });
    });
});
