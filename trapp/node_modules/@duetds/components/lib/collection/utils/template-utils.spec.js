/*!
 * Built with Duet Design System
 */
import { generateTemplateFn } from "./template-utils";
describe("Template functions", () => {
    it("works with dom nodes", () => {
        document.body.innerHTML = '<div id="testing"><div>${name} <span>${someOther}</span></div> </div>';
        const variables = {
            name: "duet",
            someOther: "other",
        };
        const testingDom = document.getElementById("testing");
        const objectString = "<div>${name} <span>${someOther}</span></div>";
        const domString = testingDom.firstElementChild.outerHTML;
        const templateFn = generateTemplateFn(domString);
        const templateOrig = generateTemplateFn(objectString);
        const renderedTemplate = templateFn(variables);
        const renderedTemplateOrig = templateOrig(variables);
        expect(renderedTemplate).toBe(`<div>${variables.name} <span>${variables.someOther}</span></div>`);
        expect(renderedTemplate).toBe(renderedTemplateOrig);
    });
    it("returns same string as string literals", () => {
        const variables = {
            name: "duet",
            someOther: "other",
        };
        const objectString = "<div>${name} <span>${someOther}</span></div>";
        const templateFn = generateTemplateFn(objectString);
        expect(templateFn(variables)).toBe(`<div>${variables.name} <span>${variables.someOther}</span></div>`);
    });
    it("returns object with undefined string if none are given", () => {
        const variables = {
            name: "duet",
        };
        const objectString = "<div>${name} <span>${someOther}</span></div>";
        const templateFn = generateTemplateFn(objectString);
        expect(templateFn(variables)).toBe("<div>duet <span>undefined</span></div>");
    });
});
