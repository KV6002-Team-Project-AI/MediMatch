/*!
 * Built with Duet Design System
 */
import * as tokens from "@duetds/tokens";
import { convertToColorName, getColorByName, getFontSizeByName, getFontWeightByName, isCamelCase, isDashCase, rgbaColorFromRgb, shadeRGBColor, } from "./token-utils";
describe("token-utils", () => {
    describe("isCamelCase", () => {
        it("checks for camelCase", () => {
            expect(isCamelCase("primaryDark")).toEqual(true);
            expect(isCamelCase("colorPrimaryDark")).toEqual(true);
            expect(isCamelCase("primary-dark")).toEqual(false);
            expect(isCamelCase("color-primary-dark")).toEqual(false);
            expect(isCamelCase("colorPrimary-Dark")).toEqual(false);
            expect(isCamelCase("-colorPrimary")).toEqual(false);
            expect(isCamelCase("color_Primary")).toEqual(false);
            expect(isCamelCase("color Primary")).toEqual(false);
        });
    });
    describe("isDashCase", () => {
        it("checks for dash case", () => {
            expect(isDashCase("primary-dark")).toEqual(true);
            expect(isDashCase("color-primary-dark")).toEqual(true);
            expect(isDashCase("colorPrimary-Dark")).toEqual(true);
            expect(isDashCase("primaryDark")).toEqual(false);
            expect(isDashCase("colorPrimaryDark")).toEqual(false);
            expect(isDashCase("-colorPrimary")).toEqual(false);
            expect(isDashCase("color_Primary")).toEqual(false);
            expect(isDashCase("color Primary")).toEqual(false);
        });
    });
    describe("convertToColorName", () => {
        it("converts primaryDark to a consistent format", () => {
            expect(convertToColorName("primaryDark")).toEqual("colorPrimaryDark");
        });
        it("converts primary-dark to a consistent format", () => {
            expect(convertToColorName("primary-dark")).toEqual("colorPrimaryDark");
        });
        it("converts color-primary-dark to a consistent format", () => {
            expect(convertToColorName("color-primary-dark")).toEqual("colorPrimaryDark");
        });
        it("converts colorPrimaryDark to a consistent format", () => {
            expect(convertToColorName("colorPrimaryDark")).toEqual("colorPrimaryDark");
        });
    });
    describe("convertToColorName with theme", () => {
        it("converts primaryDark to a consistent format", () => {
            expect(convertToColorName("primaryDark", "turva")).toEqual("colorPrimaryDarkTurva");
        });
        it("converts primary-dark to a consistent format", () => {
            expect(convertToColorName("primary-dark", "turva")).toEqual("colorPrimaryDarkTurva");
        });
        it("converts color-primary-dark to a consistent format", () => {
            expect(convertToColorName("color-primary-dark", "turva")).toEqual("colorPrimaryDarkTurva");
        });
        it("converts colorPrimaryDark to a consistent format", () => {
            expect(convertToColorName("colorPrimaryDark", "turva")).toEqual("colorPrimaryDarkTurva");
        });
    });
    describe("getColorByName", () => {
        it("returns undefined if no name supplied", () => {
            expect(getColorByName("")).toBe(undefined);
            // @ts-ignore - ensure behaves correctly outside of TS environments
            expect(getColorByName()).toBe(undefined);
        });
        it("returns undefined for non-existent color name", () => {
            expect(getColorByName("a-color-i-just-made-up")).toBe(undefined);
        });
        it("gets primaryDark token by name", () => {
            expect(getColorByName("primaryDark")).toEqual(tokens.colorPrimaryDark);
        });
        it("gets primary-dark token by name", () => {
            expect(getColorByName("primary-dark")).toEqual(tokens.colorPrimaryDark);
        });
        it("gets color-primary-dark token by name", () => {
            expect(getColorByName("color-primary-dark")).toEqual(tokens.colorPrimaryDark);
        });
        it("gets colorPrimaryDark token by name", () => {
            expect(getColorByName("colorPrimaryDark")).toEqual(tokens.colorPrimaryDark);
        });
        it("gets undefined token by name with theme", () => {
            expect(getColorByName("", "turva")).toBe(undefined);
            expect(getColorByName(undefined, undefined)).toBe(undefined);
            expect(getColorByName(null, undefined)).toBe(undefined);
        });
        it("gets colorPrimaryDark token by name with theme", () => {
            expect(getColorByName("colorPrimaryDark", "turva")).toEqual(tokens.colorPrimaryDarkTurva);
        });
        it("gets primaryDark token by name with theme", () => {
            expect(getColorByName("primaryDark", "turva")).toEqual(tokens.colorPrimaryDarkTurva);
        });
        it("gets color-primary-dark token by name with theme", () => {
            expect(getColorByName("color-primary-dark", "turva")).toEqual(tokens.colorPrimaryDarkTurva);
        });
        it("gets primary-dark token by name with theme", () => {
            expect(getColorByName("primary-dark", "turva")).toEqual(tokens.colorPrimaryDarkTurva);
        });
        it("gets the color token by name with empty theme", () => {
            expect(getColorByName("primaryDark", "")).toEqual(tokens.colorPrimaryDark);
            expect(getColorByName("primary-dark", "")).toEqual(tokens.colorPrimaryDark);
            expect(getColorByName("color-primary-dark", "")).toEqual(tokens.colorPrimaryDark);
            expect(getColorByName("colorPrimaryDark", "")).toEqual(tokens.colorPrimaryDark);
        });
    });
    describe("getColorByName with additional colors", () => {
        it("gets the color names for complex colors", () => {
            expect(getColorByName("color-category-vehicle", "")).toEqual(tokens.colorCategoryVehicle);
            expect(getColorByName("color-category-finance", "")).toEqual(tokens.colorCategoryFinance);
            expect(getColorByName("color-category-pet", "")).toEqual(tokens.colorCategoryPet);
            expect(getColorByName("color-category-travel", "")).toEqual(tokens.colorCategoryTravel);
        });
        it("gets the color names for complex colors with empty theme", () => {
            expect(getColorByName("color-category-vehicle")).toEqual(tokens.colorCategoryVehicle);
            expect(getColorByName("color-category-finance")).toEqual(tokens.colorCategoryFinance);
            expect(getColorByName("color-category-pet")).toEqual(tokens.colorCategoryPet);
            expect(getColorByName("color-category-travel")).toEqual(tokens.colorCategoryTravel);
        });
        it("gets the color names for complex colors with turva theme", () => {
            expect(getColorByName("color-category-vehicle", "turva")).toEqual(tokens.colorCategoryVehicleTurva);
            expect(getColorByName("color-category-travel", "turva")).toEqual(tokens.colorCategoryTravelTurva);
        });
        it("gets the color names for complex colors from default if they dont exist in theme", () => {
            expect(getColorByName("color-category-finance", "turva")).toEqual(tokens.colorCategoryFinance);
            expect(getColorByName("color-category-pet", "turva")).toEqual(tokens.colorCategoryPet);
        });
    });
    describe("getFontSizeByName", () => {
        it("returns undefined if no name supplied", () => {
            expect(getFontSizeByName("")).toBe(undefined);
            // @ts-ignore - ensure behaves correctly outside of TS environments
            expect(getFontSizeByName()).toBe(undefined);
        });
        it("returns undefined for non-existent", () => {
            expect(getFontSizeByName("wrong")).toBe(undefined);
        });
        test.each(["xLarge", "x-large", "font-size-x-large", "fontSizeXLarge"])("gets fontSizeXLarge token by name", name => {
            expect(getFontSizeByName(name)).toEqual(tokens.fontSizeXLarge);
        });
    });
    describe("getFontWeightByName", () => {
        it("returns undefined if no name supplied", () => {
            expect(getFontWeightByName("")).toBe(undefined);
            // @ts-ignore - ensure behaves correctly outside of TS environments
            expect(getFontWeightByName()).toBe(undefined);
        });
        it("returns undefined for non-existent", () => {
            expect(getFontWeightByName("wrong")).toBe(undefined);
        });
        test.each(["extraBold", "extra-bold", "font-weight-extra-bold", "fontWeightExtraBold"])("gets fontWeightExtraBold token by name", name => {
            expect(getFontWeightByName(name)).toEqual(tokens.fontWeightExtraBold);
        });
    });
    describe("rgbaColorFromRgb", () => {
        test.each([
            ["rgb(255, 255, 255)", "rgba(255,255,255,0)", 0],
            ["rgb(255, 255, 255)", "rgba(255,255,255,0.1)", 0.1],
            ["rgb(1, 1, 1)", "rgba(1,1,1,1)", 1],
            [null, undefined, 1],
            [undefined, undefined, 1],
            ["", undefined, 1],
            ["rgb(1, 1, 1)", undefined, undefined],
            ["rgb(1, 1, 1)", undefined, null],
        ])("shades rgb color correctly", (color, expected, opacity) => {
            expect(rgbaColorFromRgb(color, opacity)).toEqual(expected);
        });
    });
    describe("shadeRGBColor", () => {
        test.each([
            ["rgb(255, 255, 255)", "rgb(230,230,230)", -0.1],
            ["rgb(255, 255, 255)", "rgb(255,255,255)", 0.1],
            ["rgb(1, 1, 1)", "rgb(0,0,0)", -0.6],
            ["rgb(224, 42, 13)", "rgb(202,38,12)", -0.1],
            ["rgb(999, 999, 999)", "rgb(255,255,255)", 1],
            ["rgb(-999, -999, -999)", "rgb(0,0,0)", -1],
        ])("shades rgb color correctly", (rgb, shadedRgb, amount) => {
            expect(shadeRGBColor(rgb, amount)).toEqual(shadedRgb);
        });
    });
});
