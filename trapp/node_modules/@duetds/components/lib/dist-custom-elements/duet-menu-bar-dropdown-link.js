/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, d as Host } from './p-471a62cc.js';
import { i as inheritGlobalTheme } from './p-a58bd561.js';
import { b as isEscapeKey } from './p-8f253845.js';
import { d as defineCustomElement$2 } from './p-c493eecb.js';

const duetMenuBarDropdownLinkCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;width:100%;height:100%}.duet-menu-bar-dropdown-link{display:flex;flex-direction:row;gap:12px;align-items:center;justify-content:flex-start;height:100%;padding:0.5rem 8px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.5;color:rgb(0, 41, 77);text-align:center;text-decoration:none}.duet-menu-bar-dropdown-link:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva .duet-menu-bar-dropdown-link:focus,.duet-menu-bar-dropdown-link:focus.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-menu-bar-dropdown-link.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-menu-bar-dropdown-link:hover{background:rgb(230, 242, 248)}.duet-menu-bar-dropdown-link:hover.duet-theme-turva{background:rgb(228, 228, 230)}";

const DuetMenuBarDropdownLink$1 = /*@__PURE__*/ proxyCustomElement(class DuetMenuBarDropdownLink extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.getVariant = () => {
            const slot = this.element.parentElement.parentElement.getAttribute("slot");
            switch (slot) {
                case "center":
                    return "right";
                case "right":
                    return "right";
                default:
                    return "right";
            }
        };
        this.theme = "";
        this.href = "#";
        this.icon = undefined;
        this.accessibleLabel = undefined;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
    }
    handleEscape(e) {
        if (isEscapeKey(e)) {
            const dropdown = this.element.closest("duet-menu-bar-dropdown");
            dropdown.open = false;
            dropdown.setFocus();
        }
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        return (h(Host, null, h("a", { class: {
                "duet-menu-bar-dropdown-link": true,
                [`duet-menu-bar-dropdown-link--slot-${this.getVariant()}`]: true,
                "duet-theme-turva": this.theme === "turva",
            }, href: this.href, role: "menuitem", onKeyUp: e => this.handleEscape(e), "aria-label": this.accessibleLabel }, this.icon && (h("duet-icon", { theme: this.theme, name: this.icon, size: "x-small", margin: "none", color: "currentColor" })), h("slot", null))));
    }
    get element() { return this; }
    static get style() { return duetMenuBarDropdownLinkCss; }
}, [1, "duet-menu-bar-dropdown-link", {
        "theme": [1025],
        "href": [1025],
        "icon": [1537],
        "accessibleLabel": [1, "accessible-label"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["duet-menu-bar-dropdown-link", "duet-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "duet-menu-bar-dropdown-link":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DuetMenuBarDropdownLink$1);
            }
            break;
        case "duet-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const DuetMenuBarDropdownLink = DuetMenuBarDropdownLink$1;
const defineCustomElement = defineCustomElement$1;

export { DuetMenuBarDropdownLink, defineCustomElement };
