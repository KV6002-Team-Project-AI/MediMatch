/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h } from './p-471a62cc.js';
import { d as disableBodyScroll, e as enableBodyScroll } from './p-141e14d0.js';
import { i as inheritGlobalTheme } from './p-a58bd561.js';
import { h as hasSlot } from './p-11230037.js';
import { c as createID } from './p-5e59e970.js';
import { f as focusElement, F as FocusGuard } from './p-eef66341.js';
import { b as isEscapeKey } from './p-8f253845.js';
import { a as getLanguage, g as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-2e36d5bf.js';
import { T as Teleport } from './p-ccdff614.js';
import { d as defineCustomElement$7 } from './p-6b977095.js';
import { d as defineCustomElement$6 } from './p-975a4689.js';
import { d as defineCustomElement$5 } from './p-c493eecb.js';
import { d as defineCustomElement$4 } from './p-3158e24f.js';
import { d as defineCustomElement$3 } from './p-9b174e03.js';
import { d as defineCustomElement$2 } from './p-475baac7.js';

const duetModalCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-modal-overlay{position:fixed;top:0;right:0;bottom:0;left:0;z-index:900;max-height:100vh;overflow-y:auto;visibility:hidden;background:rgba(0, 41, 77, 0.85);opacity:0;transition:300ms ease;transition-delay:200ms}.duet-modal-overlay.duet-theme-turva{background:rgba(23, 28, 58, 0.85)}.duet-modal-overlay.duet-modal-active{visibility:visible;opacity:1;transition:300ms ease;transition-delay:0s}.duet-modal-overlay.duet-disable-transitions{transition:none}.duet-modal-overlay.duet-modal-slide-up{overflow:hidden}::slotted(img){width:100%}.duet-modal-inner{display:flex;align-items:center;width:100%;min-height:100%;padding:20px 16px}@media (min-width: 36em){.duet-modal-inner{padding:48px 16px}}.duet-modal-inner.duet-modal-slide-up{align-items:stretch;justify-content:center;height:100%;padding-top:48px;padding-bottom:0;overflow:hidden}.duet-modal-inner.duet-modal-slide-up::after{position:absolute;bottom:0;z-index:300;display:block;width:100%;max-width:686px;height:48px;margin:auto;pointer-events:none;content:\"\";background:linear-gradient(rgba(255, 255, 255, 0), rgb(255, 255, 255))}.duet-modal-inner.duet-modal-slide-up::after.small{max-width:545px}.duet-modal-inner.duet-modal-slide-up::after.large{max-width:100%}@media (min-width: 36em){.duet-modal-inner.duet-modal-slide-up::after.large{max-width:1110px}}@media (max-width: 35.9375em){.duet-modal-inner.large{padding-right:0;padding-left:0}.duet-modal-inner.duet-modal-slide-up{padding:0;padding-top:28px}}.duet-modal{position:relative;width:100%;max-width:686px;margin:auto;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-weight:400;font-variant-numeric:tabular-nums;line-height:1.5;color:rgb(0, 41, 77);background:rgb(255, 255, 255);border-radius:4px;opacity:0;transition:300ms ease;transition-delay:0ms;transform:scale(0.96)}.duet-theme-turva .duet-modal{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-modal-active .duet-modal{opacity:1;transition:300ms ease;transition-delay:200ms;transform:none}.duet-modal-active .duet-modal.slide-up{top:0;transition:top 600ms ease}.duet-disable-transitions .duet-modal{transition:none}.duet-modal.small{max-width:545px}.duet-modal.large{max-width:100%}@media (min-width: 36em){.duet-modal.large{max-width:1110px}}.duet-modal.slide-up{top:100vh;margin:0;border-radius:4px 4px 0 0;opacity:1;transition:top 600ms ease}@media (max-width: 35.9375em){.duet-modal.slide-up{border-radius:20px 20px 0 0}}.duet-modal.duet-modal-has-sticky-header{height:100%;overflow:auto}.duet-modal:focus{outline:0}.duet-modal-body,.duet-modal-sticky-header{width:100%;padding:36px 28px}.duet-modal-body.duet-modal-gutter-none,.duet-modal-sticky-header.duet-modal-gutter-none{padding:0 !important}.duet-modal-body.duet-modal-gutter-small,.duet-modal-sticky-header.duet-modal-gutter-small{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large,.duet-modal-sticky-header.duet-modal-gutter-large{padding:48px 36px}@media (max-width: 22.5em){.duet-modal-body,.duet-modal-sticky-header{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large,.duet-modal-sticky-header.duet-modal-gutter-large{padding:48px 28px}}@media (max-width: 35.9375em){.duet-modal-body,.duet-modal-sticky-header{padding:36px 20px}.duet-modal-body.duet-modal-gutter-large,.duet-modal-sticky-header.duet-modal-gutter-large{padding:48px 36px}}@media (min-width: 36em){.duet-modal-body,.duet-modal-sticky-header{padding:36px}.duet-modal-body.duet-modal-gutter-large,.duet-modal-sticky-header.duet-modal-gutter-large{padding:28px 72px}}@media (min-width: 48em){.duet-modal-body,.duet-modal-sticky-header{padding:36px 72px}.duet-modal-body.duet-modal-gutter-large,.duet-modal-sticky-header.duet-modal-gutter-large{padding:36px 72px}}@media (min-width: 76.25em){.duet-modal-body,.duet-modal-sticky-header{padding:36px 48px 48px}.duet-modal-body.duet-modal-gutter-large,.duet-modal-sticky-header.duet-modal-gutter-large{padding:48px 94px}.small .duet-modal-body,.small .duet-modal-sticky-header{padding:36px 48px}}.duet-modal-header{text-align:center}.duet-modal-sticky-header{position:sticky;top:0;z-index:200;display:block;padding-bottom:12px;text-align:left;background:rgb(243, 249, 252);border-bottom:1px solid rgb(225, 227, 230)}.duet-theme-turva .duet-modal-sticky-header{background:rgb(245, 245, 247);border-bottom:1px solid rgb(228, 228, 230)}.duet-modal-close{position:absolute;top:12px;right:12px}.duet-modal-heading{width:100%;padding-right:60px;overflow:hidden;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1.25rem;font-style:normal;font-weight:600;font-variant-numeric:tabular-nums;line-height:1.25;color:rgb(0, 41, 77);text-decoration:none;text-overflow:ellipsis;letter-spacing:-0.01rem;white-space:nowrap}.duet-modal-heading.duet-p-0{padding:0 !important}.duet-modal-heading.duet-m-0{margin:0 !important}";

// The transition below is slightly higher than the actual CSS transition as VoiceOver on
// iOS has otherwise problems moving the focus from modal back to the original element.
// This issue is similar to what we’ve seen in Duet Date Picker + iOS VoiceOver.
const TRANSITION_MS = 600;
const DuetModal$1 = /*@__PURE__*/ proxyCustomElement(class DuetModal extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.duetOpen = createEvent(this, "duetOpen", 7);
        this.duetClose = createEvent(this, "duetClose", 7);
        this.duetBeforeClose = createEvent(this, "duetBeforeClose", 7);
        var _a, _b;
        /**
         * Own Properties.
         */
        this.modalId = createID("DuetModal");
        this.slotDefaultId = createID("DuetModal-default-slot");
        this.hasStickyHeader = false;
        this.isAndroidDevice = ((_b = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.indexOf("android")) > -1 || null;
        this.isSafariBrowser = /^((?!chrome|android).)*safari/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent);
        this.handleAndroidResizeEvents = () => {
            if (document.activeElement.tagName == "INPUT") {
                window.setTimeout(function () {
                    var _a;
                    try {
                        //@ts-ignore
                        (_a = document === null || document === void 0 ? void 0 : document.activeElement) === null || _a === void 0 ? void 0 : _a.scrollIntoViewIfNeeded(true);
                    }
                    catch (e) {
                        //dev-null any errors here
                    }
                }, 100);
            }
        };
        this.open = false;
        this.language = getLanguage();
        this.accessibleCloseLabelDefaults = {
            fi: "Sulje ikkuna",
            sv: "Stäng fönstret",
            en: "Close the dialog",
        };
        this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefaults, this.language);
        this.size = "medium";
        this.accessibleDescribedBy = undefined;
        this.accessibleLabelledBy = undefined;
        this.accessibleLabel = undefined;
        this.accessibleDetails = undefined;
        this.accessibleDescription = undefined;
        this.variation = "default";
        this.gutterSize = "medium";
        this.theme = "";
        this.heading = "";
        this.headingLevel = "h3";
        this.headingVisualLevel = undefined;
        this.icon = "";
        this.color = "";
        this.active = false;
        this.closeOnBlur = false;
    }
    openChanged() {
        if (this.open) {
            if (this.modalEl && this.modalEl.scrollTop) {
                this.modalEl.scrollTop = 0;
            }
            this.focusedElBeforeOpen = document.activeElement;
            disableBodyScroll(this.modalEl, { reserveScrollBarGap: true });
            this.teleport.go(true);
            setTimeout(() => {
                this.buttonEl.setFocus();
            }, TRANSITION_MS);
            setTimeout(() => {
                this.modalEl.classList.add("duet-disable-transitions");
            }, TRANSITION_MS + 200);
            // fix for android devices where scrolling and softKeyboards MAY be
            // acting weird when the modal contains an input field
            if (this.isAndroidDevice) {
                window.addEventListener("resize", this.handleAndroidResizeEvents);
            }
            this.duetOpen.emit();
        }
        else {
            this.modalEl.classList.remove("duet-disable-transitions");
            enableBodyScroll(this.modalEl);
            this.duetClose.emit();
            this.teleport.resume(TRANSITION_MS);
            setTimeout(() => {
                focusElement(this.focusedElBeforeOpen);
            }, TRANSITION_MS);
            if (this.isAndroidDevice) {
                window.removeEventListener("resize", this.handleAndroidResizeEvents);
            }
        }
    }
    activeChanged() {
        this.open = this.active;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        this.hasStickyHeader = hasSlot(this.element, "sticky-header");
        inheritGlobalTheme(this);
    }
    componentDidLoad() {
        this.teleport = new Teleport(this.element);
        if (this.active) {
            // This specific line below can’t be moved to componentWillLoad()
            // as it breaks body scroll enabling.
            this.open = true;
            this.modalEl.classList.add("duet-disable-transitions");
        }
    }
    connectedCallback() {
        connectLanguageChangeObserver(this, { prop: "accessibleCloseLabel", defaults: "accessibleCloseLabelDefaults" });
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
        enableBodyScroll(this.modalEl);
    }
    /**
     * Component event handling.
     */
    handleKeyUp(ev) {
        if (this.open) {
            // When Esc is pressed the modal should be closed
            if (isEscapeKey(ev)) {
                this.closeModal(ev);
            }
        }
    }
    /**
     * Shows the modal dialog. Additionally saves the element that triggered
     * the modal so that focus can be moved back to this specific element when
     * the modal dialog is closed.
     */
    async show() {
        this.open = true;
    }
    /**
     * Hides the modal dialog and puts focus back to the original element
     * that triggered the modal (if we’re still in the same view).
     */
    async hide() {
        this.open = false;
    }
    /**
     * Local methods.
     */
    closeModal(ev) {
        this.duetBeforeClose.emit({
            originalEvent: ev,
            component: "duet-modal",
        });
        // Make sure the event wasn’t prevented previously
        if (!ev.defaultPrevented) {
            setTimeout(() => {
                this.hide();
            }, 1);
        }
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        var _a;
        let iconColor = "primary";
        let closeColor = "secondary";
        const closingButton = (h("div", { class: "duet-modal-close" }, h("duet-button", { ref: button => (this.buttonEl = button), variation: "plain", accessibleLabel: this.accessibleCloseLabel, color: closeColor, iconSize: "large", icon: "navigation-close", iconOnly: true, margin: "none", theme: this.theme, onClick: ev => this.closeModal(ev), fixed: true })));
        if (this.theme === "turva") {
            iconColor = "primary-turva";
            closeColor = "secondary-turva";
        }
        return (h("div", { ref: modal => (this.modalEl = modal), "aria-label": this.accessibleLabel, "aria-labelledby": this.heading ? this.modalId : false, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, "aria-describedby": this.accessibleDescribedBy, role: "dialog", "aria-modal": this.isSafariBrowser ? false : true, tabindex: "-1", "aria-flowto": this.slotDefaultId, class: {
                "duet-modal-overlay": true,
                "duet-theme-turva": this.theme === "turva",
                "duet-modal-active": this.open,
                "duet-modal-slide-up": this.variation === "slide-up",
                "duet-modal-has-sticky-header": this.hasStickyHeader,
            } }, h(FocusGuard, { moveFocusTo: this.buttonEl }), h("div", { ref: modalInner => (this.modalInnerEl = modalInner), class: {
                "duet-modal-inner": true,
                [this.size]: true,
                "duet-modal-slide-up": this.variation === "slide-up",
            }, onClick: e => {
                if (this.closeOnBlur) {
                    const source = e.target || e.srcElement;
                    if (source === this.modalInnerEl) {
                        this.closeModal(e);
                    }
                }
            } }, h("div", { class: {
                "duet-modal": true,
                "duet-modal-has-sticky-header": this.hasStickyHeader,
                [this.size]: true,
                [this.variation]: true,
            } }, this.gutterSize !== "none" && !this.hasStickyHeader && h("duet-spacer", null), this.hasStickyHeader ? (h("div", { class: "duet-modal-sticky-header" }, closingButton, h("slot", { name: "sticky-header" }))) : (closingButton), h("div", { class: {
                "duet-modal-body": true,
                "duet-modal-gutter-none": this.gutterSize === "none",
                "duet-modal-gutter-small": this.gutterSize === "small",
                "duet-modal-gutter-medium": this.gutterSize === "medium",
                "duet-modal-gutter-large": this.gutterSize === "large",
            } }, h("div", { class: "duet-modal-header" }, h("span", { class: "duet-modal-inner-slot-top" }, h("slot", { name: "top" })), this.icon && h("duet-icon", { name: this.icon, size: "xx-large", color: this.color || iconColor }), this.heading && (h("duet-heading", { "visual-level": (_a = this.headingVisualLevel) !== null && _a !== void 0 ? _a : this.headingLevel, level: this.headingLevel, theme: this.theme, id: this.modalId }, this.heading))), h("span", { class: "duet-modal-inner-slot-default", id: this.slotDefaultId }, h("slot", null))))), h(FocusGuard, { moveFocusTo: this.buttonEl })));
    }
    get element() { return this; }
    static get watchers() { return {
        "open": ["openChanged"],
        "active": ["activeChanged"]
    }; }
    static get style() { return duetModalCss; }
}, [1, "duet-modal", {
        "language": [1537],
        "accessibleCloseLabelDefaults": [1, "accessible-close-label-default"],
        "accessibleCloseLabel": [1025, "accessible-close-label"],
        "size": [1],
        "accessibleDescribedBy": [1, "accessible-described-by"],
        "accessibleLabelledBy": [1, "accessible-labelled-by"],
        "accessibleLabel": [1, "accessible-label"],
        "accessibleDetails": [1, "accessible-details"],
        "accessibleDescription": [1, "accessible-description"],
        "variation": [1],
        "gutterSize": [1, "gutter-size"],
        "theme": [1025],
        "heading": [1],
        "headingLevel": [1, "heading-level"],
        "headingVisualLevel": [1, "heading-visual-level"],
        "icon": [1],
        "color": [1],
        "active": [1540],
        "closeOnBlur": [1028, "close-on-blur"],
        "open": [32],
        "show": [64],
        "hide": [64]
    }, [[8, "keyup", "handleKeyUp"]], {
        "open": ["openChanged"],
        "active": ["activeChanged"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["duet-modal", "duet-button", "duet-heading", "duet-icon", "duet-spacer", "duet-spinner", "duet-visually-hidden"];
    components.forEach(tagName => { switch (tagName) {
        case "duet-modal":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DuetModal$1);
            }
            break;
        case "duet-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "duet-heading":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "duet-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "duet-spacer":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "duet-spinner":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "duet-visually-hidden":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const DuetModal = DuetModal$1;
const defineCustomElement = defineCustomElement$1;

export { DuetModal, defineCustomElement };
