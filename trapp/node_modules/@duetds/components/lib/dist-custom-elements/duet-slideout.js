/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h, d as Host } from './p-471a62cc.js';
import { d as disableBodyScroll, e as enableBodyScroll } from './p-141e14d0.js';
import { i as inheritGlobalTheme } from './p-a58bd561.js';
import { h as hasSlot } from './p-11230037.js';
import { f as focusElement, F as FocusGuard } from './p-eef66341.js';
import { b as isEscapeKey } from './p-8f253845.js';
import { a as getLanguage, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver, g as getLocaleString } from './p-2e36d5bf.js';
import { T as Teleport } from './p-ccdff614.js';
import { g as getColorByName } from './p-e078836c.js';
import { d as defineCustomElement$2 } from './p-c493eecb.js';

const duetSlideoutCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;position:absolute;height:100%}::slotted(*){position:relative;width:100%;visibility:hidden;opacity:0}:host([open]) ::slotted(*){visibility:visible;opacity:1}:host(:not([open])) ::slotted(duet-slideout-panel){display:none}.duet-slideout{display:flex;align-items:center;height:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.5;color:rgb(0, 41, 77)}.duet-slideout.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-slideout .desktop-bg{display:none}@media (min-width: 62em){.duet-slideout .desktop-bg{position:fixed;top:0;left:0;z-index:400;display:block;width:100%;height:100%;visibility:hidden;background:rgba(0, 41, 77, 0.6);opacity:0;transition:600ms ease}.duet-slideout .desktop-bg:not(.hidden){visibility:visible;opacity:1;transition:600ms ease}}@media (min-width: 62em){.duet-slideout.duet-theme-turva .desktop-bg{background:rgba(23, 28, 58, 0.6)}}.duet-slideout .dialog{position:fixed;top:0;bottom:0;left:0;z-index:400;width:100%;height:100%;padding-bottom:75px;overflow-y:auto;box-shadow:0 3px 6px 0 rgba(0, 41, 77, 0.1) inset}@media (min-width: 62em){.duet-slideout .dialog{right:0;left:auto;width:500px;padding-bottom:0;transition:right 300ms ease;transition-delay:0s}}.duet-slideout .dialog .top-container.has-sticky-header-slot{position:sticky;top:0;z-index:200}.duet-slideout .dialog .top-container.has-sticky-header-slot .top{background:rgb(243, 249, 252)}.duet-slideout .dialog .top-container.has-sticky-header-slot .sticky-header{display:block}.duet-slideout .dialog .top{position:relative;z-index:1;display:flex;align-items:center;justify-content:flex-end;padding:4px}.duet-slideout .dialog .top button{cursor:pointer}.duet-slideout .dialog .top button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-slideout .dialog .top duet-icon{padding:16px}.duet-slideout .dialog .sticky-header{display:none;width:100%;padding:0 1.5rem;margin-bottom:20px;background:rgb(243, 249, 252);border-bottom:1px solid rgb(225, 227, 230)}.duet-slideout .dialog .items{display:flex;flex-direction:column;align-items:flex-start;justify-content:center;width:100%;padding:0 1.5rem}.duet-slideout .dialog.hidden{pointer-events:none;visibility:hidden}@media (min-width: 62em){.duet-slideout .dialog.hidden{right:-500px;transition:300ms ease}}.duet-slideout.duet-theme-turva .dialog{box-shadow:0 3px 6px 0 rgba(23, 28, 58, 0.1) inset}.duet-slideout.duet-theme-turva button{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-slideout.duet-theme-turva button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-slideout.duet-theme-turva button.active{color:rgb(198, 12, 48)}.duet-slideout.duet-theme-turva button.active::after{background:rgb(198, 12, 48)}.duet-slideout.duet-theme-turva .has-sticky-header-slot .top{background:rgb(245, 245, 247)}.duet-slideout.duet-theme-turva .has-sticky-header-slot .sticky-header{background:rgb(245, 245, 247);border-bottom:1px solid rgb(228, 228, 230)}.duet-slideout.duet-theme-turva .dialog .top button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}slot{color:rgb(0, 41, 77)}.duet-theme-turva slot{color:rgb(23, 28, 58)}";

const DuetSlideout$1 = /*@__PURE__*/ proxyCustomElement(class DuetSlideout extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.duetSlideoutEvent = createEvent(this, "duetSlideoutEvent", 7);
        this.exitLangObject = {
            en: "Exit the menu",
            fi: "Poistu valikosta",
            sv: "Avsluta menyn",
        };
        this.topLevelOpenMenuBarLangObject = {
            en: "Exit this menu to find top level items",
            fi: "Poistu tästä valikosta löytääksesi ylätason kohteet",
            sv: "Stäng den här menyn för att hitta objekt på toppnivå",
        };
        this.isSafariBrowser = /^((?!chrome|android).)*safari/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent);
        this.hasStickyHeaderSlot = false;
        this.handleBodyScrolling = () => {
            if (this.displaying && this.open) {
                disableBodyScroll(this.dialog, { reserveScrollBarGap: true });
            }
            else {
                enableBodyScroll(this.dialog);
            }
        };
        this.setOpenButton = (element) => {
            if (!element) {
                return;
            }
            try {
                const button = element;
                button.accessiblePopup = "true";
                button.accessibleExpanded = false;
                this.openButton = button;
            }
            catch (_e) { }
        };
        this.openButtonEventListener = (e) => {
            e.stopPropagation();
            e.preventDefault();
            this.onClick(e);
        };
        this.getOpenPanel = () => {
            return this.element.querySelector("duet-slideout-panel[open]");
        };
        this.toggleMenu = (e) => {
            this.open = !this.open;
            if (this.openButton) {
                this.openButton.accessibleExpanded = this.open;
            }
            this.duetSlideoutEvent.emit({
                originalEvent: e,
                data: { element: this.element, open: this.open },
                component: "duet-slideout",
            });
            if (this.open) {
                const openPanel = this.getOpenPanel();
                this.teleport.go(true);
                if (openPanel) {
                    openPanel.setFocus();
                    this.handleBodyScrolling();
                }
                else {
                    setTimeout(() => {
                        this.closeButton.focus();
                        this.handleBodyScrolling();
                    }, 200);
                }
            }
            else {
                setTimeout(() => {
                    focusElement(this.openButton);
                    this.handleBodyScrolling();
                    this.teleport.resume();
                }, 200);
            }
        };
        this.bgOnClick = (e) => {
            if (this.open) {
                this.toggleMenu(e);
            }
        };
        this.onClick = (e) => {
            this.toggleMenu(e);
        };
        this.language = getLanguage();
        this.displaying = false;
        this.openPanel = false;
        this.theme = "";
        this.accessibleRole = "menubar";
        this.open = false;
        this.opener = undefined;
        this.backgroundColor = "gray-lightest";
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        this.hasStickyHeaderSlot = hasSlot(this.element, "sticky-header");
        this.teleport = new Teleport(this.element);
    }
    connectedCallback() {
        connectLanguageChangeObserver(this);
        if (this.opener) {
            this.setOpenButton(document.getElementById(this.opener));
            this.openButton.addEventListener("click", this.openButtonEventListener);
        }
        this.mutationObserver = new MutationObserver(() => {
            this.openPanel = !!this.getOpenPanel();
        });
        this.mutationObserver.observe(this.element, { childList: true, attributeFilter: ["open"], subtree: true });
    }
    componentDidRender() {
        // intersection observer is here to observe when the dialog is actually visible and when its not
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
        this.intersectionObserver = new IntersectionObserver(entries => {
            this.displaying = entries[0].isIntersecting;
            this.handleBodyScrolling();
        });
        // this.dialog can't be observed before rendering because its not available yet
        this.intersectionObserver.observe(this.dialog);
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
        enableBodyScroll(this.dialog);
        if (this.intersectionObserver) {
            this.intersectionObserver.disconnect();
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
        if (this.openButton) {
            this.openButton.removeEventListener("click", this.openButtonEventListener);
        }
    }
    /**
     * Component event handling.
     */
    handleKeyUp(ev) {
        // When Esc is pressed
        if (isEscapeKey(ev)) {
            if (this.open) {
                this.toggleMenu(ev);
            }
        }
    }
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    async setFocus(options) {
        var _a;
        (_a = this.openButton) === null || _a === void 0 ? void 0 : _a.focus(options);
    }
    /**
     * Toggles the slideout.
     */
    async toggle() {
        const event = new CustomEvent("toggle");
        this.toggleMenu(event);
        setTimeout(() => {
            this.closeButton.focus();
        }, 200);
    }
    /**
     * Shows the slideout. Additionally saves the element (DuetButton or DuetMenuBarButton) that triggered
     * the slideout so that focus can be moved back to this specific element when
     * the slideout dialog is closed.
     */
    async show() {
        if (this.open) {
            return;
        }
        this.setOpenButton(document.activeElement);
        this.toggleMenu(new CustomEvent("toggle"));
    }
    /**
     * Hides the slideout dialog and puts focus back to the original element
     * that triggered the slideout (if we’re still in the same view).
     */
    async hide() {
        if (!this.open) {
            return;
        }
        this.toggleMenu(new CustomEvent("toggle"));
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        const styles = {
            background: getColorByName(this.backgroundColor, this.theme),
        };
        const topLevelOpenMenuBarTranslation = getLocaleString(this.topLevelOpenMenuBarLangObject);
        const exitTranslation = getLocaleString(this.exitLangObject);
        return (h(Host, null, h("div", { class: { "duet-slideout": true, "duet-theme-turva": this.theme === "turva" } }, h("div", { class: {
                "desktop-bg": true,
                hidden: !this.open,
            }, onClick: this.bgOnClick }), h("div", { ref: element => (this.dialog = element), tabindex: "-1", role: "dialog", id: "dialog", "aria-labelledby": "button", "aria-modal": this.isSafariBrowser ? false : true, "aria-flowto": "slot-container", class: {
                dialog: true,
                hidden: !this.open,
            }, style: styles }, h(FocusGuard, { moveFocusTo: this.closeButton }), h("div", { class: { "top-container": true, "has-sticky-header-slot": this.hasStickyHeaderSlot } }, h("div", { class: "top" }, h("button", { ref: element => (this.closeButton = element), "aria-haspopup": "dialog", "aria-controls": "dialog", "aria-expanded": this.open ? "true" : "false", "aria-label": `${exitTranslation}`, type: "button", class: {
                "slideout-close": true,
                active: this.open,
            }, onClick: this.onClick, inert: this.openPanel }, h("duet-icon", { name: "navigation-close", size: "small", margin: "none", color: "secondary" }))), h("div", { class: "sticky-header" }, h("slot", { name: "sticky-header" }))), h("div", { id: "slot-container", role: this.accessibleRole, "aria-label": this.openPanel ? topLevelOpenMenuBarTranslation : null, class: {
                items: true,
            } }, h("slot", null)), h(FocusGuard, { moveFocusTo: this.closeButton })))));
    }
    get element() { return this; }
    static get style() { return duetSlideoutCss; }
}, [1, "duet-slideout", {
        "theme": [1025],
        "accessibleRole": [1, "accessible-role"],
        "open": [1540],
        "opener": [1],
        "backgroundColor": [1537, "background-color"],
        "language": [32],
        "displaying": [32],
        "openPanel": [32],
        "setFocus": [64],
        "toggle": [64],
        "show": [64],
        "hide": [64]
    }, [[8, "keyup", "handleKeyUp"]]]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["duet-slideout", "duet-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "duet-slideout":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DuetSlideout$1);
            }
            break;
        case "duet-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const DuetSlideout = DuetSlideout$1;
const defineCustomElement = defineCustomElement$1;

export { DuetSlideout, defineCustomElement };
