/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h } from './p-471a62cc.js';
import { g as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-2e36d5bf.js';

const duetTabCss = ".sc-duet-tab-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-tab.sc-duet-tab{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:none;width:100%}.duet-tab.selected.sc-duet-tab{display:block}";

const DuetTab$1 = /*@__PURE__*/ proxyCustomElement(class DuetTab extends H {
    constructor() {
        super();
        this.__registerHost();
        this.label = undefined;
        this.caption = undefined;
        this.selected = undefined;
        this.accessibleDescriptionDefault = null;
        this.accessibleDescription = this
            .accessibleDescriptionDefault
            ? getLocaleString(this.accessibleDescriptionDefault)
            : null;
        this.accessibleLabelledBy = undefined;
    }
    /**
     * Component lifecycle events.
     */
    connectedCallback() {
        connectLanguageChangeObserver(this, { prop: "accessibleDescription", defaults: "accessibleDescriptionDefault" });
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        return (h("div", { role: "tabpanel", class: { "duet-tab": true, selected: this.selected }, "aria-description": this.accessibleDescription, "aria-labelledby": this.accessibleLabelledBy }, h("slot", null)));
    }
    get element() { return this; }
    static get style() { return duetTabCss; }
}, [6, "duet-tab", {
        "label": [513],
        "caption": [513],
        "selected": [516],
        "accessibleDescriptionDefault": [1, "accessible-description-defaults"],
        "accessibleDescription": [1025, "accessible-description"],
        "accessibleLabelledBy": [1, "accessible-labelled-by"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["duet-tab"];
    components.forEach(tagName => { switch (tagName) {
        case "duet-tab":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DuetTab$1);
            }
            break;
    } });
}

const DuetTab = DuetTab$1;
const defineCustomElement = defineCustomElement$1;

export { DuetTab, defineCustomElement };
