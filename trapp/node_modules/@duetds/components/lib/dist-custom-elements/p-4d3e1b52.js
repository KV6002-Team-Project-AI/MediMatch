/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h, d as Host } from './p-471a62cc.js';
import { i as inheritGlobalTheme } from './p-a58bd561.js';
import { c as createID } from './p-5e59e970.js';
import { d as debounce } from './p-9e371678.js';
import { i as isKeyboardClick } from './p-8f253845.js';
import { g as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-2e36d5bf.js';
import { c as capitalizeFirstLetter, g as getColorByName, s as shadeRGBColor } from './p-e078836c.js';
import { d as defineCustomElement$2 } from './p-c493eecb.js';
import { d as defineCustomElement$1 } from './p-475baac7.js';

const duetActionButtonCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}.duet-action-button{display:inline-flex;align-items:center;justify-content:center;width:32px;height:32px;min-height:auto !important;padding:0 !important;margin:0 0 0 8px;color:rgb(0, 41, 77);white-space:nowrap;cursor:pointer;background:rgb(245, 248, 250);border-radius:50%;transition:background-color 300ms ease !important}.duet-action-button.duet-theme-turva{color:rgb(23, 28, 58);background:rgb(245, 245, 247)}.duet-action-button duet-icon{display:block}@media (max-width: 35.9375em){.duet-action-button{width:32px;height:32px}}.duet-action-button:not(:disabled):hover{background:#e9ecee}.duet-action-button:not(:disabled):hover.duet-theme-turva{background:#e9e9eb}.duet-action-button:focus{outline:0;box-shadow:0 0 0 2px #0077b3 !important}.duet-action-button:focus.duet-theme-turva{box-shadow:0 0 0 2px #171c3a !important}.duet-action-button:active:focus{background:#dddfe1 !important;box-shadow:none}.duet-action-button:active:focus.duet-theme-turva{background:#ddddde !important}.duet-action-button:disabled{color:rgb(144, 149, 153);cursor:default;background:rgb(245, 248, 250);opacity:0.75}.duet-action-button.duet-theme-turva:disabled{color:rgb(116, 116, 117);background:rgb(245, 245, 247)}";

const DuetActionButton = /*@__PURE__*/ proxyCustomElement(class DuetActionButton extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.duetActionEvent = createEvent(this, "duetActionEvent", 6);
        this.listId = createID("duet-action-button");
        /**
         * Private methods.
         */
        //helper to emit relevant page events
        this.emitPageEvent = debounce(e => {
            this.duetActionEvent.emit({
                component: "duet-action-button",
                originalEvent: e,
                action: this.actionId,
                name: this.actionName,
                meta: this.actionMeta,
                id: this.listId,
            });
        });
        this.numbersStore = "";
        this.theme = "";
        this.iconName = "action-arrow-left-small";
        this.iconColor = "currentColor";
        this.iconSize = "xx-small";
        this.actionName = "default-action";
        this.actionId = undefined;
        this.actionMeta = undefined;
        this.disabled = false;
        this.color = "";
        this.background = "";
        this.accessibleTitle = true;
        this.accessibleDescribedBy = undefined;
        this.accessibleDetails = undefined;
        this.accessibleLabelledBy = undefined;
        this.accessibleDescription = undefined;
        this.accessibleLabelsDefaults = {
            en: "Click to activate action",
            fi: "Klikkaa aktivoidaksesi toiminto",
            sv: "Klicka för att aktivera åtgärd",
        };
        this.accessibleLabel = getLocaleString(this.accessibleLabelsDefaults);
        this.accessibleControls = "";
        this.url = undefined;
    }
    //handle a11y keyboard navigation events
    async onKeyboardDown(e) {
        if (isKeyboardClick(e)) {
            this.emitPageEvent(e);
        }
    }
    //return readable title for the action-button
    getTitle() {
        let titleString = "";
        if (typeof this.accessibleTitle === "string") {
            titleString = this.accessibleTitle;
        }
        if (this.accessibleTitle === true) {
            titleString = capitalizeFirstLetter(`${this.actionName}`);
        }
        return titleString;
    }
    async onMouseHandler(e) {
        e.preventDefault();
        this.duetActionEvent.emit({
            component: "duet-action-button",
            originalEvent: e,
            action: this.actionName,
            id: this.actionId,
            meta: this.actionMeta,
        });
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
    }
    connectedCallback() {
        connectLanguageChangeObserver(this, { prop: "accessibleLabel", defaults: "accessibleLabelsDefaults" });
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
    }
    /**
     * Sets focus on the specified `duet-action-button`. Use this method instead of the global
     * `button.focus()`.
     */
    async setFocus(options) {
        if (this.nativeButton) {
            this.nativeButton.focus(options);
        }
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        const color = this.color === "currentColor" ? "currentColor" : getColorByName(this.color, this.theme);
        const backgroundColor = getColorByName(this.background, this.theme);
        const backgroundHoverColor = backgroundColor ? shadeRGBColor(backgroundColor, -0.1) : backgroundColor;
        const backgroundStyles = backgroundColor
            ? `
          button.duet-action-button {
            background: ${backgroundColor} !important;
          }
          button.duet-action-button:not(:disabled):hover {
            background: ${backgroundHoverColor} !important;
          }
        `
            : "";
        const styles = {
            color,
            "border-color": getColorByName(this.iconColor, this.theme),
            "border-width": "1px",
            "border-style": "solid",
        };
        const commonProps = {
            ref: button => (this.nativeButton = button),
            part: "button",
            style: styles,
            disabled: this.disabled,
            id: this.listId,
            type: "button",
            "aria-label": this.accessibleLabel,
            "aria-labelledby": this.accessibleLabelledBy,
            "aria-description": this.accessibleDescription,
            "aria-describedby": this.accessibleDescribedBy,
            "aria-details": this.accessibleDetails,
            "aria-controls": this.accessibleControls,
            title: this.getTitle(),
            class: {
                "duet-action-button": true,
                "duet-action-button--disabled": this.disabled,
                [`duet-action-button--${this.theme}`]: this.theme !== "",
                "duet-theme-turva": this.theme === "turva",
            },
        };
        return (h(Host, { onKeyDown: e => this.onKeyboardDown(e) }, h("style", { innerHTML: backgroundStyles }), this.url && !this.disabled ? (h("a", Object.assign({}, commonProps, { href: this.url }), h("duet-icon", { part: "icon", name: this.iconName, color: this.iconColor, margin: "none", size: this.iconSize }))) : (h("button", Object.assign({}, commonProps, { onClick: e => this.onMouseHandler(e) }), h("duet-icon", { part: "icon", name: this.iconName, color: this.iconColor, margin: "none", size: this.iconSize }), h("duet-visually-hidden", null, h("slot", null))))));
    }
    get element() { return this; }
    static get style() { return duetActionButtonCss; }
}, [1, "duet-action-button", {
        "theme": [1025],
        "iconName": [1, "icon-name"],
        "iconColor": [1, "icon-color"],
        "iconSize": [1, "icon-size"],
        "actionName": [1, "action-name"],
        "actionId": [1, "action-id"],
        "actionMeta": [1, "action-meta"],
        "disabled": [4],
        "color": [513],
        "background": [1],
        "accessibleTitle": [8, "title"],
        "accessibleDescribedBy": [1, "accessible-described-by"],
        "accessibleDetails": [1, "accessible-details"],
        "accessibleLabelledBy": [1, "accessible-labelled-by"],
        "accessibleDescription": [1, "accessible-description"],
        "accessibleLabelsDefaults": [16],
        "accessibleLabel": [1025, "accessible-label"],
        "accessibleControls": [1, "accessible-controls"],
        "url": [513],
        "numbersStore": [32],
        "setFocus": [64]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["duet-action-button", "duet-icon", "duet-visually-hidden"];
    components.forEach(tagName => { switch (tagName) {
        case "duet-action-button":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DuetActionButton);
            }
            break;
        case "duet-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "duet-visually-hidden":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { DuetActionButton as D, defineCustomElement as d };
