/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, F as Fragment, d as Host } from './p-471a62cc.js';
import { a as actionArrowRight } from './p-6fa39608.js';
import { a as actionNewWindowSmall } from './p-f11208c3.js';
import { D as DuetStringsExternalDefaults } from './p-4ab776f4.js';
import { i as inheritGlobalTheme } from './p-a58bd561.js';
import { a as getLanguage, g as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-2e36d5bf.js';
import { b as breakpointToToken } from './p-e078836c.js';
import { d as defineCustomElement$1 } from './p-c493eecb.js';

const duetLinkCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline}:host(.duet-link-block){display:block}.duet-link{display:inline;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-style:normal;font-weight:400;color:rgb(0, 119, 179);text-decoration:underline;border-radius:4px;transition:300ms ease}.duet-link:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva .duet-link:focus,.duet-link:focus.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-link.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(198, 12, 48)}.duet-link:hover{color:rgb(0, 77, 128);text-decoration:none}.duet-link:hover.duet-theme-turva{color:rgb(148, 9, 37)}.duet-link:active{opacity:0.75;transition:none}.duet-link-is-external.duet-link:not(.block){text-decoration:none}.duet-link-is-external.duet-link:not(.block) .duet-link-content{text-decoration:underline}.duet-link-is-external.duet-link:not(.block):hover>.duet-link-content{text-decoration:none}.duet-link-is-external.duet-link:not(.block) .duet-link-external{text-decoration:none;white-space:nowrap}.duet-tab-to-link{padding:15px 28px 16px !important;position:absolute;top:-100%;left:-100%;z-index:200;width:1px;min-width:190px;height:1px;overflow:hidden;font-weight:600;color:rgb(0, 119, 179);text-align:center;text-decoration:none;background:rgb(255, 255, 255);border-radius:4px;opacity:0;transition:none}.duet-tab-to-link.duet-theme-turva{min-width:120px;color:rgb(23, 28, 58)}@media (min-width: 106.25em){.duet-tab-to-link{margin-left:20px}}.duet-tab-to-link:focus{top:12px;left:20px;width:auto;height:auto;outline:0;opacity:1}.block.duet-link{display:grid;grid-template-columns:1fr auto;gap:16px;align-items:start;padding:16px;font-weight:600;color:rgb(0, 41, 77);text-decoration:none}.block.duet-link.duet-link-has-icon{grid-template-columns:auto 1fr auto}.block.duet-link.none{padding:0}.block .block__content{position:relative;bottom:2px}.block .block__chevron{align-self:center}.block .block__chevron-icon{transition:300ms ease}.block:hover .block__chevron-icon{transform:translateX(4px)}";

const DuetLink = /*@__PURE__*/ proxyCustomElement(class DuetLink extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.variation = "default";
        this.accessibleLabel = undefined;
        this.language = getLanguage();
        this.accessibleLabelExternalDefaults = DuetStringsExternalDefaults;
        this.accessibleLabelExternal = getLocaleString(this.accessibleLabelExternalDefaults);
        this.identifier = undefined;
        this.theme = "";
        this.url = "#";
        this.external = false;
        this.tabToLink = false;
        this.icon = undefined;
        this.iconColor = "currentColor";
        this.iconResponsive = false;
        this.padding = "auto";
        this.isSmallScreen = false;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        this.initMediaQuery();
    }
    connectedCallback() {
        connectLanguageChangeObserver(this, {
            prop: "accessibleLabelExternal",
            defaults: "accessibleLabelExternalDefaults",
        });
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
        this.destroyMediaQuery();
    }
    /**
     * Sets focus on the specified `duet-link`. Use this method instead of the global
     * `link.focus()`.
     */
    async setFocus(options) {
        this.nativeLink.focus(options);
    }
    initMediaQuery() {
        this.screenTestBound = this.screenTest.bind(this);
        this.mediaQuery = window.matchMedia(breakpointToToken["xx-small"]);
        this.isSmallScreen = this.mediaQuery.matches;
        this.mediaQuery.addEventListener("change", this.screenTestBound);
    }
    destroyMediaQuery() {
        if (!this.mediaQuery) {
            return;
        }
        this.mediaQuery.removeEventListener("change", this.screenTestBound);
    }
    screenTest(event) {
        this.isSmallScreen = event.matches;
    }
    getAccessibleLabel() {
        if (this.accessibleLabel) {
            return this.accessibleLabel;
        }
        if (!this.element.innerHTML) {
            return "";
        }
        const capitalized = this.element.innerHTML[0].toUpperCase() + this.element.innerHTML.slice(1);
        return `${capitalized}. ${this.external ? `${this.accessibleLabelExternal}.` : ""}`;
    }
    renderContent() {
        return (h(Fragment, null, h("span", { class: "duet-link-content", part: "duet-link-content" }, h("slot", null)), this.external && (h(Fragment, null, h("span", { class: "duet-link-external" }, "\u00A0", h("duet-icon", { icon: actionNewWindowSmall.svg, size: "xx-small", margin: "none", color: "currentColor" }))))));
    }
    renderGrid() {
        return (h(Fragment, null, this.icon && (h("span", { class: "block__icon" }, h("duet-icon", { size: this.iconResponsive ? (this.isSmallScreen ? "medium" : "large") : "x-small", name: this.icon, margin: "none", color: this.iconColor }))), h("span", { class: "block__content" }, this.renderContent()), h("span", { class: "block__chevron", part: "block-chevron" }, h("duet-icon", { class: "block__chevron-icon", icon: actionArrowRight.svg, size: "x-small", margin: "none", color: "primary-dark" }))));
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        // Notice that the external icon needs to be places right after the last word of the link.
        // This is why we use &nbps; to keep everything on the same line.
        return (h(Host, { class: {
                "duet-link-block": this.variation === "block",
            } }, h("a", { href: this.url, class: {
                "duet-link": true,
                "duet-link-is-external": this.external,
                "duet-link-has-icon": !!this.icon,
                "duet-tab-to-link": this.tabToLink,
                "duet-theme-turva": this.theme === "turva",
                "duet-p-0": this.padding === "none",
                [this.padding]: true,
                [this.variation]: true,
            }, target: this.external ? "_blank" : "_self", "aria-label": this.getAccessibleLabel(), id: this.identifier, ref: el => (this.nativeLink = el), part: "duet-link", rel: this.external ? "noopener" : undefined }, this.variation === "block" ? this.renderGrid() : this.renderContent())));
    }
    static get delegatesFocus() { return true; }
    get element() { return this; }
    static get style() { return duetLinkCss; }
}, [17, "duet-link", {
        "variation": [1],
        "accessibleLabel": [1, "accessible-label"],
        "language": [1537],
        "accessibleLabelExternalDefaults": [1, "accessible-label-external-default"],
        "accessibleLabelExternal": [1025, "accessible-label-external"],
        "identifier": [1],
        "theme": [1025],
        "url": [513],
        "external": [4],
        "tabToLink": [4, "tab-to-link"],
        "icon": [1],
        "iconColor": [1, "icon-color"],
        "iconResponsive": [4, "icon-responsive"],
        "padding": [1],
        "isSmallScreen": [32],
        "setFocus": [64]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["duet-link", "duet-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "duet-link":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DuetLink);
            }
            break;
        case "duet-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { DuetLink as D, defineCustomElement as d };
