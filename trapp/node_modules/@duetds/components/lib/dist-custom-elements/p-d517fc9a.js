/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h } from './p-471a62cc.js';
import { i as inheritGlobalTheme } from './p-a58bd561.js';
import { g as getLocaleString } from './p-2e36d5bf.js';
import { p as parsePossibleJSON } from './p-0e052642.js';
import { d as defineCustomElement$9 } from './p-4d3e1b52.js';
import { d as defineCustomElement$8 } from './p-1c7bd169.js';
import { d as defineCustomElement$7 } from './p-975a4689.js';
import { d as defineCustomElement$6 } from './p-c493eecb.js';
import { d as defineCustomElement$5 } from './p-9a9a04bd.js';
import { d as defineCustomElement$4 } from './p-fc6bb9ab.js';
import { d as defineCustomElement$3 } from './p-254a95d4.js';
import { d as defineCustomElement$2 } from './p-3158e24f.js';
import { d as defineCustomElement$1 } from './p-475baac7.js';

const getError = (code, errorCodes) => {
    let error = {
        type: undefined,
        system_message: undefined,
        message: undefined,
    };
    errorCodes = parsePossibleJSON(errorCodes);
    error = errorCodes.filter(errorItem => {
        // the == is intentional we may be comparing numbers to strings - and that is ok here
        return errorItem.type == code;
    })[0];
    if (!error) {
        error = errorCodes.filter(errorItem => {
            return errorItem.type === "default";
        })[0];
    }
    return error;
};
const getI18nError = (errorCode, errorCodes) => {
    const errorFromJson = getError(errorCode, errorCodes);
    const i18String = getLocaleString(errorFromJson.message);
    if (i18String === "" || !i18String) {
        return errorFromJson.system_message;
    }
    else {
        return i18String;
    }
};

const formatBytes = (bytes, decimals = 2) => {
    if (bytes === 0) {
        return "0 Bytes";
    }
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
};

const duetUploadItemCss = ".file-link::part(duet-link){text-decoration:none}";

const DuetUploadItem = /*@__PURE__*/ proxyCustomElement(class DuetUploadItem extends H {
    constructor() {
        super();
        this.__registerHost();
        this.fileUploadingInfo = {
            fi: "Tiedosto latautuu",
            sv: "Filen laddas upp",
            en: "File is uploading",
        };
        this.onLinkClick = (event) => {
            const { url, meta } = this.data;
            if (!!this.linkClickEvent) {
                event.preventDefault();
                this.linkClickEvent.emit({
                    component: "duet-upload",
                    data: { name: this.data.item.name, url, meta },
                });
            }
        };
        this.theme = "";
        this.data = undefined;
        this.type = undefined;
        this.showLinks = undefined;
        this.actions = undefined;
        this.label = undefined;
        this.categoryLabel = undefined;
        this.errorCodes = undefined;
        this.showCategory = undefined;
        this.linkClickEvent = undefined;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
    }
    /**
     * focusActionButton.
     */
    async focusActionButton() {
        if (this.actionButton) {
            await this.actionButton.setFocus({ preventScroll: true });
            this.actionButton.scrollIntoView({ behavior: "smooth", block: "center", inline: "nearest" });
        }
    }
    getFileNameLine() {
        const { item, size, uploaded, url, progress, error } = this.data;
        const { name } = item;
        const ContentName = (h("span", { class: "duet-upload-item-name" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name));
        const SizeText = (h("span", { class: "duet-upload-item-size", style: { fontSize: "14px", fontWeight: "400" } }, "(", formatBytes(size), ")"));
        switch (this.type) {
            case "inprogress":
                return (h("span", { class: "duet-upload-item-name", role: "status" }, h("duet-paragraph", { class: "duet-upload-item-name", color: "gray-darker", margin: "none", weight: "semi-bold" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name), h("duet-visually-hidden", null, h("duet-paragraph", null, getLocaleString(this.fileUploadingInfo))), h("duet-progress", { progress: Math.ceil(progress), "aria-hidden": true })));
            case "pending":
                return (h("span", { class: "duet-upload-item-name" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name));
            case "failure":
                return (h("span", { class: "duet-upload-item-error", role: "status" }, h("duet-paragraph", { class: "duet-upload-item-name", color: "danger", margin: "none", weight: "semi-bold" }, h("duet-icon", { margin: "none", size: "x-small", name: "messaging-attachment" }), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), name), h("duet-paragraph", { class: "duet-upload-item-error-label", size: "small", margin: "none", color: "danger" }, getI18nError(error.type, this.errorCodes))));
            default:
                return uploaded && url && this.showLinks ? (h("duet-paragraph", { color: "secondary", margin: "none", weight: "semi-bold" }, h("duet-link", { class: "file-link", onClick: this.onLinkClick, url: url }, ContentName), h("duet-spacer", { size: "xx-small", direction: "horizontal" }), SizeText)) : (h("duet-paragraph", { color: "secondary", margin: "none", weight: "semi-bold" }, ContentName, h("duet-spacer", { size: "xx-small", direction: "horizontal" }), SizeText));
        }
    }
    render() {
        const { uid, meta, item } = this.data;
        const Badges = meta && meta.badges ? (h("span", null, meta.badges.map(badgeText => (h("duet-badge", { color: "primary" }, badgeText))))) : undefined;
        const actionDescription = `${meta && meta.badges ? meta.badges.join(",") : ""} ${item.name}`;
        return (h("div", { class: {
                "upload-item-row": true,
            } }, this.showCategory && (h("div", { class: "item-categories" }, h("duet-heading", { class: "heading", color: "color-secondary", level: "h6", weight: "semibold" }, getLocaleString(this.categoryLabel)), Badges)), h("div", { class: { "item-name": true, "no-category": !this.showCategory } }, !!this.label && (h("duet-heading", { class: "heading", color: "color-secondary", level: "h6", weight: "semibold" }, getLocaleString(this.label))), this.getFileNameLine()), h("div", { class: "item-actions" }, this.actions.map(actionItem => {
            return (h("duet-action-button", { actionMeta: Object.assign({}, meta || {}), actionId: uid || null, actionName: actionItem.name, theme: this.theme, iconName: actionItem.icon, iconColor: actionItem.color, iconSize: actionItem.size, background: actionItem.background, "accessible-label": `${actionDescription} ${getLocaleString(actionItem.label)} `, accessibleTitle: false, ref: button => (this.actionButton = button) }));
        }))));
    }
    get element() { return this; }
    static get style() { return duetUploadItemCss; }
}, [0, "duet-upload-item", {
        "theme": [1025],
        "data": [16],
        "type": [1],
        "showLinks": [4, "show-links"],
        "actions": [8],
        "label": [16],
        "categoryLabel": [16],
        "errorCodes": [16],
        "showCategory": [4, "show-category"],
        "linkClickEvent": [16],
        "focusActionButton": [64]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["duet-upload-item", "duet-action-button", "duet-badge", "duet-heading", "duet-icon", "duet-link", "duet-paragraph", "duet-progress", "duet-spacer", "duet-visually-hidden"];
    components.forEach(tagName => { switch (tagName) {
        case "duet-upload-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, DuetUploadItem);
            }
            break;
        case "duet-action-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "duet-badge":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "duet-heading":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "duet-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "duet-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "duet-paragraph":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "duet-progress":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "duet-spacer":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "duet-visually-hidden":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { DuetUploadItem as D, getI18nError as a, defineCustomElement as d, getError as g };
