/*!
 * Built with Duet Design System
 */
import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-909a963e.js';
import { i as inheritGlobalTheme } from './themeable-component-724c0f7e.js';
import { c as createID } from './create-id-149a1b6d.js';
import { f as isEscapeKey, o as isTabKey, j as isEnterKey, d as isArrowLeftKey, b as isArrowUpKey, a as isArrowRightKey, c as isArrowDownKey } from './keyboard-utils-eba88365.js';
import { a as getLanguage, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './language-utils-00ca4c55.js';
import { p as parsePossibleJSON } from './string-utils-ca039233.js';

const duetMultiselectCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:inline-flex;width:100%;max-width:100%;vertical-align:bottom}:host:last-child,:host:last-of-type{margin-right:0 !important}@media (min-width: 36em){:host{width:calc(50% - 16px - 3px)}:host.duet-expand{width:100% !important}}:host(.duet-m-0){margin:0 !important}.duet-multiselect-tooltip{position:absolute;top:12px;right:0}@media (min-width: 48em){.duet-multiselect-tooltip{position:relative;top:4px;right:auto}}.duet-multiselect-placeholder{position:absolute;top:-9px;left:9px;z-index:200;display:block;width:auto;max-width:60%;padding:0 0.25rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background:rgb(255, 255, 255)}.duet-multiselect-container{position:relative;width:100%}.duet-multiselect-wrapper{position:relative;width:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.25}.duet-theme-turva .duet-multiselect-wrapper{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"}.duet-multiselect{display:flex;align-items:center;justify-content:flex-start;width:100%;min-width:8rem;padding:12px 14px !important;overflow:hidden;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;font-variant-numeric:tabular-nums;line-height:1.5;color:rgb(0, 41, 77);text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;background:rgb(255, 255, 255);border:1px solid rgb(144, 149, 153);border-radius:4px;transition:150ms ease}.duet-multiselect .duet-multiselect-label{overflow:hidden;text-overflow:ellipsis}.duet-multiselect:hover{border-color:rgb(144, 149, 153);box-shadow:0 0 0 1px #909599}.duet-theme-turva .duet-multiselect:hover{border-color:rgb(116, 116, 117);box-shadow:0 0 0 1px #747475}.has-error .duet-multiselect:hover{box-shadow:0 0 0 1px #de2362}.duet-theme-turva.has-error .duet-multiselect:hover{box-shadow:0 0 0 1px #e55039}.duet-multiselect:focus,.duet-multiselect.duet-multiselect-active{border-color:rgb(0, 119, 179);outline:0;box-shadow:0 0 0 1px #0077b3 !important;transition:none}.duet-theme-turva .duet-multiselect:focus,.duet-theme-turva .duet-multiselect.duet-multiselect-active{border-color:rgb(23, 28, 58);box-shadow:0 0 0 1px #171c3a !important}.has-error .duet-multiselect:focus,.has-error .duet-multiselect.duet-multiselect-active{box-shadow:0 0 0 1px #de2362}.duet-theme-turva.has-error .duet-multiselect:focus,.duet-theme-turva.has-error .duet-multiselect.duet-multiselect-active{box-shadow:0 0 0 1px #e55039}.duet-multiselect[disabled]{color:rgb(0, 41, 77) !important;cursor:default !important;background:rgb(245, 248, 250) !important;border-color:rgb(245, 248, 250) !important;box-shadow:none !important;opacity:1 !important;-webkit-text-fill-color:rgb(0, 41, 77) !important}.duet-theme-turva .duet-multiselect[disabled]{color:rgb(23, 28, 58) !important;background:rgb(245, 245, 247) !important;border-color:rgb(245, 245, 247) !important;-webkit-text-fill-color:rgb(23, 28, 58) !important}.duet-multiselect>:first-child{flex:1;min-height:24px}.duet-multiselect .duet-multiselect-badge{padding:4px 8px 4px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.75rem;font-weight:600;line-height:1.25;color:rgb(0, 41, 77);background:#d9ebf4;border-radius:20rem}.duet-theme-turva .duet-multiselect .duet-multiselect-badge{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-weight:700;color:rgb(23, 28, 58);background:#e8e8eb}.duet-multiselect .duet-multiselect-icon{margin-left:12px}.has-error .duet-multiselect{border-color:rgb(222, 35, 98) !important}.has-error .duet-multiselect .duet-multiselect-icon{color:rgb(222, 35, 98) !important}.duet-theme-turva.has-error .duet-multiselect{border-color:rgb(224, 42, 13) !important}.duet-theme-turva.has-error .duet-multiselect .duet-multiselect-icon{color:rgb(224, 42, 13) !important}.duet-theme-turva .duet-multiselect{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58);border-color:rgb(116, 116, 117)}.duet-multiselect svg{width:20px;height:20px;color:rgb(0, 41, 77);pointer-events:none}.duet-theme-turva .duet-multiselect svg{color:rgb(23, 28, 58)}.duet-multiselect svg.duet-multiselect-icon--rotate{transform:rotate(180deg)}.duet-multiselect-checkboxes{position:absolute;z-index:700;width:100%;padding:16px;margin:8px 0 0;visibility:hidden;background:rgb(255, 255, 255);border:1px solid rgb(225, 227, 230);border-radius:4px;box-shadow:0 4px 10px 0 rgba(0, 41, 77, 0.15);opacity:0;transition:transform 300ms ease, opacity 300ms ease, visibility 300ms ease;transform:scale(0.96) translateZ(0) translateY(-20px);transform-origin:top right}.duet-theme-turva .duet-multiselect-checkboxes{background:rgb(255, 255, 255);border-color:rgb(228, 228, 230);box-shadow:0 4px 10px 0 rgba(23, 28, 58, 0.15)}.duet-multiselect-checkboxes.duet-multiselect-checkboxes-active{visibility:visible;opacity:1;transition-property:transform, opacity;transform:scale(1.0001) translateZ(0) translateY(0)}.duet-multiselect-checkboxes .duet-multiselect-all-control-buttons{padding:8px 0;margin:-16px;margin-bottom:16px;border-bottom:1px solid rgb(225, 227, 230)}.duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button{padding:6px 16px;margin:-4px 0;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:600;color:rgb(0, 119, 179);cursor:pointer;border-radius:4px}.duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva .duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button:focus,.duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button:focus.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button:first-child{border-right:1px solid rgb(225, 227, 230)}.duet-theme-turva .duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(198, 12, 48)}.duet-theme-turva .duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button:hover{color:rgb(23, 28, 58)}.duet-multiselect-checkboxes .duet-multiselect-all-control-buttons button:hover{color:rgb(0, 41, 77)}.duet-multiselect-help{display:block;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:400;line-height:1.25;color:rgb(101, 119, 135);border-radius:4px}.duet-multiselect-help span{display:block;margin-top:8px}.duet-theme-turva .duet-multiselect-help{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(116, 116, 117)}.has-error .duet-multiselect-help{color:rgb(222, 35, 98)}.duet-theme-turva.has-error .duet-multiselect-help{color:rgb(224, 42, 13)}.duet-label-hidden duet-label{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}";

function toggleInArray(arr, item) {
    return arr.includes(item) ? arr.filter(i => i !== item) : [...arr, item];
}
const DuetMultiselect = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.duetChange = createEvent(this, "duetChange", 3);
        this.duetFocus = createEvent(this, "duetFocus", 7);
        this.duetBlur = createEvent(this, "duetBlur", 7);
        /**
         * Own Properties
         */
        this.errorId = createID("DuetError");
        this.labelId = createID("DuetLabel");
        this.topCaptionId = createID("DuetCaptionTop");
        this.selectedLangObject = {
            en: "selected",
            fi: "valittu",
            sv: "vald",
        };
        this.selectAllLabel = {
            en: "Select all",
            fi: "Valitse kaikki",
            sv: "Välj alla",
        };
        this.clearAllLabel = {
            en: "Clear all",
            fi: "Tyhjennä kaikki",
            sv: "Rensa alla",
        };
        this.placeholderLabel = {
            en: "Hint",
            fi: "Vihje",
            sv: "Tips",
        };
        /**
         * Component event handling.
         */
        this.onChange = (ev) => {
            this.duetChange.emit({
                originalEvent: ev,
                value: this.value,
                component: "duet-multiselect",
            });
        };
        this.onBlur = (ev) => {
            this.duetBlur.emit({
                originalEvent: ev,
                value: this.value,
                component: "duet-multiselect",
            });
        };
        this.onFocus = (ev) => {
            this.duetFocus.emit({
                originalEvent: ev,
                value: this.value,
                component: "duet-multiselect",
            });
        };
        this.onMultiselectKeyDown = (e) => {
            if (isEscapeKey(e) || isTabKey(e)) {
                if (this.checkboxesVisible) {
                    this.checkboxesVisible = false;
                    this.multiselectElement.focus();
                    e.preventDefault();
                }
            }
        };
        this.onMultiselectInputKeyDown = (e) => {
            if (isEnterKey(e)) {
                e.preventDefault();
                this.toggleCheckboxes();
                setTimeout(() => {
                    if (this.checkboxesVisible) {
                        const firstOption = this.element.shadowRoot.querySelector(`#${this.getOptionIdentifier(this.allControls ? -2 : 0)}`);
                        if (firstOption) {
                            firstOption.focus();
                        }
                    }
                }, 200);
            }
        };
        this.onCheckboxKeyDown = (e, key) => {
            let nextOption;
            if (isArrowLeftKey(e) || isArrowUpKey(e)) {
                nextOption = this.element.shadowRoot.querySelector(`#${this.getOptionIdentifier(key - 1)}`);
            }
            else if (isArrowRightKey(e) || isArrowDownKey(e)) {
                nextOption = this.element.shadowRoot.querySelector(`#${this.getOptionIdentifier(key + 1)}`);
            }
            if (nextOption) {
                nextOption.focus();
                e.preventDefault();
                this.activeDescendant = nextOption.id;
            }
        };
        this.toggleCheckboxes = () => {
            this.checkboxesVisible = !this.checkboxesVisible;
        };
        this.toggleCheckbox = (e, item) => {
            this.value = toggleInArray(this.value, item);
            this.onChange(e);
        };
        this.handleSelectAllClick = (e) => {
            this.value = this.processedItems;
            this.onChange(e);
        };
        this.handleClearAllClick = (e) => {
            this.value = [];
            this.onChange(e);
        };
        this.getOptionIdentifier = (key) => {
            return `${this.identifier}-option-${key}`;
        };
        this.getDescribedBy = () => {
            const describedBy = [];
            if (this.isCaptionVisible && this.topCaptionId) {
                describedBy.push(this.topCaptionId);
            }
            if (this.accessibleDescribedBy) {
                describedBy.push(this.accessibleDescribedBy);
            }
            if (this.error) {
                describedBy.push(this.errorId);
            }
            return describedBy.length > 0 ? describedBy.join(" ") : null;
        };
        this.processedItems = [];
        this.checkboxesVisible = false;
        this.activeDescendant = "";
        this.language = getLanguage();
        this.margin = "auto";
        this.error = "";
        this.accessibleLiveError = "polite";
        this.expand = false;
        this.value = [];
        this.theme = "";
        this.labelHidden = false;
        this.identifier = createID("DuetMultiselect");
        this.allControls = false;
        this.placeholder = "";
        this.caption = undefined;
        this.items = undefined;
        this.disabled = false;
        this.label = "label";
        this.labelColor = undefined;
        this.labelWeight = undefined;
        this.accessibleDescribedBy = undefined;
        this.tooltip = "";
        this.tooltipDirection = "auto";
    }
    handleFocus(e) {
        const isClickOutside = e.composedPath().every(node => node !== this.element);
        if (isClickOutside) {
            this.checkboxesVisible = false;
        }
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        this.isCaptionVisible = !!this.caption;
        this.refresh();
    }
    connectedCallback() {
        connectLanguageChangeObserver(this);
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
    }
    /**
     * Sets focus on the specified `duet-multiselect`. Use this method instead of the global
     * `multiselect.focus()`.
     */
    async setFocus(options) {
        if (this.multiselectElement) {
            this.multiselectElement.focus(options);
        }
    }
    /**
     * Local methods.
     */
    async refresh() {
        this.processedItems = parsePossibleJSON(this.items);
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        return (h(Host, { class: {
                "duet-m-0": this.margin === "none",
                "duet-expand": this.expand,
            } }, h("div", { class: {
                "duet-multiselect-container": true,
                "duet-label-hidden": this.labelHidden,
                "duet-theme-turva": this.theme === "turva",
                "duet-input-top-caption-shown": this.isCaptionVisible,
                "has-error": !!this.error,
            }, onKeyDown: (e) => this.onMultiselectKeyDown(e) }, h("duet-label", { theme: this.theme === "turva" ? "turva" : "default", class: { "duet-has-tooltip": !!this.tooltip }, color: this.labelColor, weight: this.labelWeight, id: this.labelId, for: this.identifier }, this.label), this.tooltip && (h("duet-tooltip", { class: "duet-multiselect-tooltip", direction: this.tooltipDirection, accessibleInputLabel: this.label }, this.tooltip)), this.caption && (h("duet-caption", { id: this.topCaptionId, size: "medium" }, this.caption)), h("div", { class: "duet-multiselect-wrapper" }, h("button", { id: this.identifier, ref: el => (this.multiselectElement = el), class: { "duet-multiselect": true, "duet-multiselect-active": this.checkboxesVisible }, tabindex: "0", onClick: () => this.toggleCheckboxes(), onFocus: e => this.onFocus(e), onBlur: e => this.onBlur(e), role: "combobox", "aria-expanded": this.checkboxesVisible ? "true" : "false", "aria-haspopup": "listbox", "aria-labelledby": this.labelId, "aria-describedby": this.getDescribedBy(), "aria-owns": `${this.identifier}-checkboxes`, onKeyDown: (e) => this.onMultiselectInputKeyDown(e), disabled: this.disabled }, h("span", { role: "textbox", "aria-readonly": "true", "aria-multiline": "false", "aria-autocomplete": "none", "aria-controls": `${this.identifier}-checkboxes`, "aria-label": this.placeholderLabel[this.language], class: "duet-multiselect-label" }, this.placeholder), this.value && this.value.length > 0 && (h("span", { class: "duet-multiselect-badge" }, this.value.length, h("duet-visually-hidden", null, this.selectedLangObject[this.language], ", ", this.value.map(item => item.label).join(", ")))), h("svg", { class: { "duet-multiselect-icon": true, "duet-multiselect-icon--rotate": this.checkboxesVisible }, fill: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, h("path", { d: "m12 18.999c-.4 0-.776-.156-1.059-.438l-10.721-10.72c-.142-.142-.22-.33-.22-.531 0-.2.078-.389.22-.53.142-.142.33-.22.53-.22s.389.078.53.22l10.72 10.719 10.72-10.719c.142-.142.33-.22.53-.22s.389.078.53.22c.142.142.22.33.22.53s-.078.389-.22.53l-10.72 10.72c-.282.283-.659.439-1.06.439z" }))), h("div", { id: `${this.identifier}-checkboxes`, role: "listbox", class: {
                "duet-multiselect-checkboxes": true,
                "duet-multiselect-checkboxes-active": this.checkboxesVisible,
            }, "aria-activedescendant": this.activeDescendant, "aria-multiselectable": "true" }, this.processedItems && this.allControls && (h("div", { class: "duet-multiselect-all-control-buttons" }, h("button", { class: "duet-multiselect-select-all", onClick: this.handleSelectAllClick, id: this.getOptionIdentifier(-2), onKeyDown: (e) => this.onCheckboxKeyDown(e, -2) }, this.selectAllLabel[this.language]), h("button", { class: "duet-multiselect-clear-all", onClick: this.handleClearAllClick, id: this.getOptionIdentifier(-1), onKeyDown: (e) => this.onCheckboxKeyDown(e, -1) }, this.clearAllLabel[this.language]))), this.processedItems &&
            this.processedItems.map((item, key) => {
                var _a, _b;
                return (h("duet-checkbox", { identifier: this.getOptionIdentifier(key), role: "option", label: item.label, value: item.value, key: item.value, checked: (_a = this.value) === null || _a === void 0 ? void 0 : _a.includes(item), "accessible-selected": ((_b = this.value) === null || _b === void 0 ? void 0 : _b.includes(item)) ? "true" : undefined, disabled: !this.checkboxesVisible || item.disabled, onDuetChange: e => this.toggleCheckbox(e, item), onKeyDown: (e) => this.onCheckboxKeyDown(e, key), theme: this.theme }));
            }))), h("span", { class: "duet-multiselect-help", id: this.errorId, "aria-atomic": "true", "aria-live": this.accessibleLiveError, "aria-relevant": "additions removals" }, this.error && h("span", null, this.error)))));
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "items": ["refresh"]
    }; }
};
DuetMultiselect.style = duetMultiselectCss;

export { DuetMultiselect as duet_multiselect };
