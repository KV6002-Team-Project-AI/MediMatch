/*!
 * Built with Duet Design System
 */
import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-909a963e.js';
import { i as inheritGlobalTheme } from './themeable-component-724c0f7e.js';

const duetPopupMenuItemCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:flex;flex-direction:row;gap:8px;align-items:center;justify-content:flex-start}.duet-popup-menu-item{display:flex;flex-grow:1;gap:12px;align-items:center;height:100%;padding:8px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.5;color:rgb(0, 41, 77);text-align:left;text-decoration:none;cursor:pointer}.duet-popup-menu-item:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-theme-turva .duet-popup-menu-item:focus,.duet-popup-menu-item:focus.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-popup-menu-item.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-popup-menu-item.active{background:rgb(243, 249, 252)}.duet-popup-menu-item.active.duet-theme-turva{background:rgb(245, 245, 247)}.duet-popup-menu-item:hover{background:rgb(230, 242, 248)}.duet-popup-menu-item:hover.duet-theme-turva{background:rgb(228, 228, 230)}.duet-popup-menu-item .duet-popup-menu-item-label{flex-grow:1}";

const DuetPopupMenuItem = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.duetFocus = createEvent(this, "duetFocus", 7);
        this.duetBlur = createEvent(this, "duetBlur", 7);
        /**
         * Component event handling.
         */
        this.onFocus = (ev) => {
            this.focus = true;
            this.duetFocus.emit({
                originalEvent: ev,
                value: this.value,
                component: "duet-popup-menu-item",
            });
        };
        this.onBlur = (ev) => {
            this.focus = false;
            this.duetBlur.emit({
                originalEvent: ev,
                value: this.value,
                component: "duet-popup-menu-item",
            });
        };
        this.focus = false;
        this.accessibleLabel = undefined;
        this.theme = "";
        this.url = undefined;
        this.external = false;
        this.value = undefined;
        this.leadingIcon = undefined;
        this.leadingIconColor = undefined;
        this.trailingIcon = undefined;
        this.trailingText = undefined;
        this.active = false;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
    }
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    async setFocus(options) {
        setTimeout(() => this.itemElement.focus(options), 200);
    }
    /**
     * isFocused.
     */
    async isFocused() {
        return this.focus;
    }
    render() {
        const TagName = this.url ? "a" : "button";
        const classes = {
            "duet-popup-menu-item": true,
            active: this.active,
            "duet-theme-turva": this.theme === "turva",
        };
        return (h(Host, null, h(TagName, { ref: element => (this.itemElement = element), tabIndex: -1, onFocus: this.onFocus, onBlur: this.onBlur, role: "menuitem", "aria-label": this.accessibleLabel, class: classes, value: this.value, href: this.url, target: this.external ? "_blank" : undefined, rel: this.external ? "noopener" : undefined }, this.leadingIcon && (h("duet-icon", { name: this.leadingIcon, size: "x-small", color: this.leadingIconColor ? this.leadingIconColor : "currentColor", class: "duet-popup-menu-item-leading", margin: "none" })), h("span", { class: "duet-popup-menu-item-label" }, h("slot", null)), this.trailingIcon && (h("duet-icon", { name: this.trailingIcon, size: "x-small", color: "currentColor", class: "duet-popup-menu-item-trailing", margin: "none" })), this.trailingText && h("span", { class: "duet-popup-menu-item-trailing" }, this.trailingText))));
    }
    get element() { return getElement(this); }
};
DuetPopupMenuItem.style = duetPopupMenuItemCss;

export { DuetPopupMenuItem as duet_popup_menu_item };
