/*!
 * Built with Duet Design System
 */
import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-909a963e.js';
import { i as inheritGlobalTheme } from './themeable-component-724c0f7e.js';
import { c as createID } from './create-id-149a1b6d.js';
import { i as isKeyboardClick } from './keyboard-utils-eba88365.js';
import { a as getLanguage, g as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './language-utils-00ca4c55.js';
import './string-utils-ca039233.js';

const duetShowMoreCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block}.duet-show-more{margin-bottom:16px !important;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.5;color:rgb(0, 41, 77)}.duet-show-more.duet-m-0{margin:0 !important}.duet-show-more .slotted-content{display:none}.duet-show-more.open .slotted-content{display:block}.duet-show-more.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}";

const DuetShowMore = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.duetToggle = createEvent(this, "duetToggle", 7);
        this.contentId = createID("DuetShowMore");
        this.buttonId = createID("DuetShowMoreButton");
        this.handleKeyDown = (e) => {
            if (isKeyboardClick(e)) {
                this.handleClick(e);
            }
        };
        this.handleClick = (e) => {
            e.preventDefault();
            const open = !this.open;
            this.open = open;
            if (open) {
                setTimeout(() => {
                    this.contentElement.focus();
                }, 100);
                setTimeout(() => {
                    this.buttonAriaOpen = open;
                }, 500);
            }
            else {
                this.buttonAriaOpen = open;
            }
            this.duetToggle.emit({
                component: "duet-show-more",
                originalEvent: e,
            });
        };
        this.buttonAriaOpen = false;
        this.theme = "";
        this.language = getLanguage();
        this.showMoreLabelDefaults = {
            fi: "Näytä lisää",
            sv: "Visa mer",
            en: "Show more",
        };
        this.showMoreLabel = getLocaleString(this.showMoreLabelDefaults);
        this.showLessLabelDefaults = {
            fi: "Näytä vähemmän",
            sv: "Visa mindre",
            en: "Show less",
        };
        this.showLessLabel = getLocaleString(this.showLessLabelDefaults);
        this.showMoreAccessibleLabelDefaults = {
            fi: "Näytä lisää tästä aiheesta",
            sv: "Visa mer om detta ämne",
            en: "Show more about this subject",
        };
        this.showMoreAccessibleLabel = getLocaleString(this.showMoreAccessibleLabelDefaults);
        this.showLessAccessibleLabelDefaults = {
            fi: "Näytä vähemmän tästä aiheesta",
            sv: "Visa mindre om detta ämne",
            en: "Show less about this subject",
        };
        this.showLessAccessibleLabel = getLocaleString(this.showLessAccessibleLabelDefaults);
        this.margin = "auto";
        this.buttonMargin = "auto";
        this.buttonPadding = "auto";
        this.open = false;
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        this.buttonAriaOpen = this.open;
    }
    connectedCallback() {
        connectLanguageChangeObserver(this, [
            { prop: "showMoreLabel", defaults: "showMoreLabelDefaults" },
            { prop: "showLessLabel", defaults: "showLessLabelDefaults" },
            { prop: "showMoreAccessibleLabel", defaults: "showMoreAccessibleLabelDefaults" },
            { prop: "showLessAccessibleLabel", defaults: "showLessAccessibleLabelDefaults" },
        ]);
    }
    disconnectedCallback() {
        disconnectLanguageChangeObserver(this);
    }
    /**
     * render() function
     * Always the last one of the class.
     */
    render() {
        return (h(Host, null, h("div", { class: {
                "duet-show-more": true,
                "duet-theme-turva": this.theme === "turva",
                "duet-m-0": this.margin === "none",
                open: this.open,
            } }, h("div", { ref: ref => (this.contentElement = ref), class: { content: true }, id: this.contentId, tabindex: this.open ? "0" : "" }, h("div", { class: { "slotted-content": true } }, h("slot", null))), h("duet-button", { id: this.buttonId, variation: "plain", "accessible-label": this.buttonAriaOpen ? this.showLessAccessibleLabel : this.showMoreAccessibleLabel, "accessible-expanded": this.buttonAriaOpen ? "true" : "false", "accessible-controls": this.contentId, onClick: this.handleClick, onKeyDown: this.handleKeyDown, "icon-right": true, icon: this.open ? "action-arrow-up-small" : "action-arrow-down-small", "icon-size": "medium-small", size: "small", margin: this.buttonMargin, padding: this.buttonPadding, theme: this.theme === "turva" ? "turva" : "default" }, this.open ? this.showLessLabel : this.showMoreLabel))));
    }
    get element() { return getElement(this); }
};
DuetShowMore.style = duetShowMoreCss;

export { DuetShowMore as duet_show_more };
