/*!
 * Built with Duet Design System
 */
import { r as registerInstance, h, H as Host, g as getElement } from './index-909a963e.js';
import { a as media_query_large } from './tokens-04106a43.js';
import { e as enableBodyScroll, d as disableBodyScroll } from './bodyScrollLock.es6-8dc7cca7.js';
import { i as inheritGlobalTheme } from './themeable-component-724c0f7e.js';

const duetSubmenuBarCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;width:100%}:host(:not([open])) ::slotted(duet-submenu-bar-dropdown){display:none}@media (min-width: 62em){:host(:not([open])) ::slotted(duet-submenu-bar-dropdown){display:inherit}}.duet-submenu-bar{position:relative;background:rgb(243, 249, 252)}@media (min-width: 62em){.duet-submenu-bar{border-bottom:1px solid rgb(205, 229, 241)}}.duet-submenu-bar button{display:flex;align-items:center;justify-content:center;width:100%;padding:12px 0;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:400;line-height:1.25;color:rgb(0, 41, 77)}.duet-submenu-bar button.active .caret{transform:rotate(180deg)}.duet-submenu-bar button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px #0077b3}.duet-submenu-bar button .label{position:relative;display:flex;gap:8px;align-items:center;justify-content:center}@media (min-width: 62em){.duet-submenu-bar button{display:none}}.duet-submenu-bar .menu-container{position:absolute;z-index:399;width:100%}.duet-submenu-bar .menu-container.hidden{max-height:0;overflow:hidden;visibility:hidden}@media (min-width: 62em){.duet-submenu-bar .menu-container,.duet-submenu-bar .menu-container.hidden{position:static;z-index:auto;max-height:unset;overflow:visible;visibility:visible}}.duet-submenu-bar .items{width:100%;height:70vh;overflow-y:scroll;visibility:visible;background:rgb(243, 249, 252);border-bottom:1px solid rgb(207, 210, 212)}.duet-submenu-bar .items ::slotted(*){position:relative}.duet-submenu-bar .items.hidden{max-height:0;overflow:hidden;visibility:hidden;border-bottom:0 solid rgb(207, 210, 212)}.duet-submenu-bar .items .list-padding{padding-bottom:188px}@media (min-width: 62em){.duet-submenu-bar .items .list{display:flex;align-items:center;justify-content:space-between;height:100%}.duet-submenu-bar .items,.duet-submenu-bar .items.hidden{position:static;z-index:auto;display:flex;flex-direction:row;align-items:center;justify-content:center;height:auto;max-height:unset;overflow:visible;visibility:visible;border:0}.duet-submenu-bar .items .list-padding{display:none;padding-bottom:0}}.duet-submenu-bar .mobile-background{position:absolute;width:100%;height:100%;background:rgba(0, 41, 77, 0.6)}@media (min-width: 62em){.duet-submenu-bar .mobile-background{display:none}}.duet-submenu-bar.duet-theme-turva{background:rgb(245, 245, 247);border-bottom:1px solid rgb(228, 228, 230)}.duet-submenu-bar.duet-theme-turva button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px #171c3a}.duet-submenu-bar.duet-theme-turva .items{background:rgb(245, 245, 247)}.duet-submenu-bar.duet-theme-turva .mobile-background{background:rgba(23, 28, 58, 0.6)}.duet-submenu-bar.duet-theme-turva .shadow-container .top-shadow{box-shadow:0 2px 6px 0 rgba(23, 28, 58, 0.07)}@media (min-width: 62em){.duet-submenu-bar.duet-theme-turva .shadow-container .top-shadow{box-shadow:0 3px 6px 0 rgba(23, 28, 58, 0.1)}}";

const DuetSubmenuBar = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.mql = [window.matchMedia(media_query_large.replace(/'/g, ""))];
        this.boundMqlFunctions = [];
        this.handleMobileView = () => {
            if (this.mql[0].matches) {
                this.mobile = false;
                this.enableBodyScroll();
            }
            else {
                this.mobile = true;
                if (!this.bodyScroll) {
                    this.disableBodyScroll();
                }
            }
        };
        this.onClick = () => {
            this.open = !this.open;
        };
        this.enableBodyScroll = () => {
            if (this.nav) {
                enableBodyScroll(this.nav);
            }
            if (this.itemsContainer) {
                enableBodyScroll(this.itemsContainer);
            }
        };
        this.disableBodyScroll = () => {
            if (this.nav) {
                disableBodyScroll(this.nav, { reserveScrollBarGap: true });
            }
            if (this.itemsContainer) {
                disableBodyScroll(this.itemsContainer, { reserveScrollBarGap: true });
            }
        };
        this.checkIfHasItems = () => {
            const hasDropdownLinks = !!this.element.querySelector("duet-submenu-bar-dropdown-link");
            const hasLinks = !!this.element.querySelector("duet-submenu-bar-link");
            return hasDropdownLinks || hasLinks;
        };
        this.mobile = true;
        this.bodyScroll = true;
        this.theme = "";
        this.open = false;
        this.accessibleLabel = undefined;
    }
    watchOpenStateHandler(newValue) {
        const open = newValue;
        if (open) {
            this.bodyScroll = false;
            this.disableBodyScroll();
        }
        else {
            this.enableBodyScroll();
            this.bodyScroll = true;
        }
    }
    /**
     * Component lifecycle events.
     */
    componentWillLoad() {
        inheritGlobalTheme(this);
        const children = Array.from(this.element.children).filter(child => !child.hasAttribute("slot"));
        for (const child of children) {
            child.setAttribute("role", "listitem");
        }
    }
    connectedCallback() {
        this.nav = document.querySelector("duet-nav > [slot='mobile']");
        this.hasItems = this.checkIfHasItems();
        this.handleMobileView();
        for (let i = 0; i < this.mql.length; i++) {
            // addEventListener is not available in Stencil hydrate
            if (this.mql[i].addEventListener) {
                const bound = this.handleMobileView.bind(this);
                this.mql[i].addEventListener("change", bound);
                this.boundMqlFunctions[i] = bound;
            }
        }
    }
    disconnectedCallback() {
        for (let i = 0; i < this.mql.length; i++) {
            // removeEventListener is not available in Stencil hydrate
            if (this.mql[i].removeEventListener) {
                this.mql[i].removeEventListener("change", this.boundMqlFunctions[i]);
            }
        }
        this.boundMqlFunctions = [];
        this.enableBodyScroll();
    }
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    async setFocus(options) {
        this.button.focus(options);
    }
    /**
     * render() function
     * Always the last one in the class.
     */
    render() {
        return (h(Host, null, h("nav", { class: { "duet-submenu-bar": true, "duet-theme-turva": this.theme === "turva" }, "aria-label": this.accessibleLabel }, this.hasItems && (h("button", { ref: element => (this.button = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", id: "button", type: "button", class: {
                active: this.open,
            }, onClick: this.onClick }, h("div", { class: "label" }, h("slot", { name: "label" }), h("duet-icon", { theme: this.theme, class: "caret", name: "action-arrow-down-small", margin: "none", size: "xxx-small", color: "currentColor" })))), h("div", { class: {
                "menu-container": true,
                hidden: !this.open,
            }, role: "presentation" }, h("div", { role: this.mobile ? "menu" : null, id: "menu", "aria-labelledby": this.mobile ? "button" : null, "aria-expanded": this.mobile ? (this.open ? "true" : "false") : null, class: {
                items: true,
                hidden: !this.open,
            }, ref: element => (this.itemsContainer = element) }, h("div", { class: "list", role: this.mobile ? "presentation" : "list" }, h("slot", null), h("div", { class: "list-padding" }))), h("div", { class: "mobile-background" })))));
    }
    get element() { return getElement(this); }
    static get watchers() { return {
        "open": ["watchOpenStateHandler"]
    }; }
};
DuetSubmenuBar.style = duetSubmenuBarCss;

export { DuetSubmenuBar as duet_submenu_bar };
