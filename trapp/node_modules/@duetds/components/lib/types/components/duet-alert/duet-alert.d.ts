import { EventEmitter } from "../../stencil-public-runtime";
import { DuetIconName, DuetMargin, DuetPadding, DuetStatus, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
import { DuetLangObject } from "../../utils/language-utils";
export type DuetAlertEvent = {
    component: "duet-alert";
    originalEvent: MouseEvent;
};
export declare class DuetAlert implements ThemeableComponent {
    private descriptiveId;
    private alertContainer;
    element: HTMLElement;
    /**
     * Theme of the card.
     */
    theme: DuetTheme;
    /**
     * State() variables
     * Inlined decorator, alphabetical order.
     */
    isDismissed: boolean;
    /**
     * Timeout Id for auto dismiss setTimeout
     */
    timeoutID: ReturnType<typeof setTimeout>;
    /**
     * Property to change languageDefaults on the component.
     * normally you would handle these strings on an application level and override accessibleLabel when needed
     * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
     */
    accessibleLabelDefaults: DuetLangObject | string;
    /**
     * Adds accessible label for the dismissible alert close button.
     * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
     */
    accessibleLabel: string;
    /**
     * Enable or disabled announcements by assistive technologies.
     */
    announcements: boolean;
    /**
     * Icon to display to the left of the content.
     */
    icon: DuetIconName;
    /**
     * Time in milliseconds which is waited before auto dismiss.
     */
    autoDismiss: number;
    /**
     * Controls the margin of the component.
     */
    margin: DuetMargin;
    /**
     * Controls the padding of the component.
     */
    padding: DuetPadding;
    /**
     * Style variation of the alert.
     */
    variation: DuetStatus;
    /**
     * Should a button be rendered to dismiss the alert?
     */
    dismissible: boolean;
    /**
     * Should it be possible to focus on alert?
     */
    focusable: boolean;
    /**
     * Emitted when the dismiss button is clicked
     */
    duetDismiss: EventEmitter<DuetAlertEvent>;
    /**
     * Component lifecycle events.
     */
    componentWillLoad(): void;
    componentDidLoad(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    /**
     * Show.
     */
    show(): Promise<void>;
    /**
     * Hide.
     */
    hide(): Promise<void>;
    /**
     * Sets focus on the specified `duet-alert`.
     * Works only when focusable property is set to true.
     * Use this method instead of the global
     * `button.focus()`.
     */
    setFocus(options?: FocusOptions): Promise<void>;
    private handleDismiss;
    private handleShow;
    private handleHide;
    /**
     * There is bug in NVDA screen reader
     * that is causing multiple alert readings
     * when alert contains other components (link, button etc.).
     */
    /**
     * render() function
     * Always the last one in the class.
     */
    render(): any;
}
