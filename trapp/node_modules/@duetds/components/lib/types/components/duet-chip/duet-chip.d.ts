import { EventEmitter } from "../../stencil-public-runtime";
import { ThemeableComponent } from "../../common";
import { DuetIconName, DuetTheme } from "../../common-types";
export type DuetChipVariation = "button" | "filter" | "input" | "radio";
export type DuetChipEvent = {
    originalEvent?: Event;
    checked: boolean;
    value: string;
    component: "duet-chip";
};
export declare class DuetChip implements ThemeableComponent {
    focus: boolean;
    /**
     * Own Properties.
     */
    private chipId;
    private focusableElement;
    /**
     * Reference to host HTML element.
     */
    element: HTMLElement;
    popupElement: HTMLDuetPopupMenuElement;
    popupOpen: boolean;
    /**
     * Adds accessible label for the chip that is only shown for screen readers.
     * Typically, this label text replaces the visible text on the button for
     * users who use assistive technology.
     */
    accessibleLabel: string;
    /**
     * Variation of the chip.
     * Button should be used to present a list of actions or suggestions. It behaves like a button and must be used
     * together with a click handler. Filter acts like a checkbox, it can be toggled on or off, and it should be
     * used with a value. Input represents items input by the user, and the chip can be removed with a click.
     * Radio behaves like a radio button, it can be toggled on or off, and it should be used with a value and name.
     * WARNING: Input variation is still work-in-progress and subject to change.
     */
    variation: DuetChipVariation;
    /**
     * Id of the DuetPopupMenu that is controlled by the chip.
     */
    popup: string;
    /**
     * Icon to display to the left of the chip content.
     */
    icon: DuetIconName;
    /**
     * Theme of the button.
     */
    theme: DuetTheme;
    /**
     * Adds a unique identifier for the chip.
     */
    identifier: string;
    /**
     * The value of the html input when used as filter, or the button's value.
     */
    value: string;
    /**
     * Name attribute of the html input (filter) or button.
     */
    name: string;
    /**
     * Checked state of the filter chip.
     */
    checked: boolean;
    clearOtherRadioButtons(): void;
    /**
     * Makes the chip look inactive and announced as unavailable to assistive technologies. Prevents the default action.
     * Not available for the input variation.
     */
    disabled: boolean;
    /**
     * Emitted when the checked property has changed (applicable only for the filter variation).
     */
    duetChange: EventEmitter<DuetChipEvent>;
    /**
     * Emitted when the chip receives focus.
     */
    duetFocus: EventEmitter<DuetChipEvent>;
    /**
     * Emitted when the chip loses focus.
     */
    duetBlur: EventEmitter<DuetChipEvent>;
    /**
     * Component lifecycle events.
     */
    componentWillLoad(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private popupSetUp;
    /**
     * Component event handling.
     */
    private onFocus;
    private onBlur;
    private emitChange;
    /**
     * Change checked state and emit duetChange event.
     */
    private onFilterChange;
    /**
     * Change checked state and emit duetChange event.
     */
    private onRadioChange;
    /**
     * Stop propagation and prevent default if popup is present, as the popup controls value and checked state.
     */
    private onFilterClick;
    /**
     * Remove input chip
     */
    private onRemoveClick;
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    setFocus(options?: FocusOptions): Promise<void>;
    render(): any;
}
