import { DuetChoiceGroupBreakpoint, DuetDirection, DuetMargin, DuetTheme, DuetTooltipDirection } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export declare class DuetChoiceGroup implements ThemeableComponent {
    /**
     * Own Properties.
     */
    private mutationO?;
    private choiceGroupName;
    private initialValue;
    private choices;
    /**
     * Reference to host HTML element.
     */
    element: HTMLElement;
    /**
     * Direction of the choice group.
     */
    direction: DuetDirection;
    /**
     * Controls the margin of the component.
     */
    margin: DuetMargin;
    /**
     * Theme of the choice group.
     */
    theme: DuetTheme;
    /**
     * Display choice group in error state along with an error message.
     */
    error: string;
    /**
     * Name for the choice buttons within this group. **This must be unique amongst all other inputs.**
     */
    name: string;
    /**
     * Legend displayed for the choice buttons in this group.
     */
    label: string;
    /**
     * Visually hide the label, but still show it to screen readers.
     */
    labelHidden: boolean;
    /**
     * Additional caption to show inside the label of the choice group.
     */
    caption: string;
    /**
     * Tooltip to display next to the label of the choice group.
     */
    tooltip: string;
    /**
     * With direction setting you can force the tooltip to always open towards left
     * or right instead of automatically determining the direction.
     */
    tooltipDirection: DuetTooltipDirection;
    /**
     * Enable or disable the automatic responsive behaviour of the choice group
     * component when horizontal setting is used. Setting this option to "true"
     * makes sure that contents are stacked vertically on mobile.
     */
    responsive: boolean;
    /**
     * Switch the breakpoint used to trigger the content stacking. These match to
     * similar media query tokens eg.: $media-query-small, $media-query-medium.
     */
    breakpoint: DuetChoiceGroupBreakpoint;
    /**
     * The value of the selected choice button.
     */
    value: string;
    /**
     * Determines, whether the control is disabled or not.
     */
    disabled: boolean;
    /**
     * Sets whether making a choice is required or optional. Will set contained choices to required as well.
     */
    required: boolean;
    /**
     * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive"
     * makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave
     * the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message
     * unread by screen readers.
     */
    accessibleLiveError: "off" | "polite" | "assertive";
    /**
     * Component lifecycle events.
     */
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    componentWillLoad(): void;
    /**
     * Component event handling.
     */
    private onSelect;
    private onChoiceReady;
    private onChoiceRemove;
    /**
     * Local methods
     */
    private updateChoices;
    /**
     * render() function
     * Always the last one in the class.
     */
    render(): any;
}
