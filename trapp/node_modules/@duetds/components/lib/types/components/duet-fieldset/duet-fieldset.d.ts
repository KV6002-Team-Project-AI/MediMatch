import { DuetHeadingLevel, DuetMargin, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
/**
 * @slot unnamed default slot - The componentâ€™s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot tooltip - Use to place a tooltip alongside the fieldset label.
 */
export declare class DuetFieldset implements ThemeableComponent {
    private errorId;
    private labelId;
    /**
     * Reference to host HTML element.
     */
    element: HTMLElement;
    hasTooltip: boolean;
    /**
     * Theme of the fieldset.
     */
    theme: DuetTheme;
    /**
     * Controls the margin of the component.
     */
    margin: DuetMargin;
    /**
     * Additional caption to show next to the label.
     */
    caption: string;
    /**
     * Label/legend displayed for the fieldset.
     */
    label: string;
    /**
     * @internal
     * Display label/legend with smaller lineheight to match it with DuetInput's label lineheight.
     * Needed with DuetChoiceGroup.
     * If caption is present, larger lineheight is used regardless of this prop.
     */
    compactLabel: boolean;
    /**
     * An error message to be shown next to the label.
     */
    error: string;
    /**
     * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive"
     * makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave
     * the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message
     * unread by screen readers.
     */
    accessibleLiveError: "off" | "polite" | "assertive";
    /**
     * Heading level for the label in the legend element. This is only used to give screen readers better logical structure.
     * This does not affect visual appearance.
     */
    labelHeadingLevel: DuetHeadingLevel;
    /**
     * Visually hide the label, but still show it to screen readers.
     */
    labelHidden: boolean;
    /**
     * Component lifecycle events.
     */
    componentWillLoad(): void;
    private checkHasTooltip;
    /**
     * render() function
     * Always the last one in the class.
     */
    render(): any;
}
