import { EventEmitter } from "../../stencil-public-runtime";
import { DuetIconColor, DuetIconName, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export type DuetPopupMenuItemEvent = {
    originalEvent?: Event;
    value: string;
    component: "duet-popup-menu-item";
};
export declare class DuetPopupMenuItem implements ThemeableComponent {
    focus: boolean;
    private itemElement;
    /**
     * Reference to host HTML element.
     */
    element: HTMLElement;
    /**
     * Adds accessible label for the button or link that is only shown for screen readers.
     * Typically, this label text replaces the visible text on the button for
     * users who use assistive technology.
     */
    accessibleLabel: string;
    /**
     * Theme.
     */
    theme: DuetTheme;
    /**
     * A destination to link to, rendered in the href attribute of a link.
     */
    url: string;
    /**
     * Forces URL to open in a new browser tab. Used together with URL prop.
     */
    external: boolean;
    /**
     * Value
     */
    value: string;
    /**
     * Left icon.
     */
    leadingIcon: DuetIconName;
    /**
     * Left icon color.
     */
    leadingIconColor: DuetIconColor;
    /**
     * Right icon.
     */
    trailingIcon: DuetIconName;
    /**
     * Short text to display after the label, e.g. keyboard shortcut.
     */
    trailingText: string;
    /**
     * Is the item currently active (e.g. selected)
     */
    active: boolean;
    /**
     * Emitted when the item receives focus.
     */
    duetFocus: EventEmitter<DuetPopupMenuItemEvent>;
    /**
     * Emitted when the item loses focus.
     */
    duetBlur: EventEmitter<DuetPopupMenuItemEvent>;
    /**
     * Component lifecycle events.
     */
    componentWillLoad(): void;
    /**
     * Component event handling.
     */
    private onFocus;
    private onBlur;
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    setFocus(options?: FocusOptions): Promise<void>;
    /**
     * isFocused.
     */
    isFocused(): Promise<boolean>;
    render(): any;
}
