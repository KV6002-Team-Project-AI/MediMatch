import { EventEmitter } from "../../stencil-public-runtime";
import { DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export type DuetPopupMenuEvent = {
    open: boolean;
    component: "duet-popup-menu";
};
export declare class DuetPopupMenu implements ThemeableComponent {
    private teleport;
    /**
     * Reference to host HTML element.
     */
    element: HTMLElement;
    open: boolean;
    menuY: number;
    menuX: number;
    /**
     * Adds accessible label for the menu that is only presented for users of assistive technologies.
     * A popup menu should always have an accessible label that describes the popup's function.
     */
    accessibleLabel: string;
    /**
     * Theme.
     */
    theme: DuetTheme;
    /**
     * Element controlling the opening and closing of the popup menu.
     */
    controller: HTMLElement | (HTMLElement & {
        setFocus(): void;
    });
    /**
     * Placement of the popup menu relative to its controller.
     * Possible values: "top", "bottom", "left" and "right", optionally combined with "-start" or "-end".
     */
    placement: "top" | "right" | "bottom" | "left" | "top-start" | "top-end" | "right-start" | "right-end" | "bottom-start" | "bottom-end" | "left-start" | "left-end";
    /**
     * Position.
     */
    position: "absolute" | "fixed";
    /**
     * Main axis positioning offset of the popup menu relative to its controller.
     * For "top" and "bottom" placements main axis is vertical, for "left" and "right" horizontal.
     */
    mainAxisOffset: number;
    /**
     * Cross axis positioning offset of the popup menu relative to its controller.
     * For "top" and "bottom" placements cross axis is horizontal, for "left" and "right" vertical.
     */
    crossAxisOffset: number;
    /**
     * Emitted when the popup menu is opened or closed.
     */
    duetToggle: EventEmitter<DuetPopupMenuEvent>;
    /**
     * Component lifecycle events.
     */
    componentWillLoad(): void;
    componentDidLoad(): void;
    /**
     * Component event handling.
     */
    handleKeyUp(evt: any): void;
    handleKeyDown(evt: any): Promise<void>;
    handleClick(evt: any): void;
    /**
     * isOpen.
     */
    isOpen(): Promise<boolean>;
    /**
     * Show.
     */
    show(): Promise<void>;
    /**
     * Hide.
     */
    hide(): Promise<void>;
    /**
     * Toggle.
     */
    toggle(): Promise<void>;
    private focusController;
    private updatePlacement;
    private get itemElements();
    private getFocusedItemIndex;
    render(): any;
}
