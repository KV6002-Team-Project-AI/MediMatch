import { EventEmitter } from "../../stencil-public-runtime";
import { DuetColor, DuetLanguage, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export type DuetSlideoutEventDetails = {
    originalEvent: Event;
    data: {
        element: HTMLElement;
        open: boolean;
    };
    component: "duet-slideout";
};
/**
 * @slot sticky-header - Content will be fixed to the top of the modal when scrolling.
 */
export declare class DuetSlideout implements ThemeableComponent {
    /**
     * Own Properties.
     */
    private dialog;
    private openButton;
    private closeButton;
    private exitLangObject;
    private topLevelOpenMenuBarLangObject;
    private isSafariBrowser;
    private intersectionObserver;
    private mutationObserver;
    private teleport;
    private hasStickyHeaderSlot;
    /**
     * Reference to host HTML element.
     */
    element: HTMLElement;
    language: DuetLanguage;
    displaying: boolean;
    openPanel: boolean;
    /**
     * Theme.
     */
    theme: DuetTheme;
    /**
     * Role of the slot's container. By default this is menubar and the slideout should by default contain menuitems.
     */
    accessibleRole: string;
    /**
     * Open
     */
    open: boolean;
    /**
     * Id of the DuetMenuBarButton or DuetButton that opens the menu.
     */
    opener: string;
    /**
     * Background color. Use one of the color tokens.
     */
    backgroundColor: DuetColor;
    /**
     * Event raised when the menu has been opened. You can prevent the
     * default browser functionality by calling **event.detail.originalEvent.preventDefault()**
     * inside your listener. Additionally, the passed data is available via **event.detail.data**.
     */
    duetSlideoutEvent: EventEmitter<DuetSlideoutEventDetails>;
    /**
     * Component lifecycle events.
     */
    componentWillLoad(): void;
    connectedCallback(): void;
    componentDidRender(): void;
    disconnectedCallback(): void;
    private handleBodyScrolling;
    private setOpenButton;
    private openButtonEventListener;
    private getOpenPanel;
    private toggleMenu;
    private bgOnClick;
    private onClick;
    /**
     * Component event handling.
     */
    handleKeyUp(ev: any): void;
    /**
     * Sets focus. Use this method instead of the global focus().
     */
    setFocus(options?: FocusOptions): Promise<void>;
    /**
     * Toggles the slideout.
     */
    toggle(): Promise<void>;
    /**
     * Shows the slideout. Additionally saves the element (DuetButton or DuetMenuBarButton) that triggered
     * the slideout so that focus can be moved back to this specific element when
     * the slideout dialog is closed.
     */
    show(): Promise<void>;
    /**
     * Hides the slideout dialog and puts focus back to the original element
     * that triggered the slideout (if weâ€™re still in the same view).
     */
    hide(): Promise<void>;
    /**
     * render() function
     * Always the last one in the class.
     */
    render(): any;
}
